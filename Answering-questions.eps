%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Answering-questions.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Chris
%%CreationDate: 11-10-17
%%BoundingBox: 0 0 412 287
%%HiResBoundingBox: 0 0 411.8950 286.6797
%%CropBox: 0 0 411.8950 286.6797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 15932 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD06FF7D7EFFA87DA8FD7AFFA8A8FFFD047DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DFD13A87EA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DFD26A87DFD06FF7D7D%A8A87DA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD13FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8A8FD25FFA8FD06FFA8FFA8FFA8FF7DFFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8A8FD12FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD25FFA8FD0CFFA8%FFFFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFA8FD13FFA8FFA8FFAFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FFFFFFA8FFAFFFA8FFFFFF%A8FD25FF7DFD0CFF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD12%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8AFA8%FFA87DA8FFA8FFA8FFA8A8FD10FFA8FD0FFFA8A8A87D7DA8FFA8FD09FFA8%A8FFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA9FFA8FD13FFA8FFA8FFA8FFFF%FFFD067D527D527D7D7D52A8FFA8A8AF52FD047DFFA8FFA8FFA8FFA8FD0D%FF7D7D7D527DA85252527D7DFD05FFA8A8A87D7DA8A8FFA8FF7D52A8FD08%FF7DFFA8FFA8FFA8FFA87D52A8A8A8527DA8FFA8A8A8FD11FFA8A8A8FFA8%FFA8FFA87D527D525221FD06527D7DA8277D7E7D2752527DA8FFA8FFA8FF%A8A8FD0DFF7D277DFD045220522E52FD04FF7DA87D7DA8A8A8FFFFA8FF52%7DA8FD07FFA8A8FFFFA8FFAFFFA8FF5252A8FF7D277DFFFFFFA8FD13FFA8%FFAFFFA8FFAFFFA87D7EFD04A8FFA8FFA8FFA8FFFFFFA8FFFD05A8FFA8FF%AFFFA8FFA8FD0DFFA8FFA87DA8FFA8FFFFFFA8FFFFA97DFD09FFA87D5253%FD09FF7DFFA8FFA8FFA8A87D7D52FFA87E27A8A8FFA8A8FD12FFA8A8A8FF%A8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FD11FFA8FD07FF7EA87DFD0AFFA8A87DFD0AFFA8A8FFA87D7D%A8FFFFA8FFA8FF7D7D7DFFA8FFA8FD13FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFAFFFA8FD17FFA8%7D7DFD0BFFA8A85252FD09FF7DFFA8FF7D7D7EFFA85252A8FF7D277DAFFF%A8A8FD12FFA8AFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD16FFA87DA8FD0CFFA8FF527DA8FD%08FFA8FFFFFFA87DA8FFFF2E59A8FF7D527DFFA8FFA8FD13FFA8FFA8FFAF%FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8%FFFFFFA8FD15FF7DA8FD0EFFA87D7D52FD09FF7DFFA8FF7D277DFF7D7D7D%FFA9A852A8FFFFA8A8FD12FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD13FFA852FD10FF%A87D597DFD08FFA8A8FFFFFFA8287DFFA87DA8A8FF7D7D52A8FFFFA8FD13%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FD12FFA87DA8FD10FFA8A87D7DFD09FF7DFFA8FF%7D277DFFA87D52A8A87D527DA8FFA8A8A8FD11FFA8A8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%FD10FFA87E7DFD12FFA8FF527DFD08FFA8A8FFFFFF7E52A8FFFFA8FFA8FF%7D277DFFFFFFA8FD13FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFF%A8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFA8FD0FFFA87DA8FD13FFA8A8%527DFFFFFF7DA8FFA87DFF7DFFA8FF52527DFFA8A87DA8FF7D527DA8FFA8%A8FD12FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FD0FFF7DA8A8FD14FFA8FF537EFFFFA87E%7DFFA87DA8A8A8FFFFA853A8FFFF7D7DA8FFA8FFA8FFA8FFA8FD13FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFAFFFA8FD0DFF7DA8FD16FF7E7D7D27FFFFFF527DA8A852A87EFF%A8FF7D527DFFA8A8A8FFA8A852A8A8FFA8A8FD12FFA8AFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8FD0CFF7DA9FD17FFA8A87D7DA8FD05FFA8FFFFA8FFFFFFA852A8FFFF52%7DA8FFA87DA8FFA8FFA8FD13FFA8FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAF%FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFFFFFA8FD0BFF7DA8FD14FF%A8FFA8FF7DA8A8A8FD09FF7DFFA8FF52527DFFA85227FFA8A87DA8A8FFA8%A8FD12FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A8FD0AFF7D7DFD10FFFD04A87DFD06A87D%A8FD08FFA8A8FFFFFF7D277DFFFF5352A8A8527D7DFFA9FFA8FD13FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FD09FF7DA8FD0EFFA8FFA8FFA8FFA8FD05FFA8A87D52FD%09FF7DFFA8FF7D7D7DFF7D7D52A8FFA8527DA8FFA8A8A8FD11FFA8A8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8FD08FF7DA8FFFFA8FFA8FD07FFFD05A8FD0AFFA8FF7D52A8%FD07FFA8A8FFFFA87D7DA8A8A87D7DA8FF7D527DFFFFFFA8FD13FFA8FFAF%FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8%FFAFFFA8FFA8FFFFFFAFFFA8FF7DA8FFFFA8FFA8FFA8FFA8FFA8FFA8FD0F%FFA8FFA8A8FD09FF7DFFA8FF7D7D7DFFA87D52A8FF7DF87DA8FFA8A8FD12%FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFFD07A8FFA8A87DA8A8FD07FFA8A87DA87EA8A8FFA8FFA8%FD0AFFA8FF527DA8FD08FFA8A8FFFF7D527EFF7D597DA8FF7D59A8FFA8FF%A8FD13FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8A8A8AFA8A8A8FD04FFA87DA8FD06FFAFFD04A8FD07FFA8%FFA8FFA8FFA8FD05FFA8A852527DFD08FF7DFFA8FFA8A8A8FFAFFFA8FFA8%FFFFFFA8FFA8A8FD12FFA8AFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFFD05A8FFA8A8A8FFA87DA8FD06FFA87DFD04%A8FD0DFFA8FFFD07A852A8FD09FFA8FFFFA9FFAFFFFFFF7D7DFFFFA8527D%FFA8FFA8FD13FFA8FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8%FFAFFFA8FFA8FFFD05A8A9A8A8A8FFA8A8A8FFA8FFFFFFA8A8A8FD19FFA8%FF7D52FD09FF7DFFA8FFA8FFA8FFA87D53FFA8A852A8A8FFA8A8FD12FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87D%A8A8FFA8FFA8FFA87E7DA8FFFFA8FFA8A87DA8FD1BFFA8FF7D7DFD08FFA8%A8FFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA9FFA8FD13FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87EFFA8FFFFFFA8FF84%7DA8FFFFFFA8A8A8FFA8FFFFFFA8FD19FFA87D7D7DFD09FF7DFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD11FFA8A8A8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A884A8A8FFA8A87D7D52FD087DFD05%A884FD04A8FD16FFA87DA87DA8FD07FFA8A8FFFFA8FFAFFFA8FFAFFFA8FF%AFFFA8FFFFFFA8FD13FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFF%A8FFAFFFA8AF7EA8A8A87D7D7DA8A8A87DA8A8A9A8FFFFFFA8A8A8A9A8FF%A8A884A87DA8A8FFA8FD11FFA8A87D7DFD09FF7DFFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8A8FD12FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8A8FD057DA87DA87DFD04A8FD11FFA8A87DA87DFD04A8FD%0CFFA8FD06FFA8A8FFFD04A8FFFFFFA87DAFA8FFA8FFFFFFA9FD05FFA8FD%13FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFA87D7D52A87D%A87DFD07A87DFFA8A8A8FD11FFFD07A8FFA8FD07FFA8FD05FFA8527DFF7D%52A87DA87D7D527D527D527D527D7D7D52FD067D7EFD097DA8FD047D597D%527EFD047D52FD047D7EFD047D527D7D7D527D7D7D527D7DA8A8FFA8FFA8%FFA8FFA8FFA8A8FD04FFFD05A8FFA8FD0BFFA8A8A8FFFFFFFD04A87DA87E%A8A884FD05FFA87D7DFF7D7DFD04A87DA8FFFFA8A9FD04A87DA8A8A87DA8%7DFD0FA87DA87DA87DA87EA87DA87DA87DA87DA8A8A87DA87DA87DA8A8A8%7EA8A8FFA8FFA8A8A8FFA8FFA8FFFFFFA8FD09FFA8A9A8FFA8FD0BFFA8FD%09FFA8FF7DFD06FF7DA9A8A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A9FFA8FD13FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8A8A8A9FD07A8FFA8A8FD0CFFA8FFA8A8A8FD09FFA8FFA8FFA8FD06%FFA8FD0BFFA8A8FFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFFFFFA8FD13FFA8%FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFFFFFA8FFFF%FFA8FFFD05A8FFA8FD0FFFA8FFA8A8A8FD09FFA8FFA8FFFFFFA8FD0CFF7D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8A87DA8A8A87DA8A8%A87DA8A8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87EA87DA8A8A87DA8A8%A87DA8A8A87DA87D7D7DA87EA87DFD05A884A87DA87DA8FD86FFA8FFFFFF%A8FD7BFF7DA8FF7D7D7EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FD06FF7DA8FFFD047DA87DA87DA87DA87DA87DA87DA87DA8%7DA87D7DFD12A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87D7DFD12A87DFD12A87DFD06FF847D%FD05A8FD12FFA8FD13FFA8FD11FFA8FD13FFA8FD25FFA8FD0CFF7DFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD12FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD%25FFA8FD0BFFA8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA9FFA8FD13FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FD25FFA8FD0CFF7DFFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8A8FD11FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD25FFA8FFA8FD09FFA8%A8FFFFA8FFAFFFA8FFFFFFA8FD07FFA8FD13FFA8FFAFFFA8FFFFFFA8FFA8%FFA8FFA8A8A8FFA8FFA8FFFFFFA87DA87DFFFFA8FFA8FFAFFFA8FFA8FD25%FFA8FF7D52A8FD08FF7DFFA8FFA8FFA8FFA8A87DFFA8A87DA8A8FFA8A8FD%12FFA8A8A8FFA8FFA8FF7D52527D537D537D2752537D527DA87EA8A8527D%52FD047DFFA8FFA8FFA8FD26FFA8A8527DA8FD08FFA8A8FFA8FFA8FFFFFF%5252A8FF7D527DFFA8FFA8FD13FFA8FFA8FFA8FFFF7D527D527D277D527D%527D527D7DA8527DA87D527D527D277DFFFFA8FFAFFFA8FD25FFA87D527D%FD09FF7DFFA8FFA8FFA8FF7D5227FFFF7DF87DA8FFA8A8FD12FFA8AFA8FF%A8FFA8FFA87D7DFD0AA8FFA8FFA8FF7EFD06A8FFA8FFA8FFA8A8FD25FFA8%A852A8FD09FFA8FFFFFFA8A8AFFFA87DA8A8FFA87D7DFFA8FFA8FD13FFA8%FFA8FFAFFFA8FFA8FD05FFAFFD07FFA8FD09FFA9FFA8FFFFFFA8FD1BFFA8%FFFFA87DFD05FFA8FF7D52FD09FF7DFFA8FF52527DFFA87D53A8FF7D277D%FFFFA8A8FD12FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD19FF7D7D7D527D7D5252A8FF%FFFFA8FF527DA8FD07FFA8A8FFFFFF7E52A8FFA9527DA8FF7D527DFFA9FF%A8FD13FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FD19FF52A8527D7DA852277DFFFFFFA87D%5227FD09FF7DFFA8FF7D7D7DFF7D5252A8A8A8527DFFFFA8A8A8FD11FFA8%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8A8FD19FFA8A8FFA8A8A8FFA8FFFFFFA87D7D527DFD08%FFA8A8FFFFFFA852A8FFFFAFFFA8FF7E7D7DA8FFFFA8FD13FFA8FFAFFFA8%FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAF%FFA8FFA8FD21FFAFFFA8FFA8FFFFA8FD09FF7DFFA8FF7D2753FFA87D52A8%FF7D7D52A8FFA8A8FD12FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD1FFFA8FFA8A8A8FFFF%A8FF527DFD08FFA8A8A8FFFFA827A8FFFF7DA8FFFF7D527DFFA8FFA8FD13%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFAFFFA8FD1DFFA8FFA8FD05FFA8A85253FFFFFF5284FF7E%52FF7DFFA8FF52527DFFA8A87DA8FF7D277DAFFFA8A8FD12FFA8AFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8FD1AFFA8A8A8FD08FFA8A8527DFFFFA8A87DFFA87DA8A8A8FF%FF8452A8FFFF7D7DA8FFA8A8A8FFA8FFA8FD13FFA8FFA8FFAFFFA8FFAFFF%A8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFFFFFA8FD%19FFA8FD0BFF7EA8A87DFFFFFF52A8A8A853A8A8FFA8FFA87D7DFFA8A87D%FFA8A87DA8A8FFA8A8FD12FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD17FFA9A8FD0CFF%A8A8527DA8FD05FFAFFFA9A8FFFFFF7D277DFFFF5252A8FFA87D7DFFAFFF%A8FD13FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FD17FFA8FD0DFFFD04A8FD09FF7DFFA8FF%52277DFFA85227A8A8FFA8FFA8FFA8A8A8FD11FFA8A8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%FD0EFFA8FD05FFA8A8A8FD0EFFA8A87D84FD08FFA8A8FFFFFFA852A8FFFF%7D52A8A8527D7DFFFFFFA8FD13FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFF%A8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFA8FD09FFA8FFA8FF%A8AFA8FFA8FFA8A8A8FFA8FD0DFFA8A87D52FD09FF7DFFA8FF7D527DFF7D%7D53AFA87D527DA8FFA8A8FD12FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFAFFFFD05%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FD06FFA8FF7D7D%AFFD08FFA8A8FFA87D527DFF847D7DA8FF7D527DFFA8FFA8FD13FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA9%FFA8FFFFFFA8FFA8FFA8FFA8FD0BFFA8FD0DFFA8FFA8FFA8FF7DA87D7DFD%09FF7DFFA8FF7D7D7DFF7D5252A8FF7D277DA8FFA8A8FD12FFA8AFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD%04A87DA8A8FD0EFFA8A8FD14FFA8FF527D7DFD08FFA8FFFFFF7D52A8FF7D%7DA8A8FF7D277DFFA8FFA8FD13FFA8FFA8FFAFFFA8FFAFFFA8FFAFFFA8FF%AFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFA8A8A8FFA8A8A8FD0FFFA8FD15FF%A8A8A87DA8FD08FF7DFFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8A8FD12FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFFD06A87DA8A8FFA8A8A8AFA8A8A8FFA8A87DFD04A8FFA8FD12FFA8A852%7DFD08FFA8A8FFFFA8FFFFFFA8FFA8A8A8FFA8A8A8FFA9FFA8FD13FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%A8AFA8A8A8FFA8FD0BFFA8FD05FFA8FFA8FFA8FD0FFFA8A87D52FD09FF7D%FFA8FFA8FFA8FFA87D52FFA8A8277DA8FFA8A8A8FD11FFA8A8A8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DA8A8FFA8FFA8%FFA8FD0BFFA8A8A8FFA8FFAFFD05FFA8FFA8A8A8FFA8FFA8FD06FFA8FF7D%7DFD08FFA8A8FFFFA8FFAFFFA8FFA8FD05FFA8FFFFFFA8FD13FFA8FFAFFF%A8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFA8A8A8FD05FFA8FF%FFFFA8FFFFFFFD06A87DFD07A87DFD04A8FFA8A9A8FFFFFFA8FD07FFA87D%7D7DFD09FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD12FFA8A8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD06A87D7EFD%047D527D7D7D537D7DA87DA8A8A8FD07FFA8A8FFFD04A87DA87EA8A8A87D%A87DA87DA87D7D7DA87DA8FD08FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FD13FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8A87DA8FD057DA8A8A87DA87DFFA8FFA8A97DA87DFD04A8FD13FFA8FF%A8FFA8FF7EA87D7DFD09FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8FD12FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%7D5259FD047DA87DA87DA87D7DA8A87DA8A8A87DA9A8A87DA87D7EFD07A8%FFA8FFA8FFAFFFA8FD08FFA8FD06FF7DA8FFA87DA8A8FFFFA8847DFD04A8%FFA8FFA8FFA9FFA8FFA8FD13FFA8FFA8FFFFFFA8FFA8FFAFFFAFFFA8FFFF%FFA8FD04FFA8537D7DFD04A8FFA8FFA8A9A8A8A8FFFD07A8FD05FFA9A87D%FD04A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FD05FFA87D7EFF7D7D%A87DA85253527D527D537D527D527D527D537D527D537D527D7D7D527D53%7D527D7D7D527D527D527D7D7D527D527D527D537D527D537D527D525952%7D527D52A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8FFFFA8FFA8FFA8FFFD05A8%FFFFFFFD09A8FD07FFA8FFA8FFA8A8FD05FFA87D7DFF7D7DFD04A87DFFFF%FFA8FFAFFD0AA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A87EFD09A8%7DFD05A884FD06A8FFA8FFFD07A8A9FD05A8FD0BFFA8FFFD05A8FFA8FFFD%04A87DA8A8AFA8FFA8FD05FFA8FD06FFA8FFA8FFA8FF7DFFAFFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8A8FD12FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFFD04A8FD12FFA8FFA8%FFA8FFFD04A87DA87DA8FD067DFD0BFFFD05A8FFA8A8A8FFA8A8A8FFA8A8%A8FFA8A87DFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA8A8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A9A8FFA8A9%A8A8A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA9FD05FFA8FFA8FFA8FF%A8A9A8AFA8A87DFD0CFFFD04A884A8A8A884A8A8A884A8A8A87EFD04A8AF%FD0FA8FFFD06A884A8A8A884A8A8A884FD0BA884A8A8A884A8A8A884A8A8%A87DFD14A8A9FD12A8FD0DFFA8FFA8FD0DFFA8FFFFA8A8A8FD0EFFA8FFA8%FFA8FD12FFAFA8FD0DFFA8FFA8FFA8FD0EFFA8FFFFA8FFA8FD1AFF52A8A8%7D527DA8FD0BFFA87D7DA8525252FD0DFF527DFF7D53537DFD0CFF7E52FF%52A852A8FD0CFF7D52A8A8527D52FD0CFFA852A8A87D527DFD19FFA8FD04%7D5252FD0DFF7D7D537D527DFD0DFF7D52FF7D7D52A8FD0CFF7D7DA87DA8%7D7DFD0CFFA852A8FD047DAFFD0BFF7D7D7DA853A852FD1AFF7DFD05A8FD%0DFFA87DA87EA87DFD0DFFA8A8A8FFA8A8A8FD0DFFA8A8A8FF7DFD0DFFA8%A8A87DA8A8A8FD0DFF7DA87DA8A8A8FDD0FF527D7DA8A8FFA8FFFD04A8FD%74FF7D7D7D52527D7D7DA97D7D7DFD74FF7DA8597D7D7D277DA87D527DA8%FD7CFFA8FFA8FDB3FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2011-06-13T09:51:33-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2011-06-13T09:51:33-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2011-06-13T09:51:33-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>180</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxbzxpl7d3GhXNlpP&#xA;6RuNOv0ujMGgR4Y1FH4tMyGrg/s+G+KpdrvlzXtU812OqLZpGkMlqkNw8y87RLO+klndAAai/tuC&#xA;EDcdGpTFVfSbvzTdabbXb6snK6ijmKfVo6L6ihuIoRsK98KEXz8zf9XVP+kZP+asVdz8zf8AV1T/&#xA;AKRk/wCasVdz8zf9XVP+kZP+asVU5p/M0UfP9KI1CNvqyDqQP5sVTr6hrP8A1dP+SEf9cCXfUNZ/&#xA;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&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:A9CEF2C17A08E0118B08C38B4E983396</stRef:instanceID>
            <stRef:documentID>uuid:71AE459020D6DF11BB3BDD0BC9FA887D</stRef:documentID>
            <stRef:originalDocumentID>uuid:71AE459020D6DF11BB3BDD0BC9FA887D</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:OriginalDocumentID>uuid:71AE459020D6DF11BB3BDD0BC9FA887D</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3AB3BB450A206811BEDCBB1BED1C4DFC</stEvt:instanceID>
                  <stEvt:when>2011-06-13T09:51:33-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DocumentID>xmp.did:3AB3BB450A206811BEDCBB1BED1C4DFC</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:3AB3BB450A206811BEDCBB1BED1C4DFC</xmpMM:InstanceID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.037;PS 2.000;hotconv 1.0.51;makeotf.lib2.0.18671</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -286.68 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 286.68 li
411.895 286.68 li
411.895 0 li
cp
clp
[1 0 0 1 0 0 ]ct
39.4434 124.176 mo
411.395 124.176 li
411.395 4.65576 li
39.4434 4.65576 li
39.4434 124.176 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
39.4395 124.204 mo
411.44 124.204 li
411.44 4.7041 li
39.4395 4.7041 li
39.4395 124.204 li
cp
clp
39.4434 124.176 mo
39.4434 4.65576 li
101.436 4.65576 li
101.436 124.176 li
39.4434 124.176 li
0 0 0 .1 cmyk
f
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
39.4434 124.176 mo
39.4434 4.65576 li
101.436 4.65576 li
101.436 124.176 li
39.4434 124.176 li
0 0 0 .6 cmyk
@
163.427 124.176 mo
163.427 4.65576 li
287.411 4.65576 li
287.411 124.176 li
163.427 124.176 li
0 0 0 .1 cmyk
f
163.427 124.176 mo
163.427 4.65576 li
287.411 4.65576 li
287.411 124.176 li
163.427 124.176 li
0 0 0 .6 cmyk
@
39.4434 113.311 mo
44.4028 113.311 li
45.6426 113.867 li
46.8823 112.898 li
48.1221 114.183 li
50.6021 114.66 li
54.3213 110.709 li
55.561 110.697 li
56.8013 111.151 li
58.041 110.712 li
60.5205 112.51 li
61.7603 113.102 li
63.0005 114.171 li
67.9595 111.853 li
74.1587 113.409 li
75.3989 112.721 li
76.6387 112.848 li
77.8784 113.532 li
79.1182 113.663 li
80.3579 112.594 li
82.8374 112.384 li
85.3174 113.801 li
86.5571 114.77 li
89.0371 113.904 li
90.2764 113.083 li
91.5161 112.694 li
92.7563 113.683 li
95.2363 112.779 li
96.4761 113.078 li
97.7153 112.67 li
100.195 114.08 li
102.675 113.227 li
103.915 113.324 li
105.155 112.55 li
106.395 112.286 li
112.594 114.499 li
113.833 113.173 li
116.313 113.72 li
117.553 113.498 li
118.793 114.201 li
120.033 113.933 li
121.272 113.013 li
122.512 112.837 li
123.752 113.134 li
124.992 113.086 li
127.472 113.885 li
128.711 114.858 li
129.951 113.926 li
134.911 112.712 li
136.151 112.471 li
138.63 113.723 li
139.87 113.973 li
141.11 114.757 li
143.59 113.059 li
144.829 113.265 li
146.069 113.872 li
147.309 113.427 li
148.549 113.643 li
149.789 113.129 li
151.029 113.151 li
152.268 114.021 li
153.508 114.335 li
155.988 113.661 li
157.229 113.935 li
158.468 113.119 li
159.708 113.195 li
160.947 113.985 li
162.188 112.739 li
163.427 113.254 li
165.907 113.29 li
167.147 114.054 li
169.626 114.253 li
172.106 112.616 li
173.346 112.565 li
174.586 113.211 li
175.825 114.581 li
178.305 113.552 li
179.545 112.357 li
180.785 111.946 li
182.025 113.305 li
184.504 114.538 li
186.984 113.903 li
188.224 112.684 li
189.464 112.95 li
190.703 113.817 li
191.943 113.493 li
193.183 113.792 li
195.663 112.472 li
196.903 114.412 li
198.143 114.786 li
199.382 114.09 li
200.622 114.226 li
201.862 113.902 li
203.103 113.222 li
204.342 113.272 li
206.821 114.183 li
208.061 113.119 li
209.301 113.255 li
210.542 112.585 li
211.782 113.06 li
213.022 114.057 li
214.26 114.238 li
215.5 114.936 li
216.741 113.923 li
217.981 114.2 li
219.221 113.976 li
220.459 112.622 li
224.18 113.422 li
225.418 114.022 li
226.659 114.004 li
230.377 112.678 li
231.618 113.61 li
234.098 114.325 li
235.338 113.502 li
237.817 113.236 li
239.057 112.637 li
242.778 114.149 li
244.018 113.574 li
247.737 115.865 li
250.215 116.023 li
251.456 115.485 li
252.696 115.399 li
256.415 116.497 li
258.895 115.172 li
260.135 116.052 li
261.374 115.897 li
262.614 116.731 li
263.854 116.28 li
265.094 117.01 li
266.334 117.32 li
267.575 117.277 li
270.053 116.263 li
271.293 116.885 li
272.534 118.335 li
273.774 118.424 li
275.014 119.998 li
277.493 119.886 li
279.973 121.603 li
282.452 120.84 li
283.692 121.365 li
286.17 119.677 li
287.411 121.876 li
288.651 122.646 li
289.891 122.634 li
292.37 121.94 li
293.61 123.603 li
296.09 123.462 li
298.571 125.021 li
301.049 123.579 li
302.29 125.043 li
303.53 124.458 li
304.77 126.799 li
306.01 125.844 li
309.729 124.961 li
310.969 127.333 li
312.208 126.645 li
314.688 127.422 li
317.167 129.238 li
318.407 129.19 li
319.647 128.356 li
323.366 130.945 li
324.606 130.549 li
325.846 131.143 li
327.086 130.164 li
328.327 131.699 li
329.567 130.776 li
330.805 132.814 li
332.045 131.975 li
333.286 133.133 li
334.526 132.448 li
335.766 133.809 li
338.245 133.121 li
340.725 135.857 li
341.963 135.411 li
343.204 133.829 li
344.444 134.185 li
345.684 135.068 li
346.922 135.458 li
348.163 134.112 li
349.403 135.714 li
351.883 135.496 li
353.124 135.39 li
354.362 136.288 li
355.602 135.093 li
358.083 137.361 li
359.323 137.027 li
361.801 136.789 li
363.042 137.913 li
364.282 137.792 li
365.522 136.916 li
366.762 138.177 li
368 138.517 li
370.481 137.763 li
371.721 138.384 li
372.959 137.56 li
374.2 138.446 li
375.44 137.845 li
376.68 138.776 li
377.918 137.886 li
379.159 138.407 li
380.399 139.316 li
381.639 138.325 li
382.879 138.81 li
384.12 138.082 li
389.079 139.174 li
390.319 137.55 li
391.559 138.248 li
394.038 137.369 li
395.278 137.413 li
396.518 137.849 li
397.756 138.728 li
398.997 137.972 li
400.237 136.766 li
401.477 136.91 li
402.717 137.953 li
405.196 137.613 li
406.436 138.434 li
407.676 138.31 li
408.915 137.759 li
410.155 137.928 li
411.395 137.15 li
411.395 137.15 li
0 0 0 .5 cmyk
@
39.4434 113.311 mo
44.4028 113.311 li
45.6426 112.74 li
46.8823 113.797 li
48.1221 113.946 li
49.3618 112.762 li
50.6021 113.591 li
51.8418 111.847 li
53.0815 110.746 li
54.3213 110.327 li
55.561 110.583 li
56.8013 110.338 li
60.5205 113.016 li
61.7603 112.25 li
64.2402 111.315 li
70.4395 112.367 li
71.6792 112.475 li
72.9189 111.987 li
74.1587 111.933 li
75.3989 113.036 li
76.6387 112.785 li
77.8784 113.114 li
80.3579 112.655 li
82.8374 111.52 li
85.3174 113.149 li
86.5571 112.308 li
87.7974 112.522 li
89.0371 113.198 li
90.2764 112.871 li
91.5161 113.551 li
93.9961 112.527 li
95.2363 112.4 li
96.4761 112.791 li
97.7153 114.39 li
98.9551 114.049 li
100.195 113.195 li
102.675 112.698 li
105.155 112.746 li
106.395 112.682 li
107.634 113.306 li
108.875 112.742 li
110.114 113.066 li
112.594 112.67 li
113.833 113.255 li
115.073 112.503 li
116.313 112.646 li
117.553 113.143 li
118.793 112.984 li
120.033 113.23 li
123.752 112.085 li
127.472 112.738 li
128.711 112.584 li
129.951 113.498 li
131.191 113.494 li
132.431 112.508 li
133.671 113.402 li
134.911 112.795 li
141.11 113.617 li
144.829 112.242 li
147.309 113.325 li
149.789 112.923 li
151.029 113.057 li
152.268 112.485 li
154.748 113.306 li
155.988 113.647 li
160.947 111.687 li
162.188 112.71 li
163.427 112.978 li
164.667 113.987 li
165.907 114.124 li
167.147 113.679 li
168.386 113.638 li
169.626 112.42 li
170.866 111.99 li
172.106 112.494 li
173.346 112.624 li
174.586 113.848 li
175.825 114.157 li
177.065 113.072 li
178.305 112.915 li
179.545 112.332 li
180.785 112.825 li
182.025 112.153 li
183.264 112.099 li
188.224 114.307 li
190.703 112.323 li
191.943 111.967 li
193.183 112.073 li
195.663 113.349 li
196.903 112.816 li
198.143 113.128 li
204.342 112.491 li
205.583 112.042 li
209.301 113.331 li
210.542 114.564 li
211.782 114.047 li
213.022 112.55 li
214.26 112.033 li
216.741 113.233 li
217.981 112.499 li
219.221 112.907 li
221.7 112.615 li
222.94 112.965 li
224.18 112.533 li
225.418 112.702 li
226.659 112.466 li
229.139 113.295 li
232.858 112.387 li
234.098 113.059 li
235.338 113.318 li
236.579 113.99 li
240.297 111.536 li
241.538 109.755 li
242.778 109.679 li
244.018 110.305 li
245.256 109.966 li
247.737 108.271 li
248.977 106.315 li
250.215 105.988 li
253.936 106.2 li
256.415 105.106 li
257.655 105.178 li
258.895 104.825 li
260.135 103.845 li
261.374 103.605 li
262.614 102.482 li
263.854 103.215 li
265.094 103.445 li
266.334 102.95 li
267.575 101.268 li
268.813 101.05 li
271.293 101.385 li
272.534 100.404 li
273.774 100.353 li
275.014 98.3569 li
276.252 99.1191 li
277.493 99.292 li
278.733 98.1528 li
279.973 98.4111 li
281.211 97.4111 li
282.452 97.021 li
283.692 95.6318 li
284.932 96.1792 li
286.17 97.1289 li
287.411 94.2358 li
288.651 92.8418 li
289.891 92.6899 li
291.131 93.0898 li
293.61 91.3579 li
294.85 91.3198 li
297.331 90.2612 li
298.571 87.918 li
299.809 86.9639 li
301.049 88.4351 li
302.29 85.748 li
303.53 86.2959 li
304.77 81.8921 li
307.249 81.5908 li
308.489 83.46 li
309.729 84.5679 li
310.969 77.7559 li
312.208 79.0498 li
313.448 79.418 li
314.688 78.2681 li
315.928 74.2979 li
317.167 73.335 li
318.407 73.6958 li
319.647 73.313 li
320.887 71.4058 li
322.127 68.8398 li
323.366 68.2168 li
324.606 69.6392 li
325.846 65.5972 li
327.086 67.1592 li
328.327 62.2358 li
329.567 64.542 li
330.805 60.5469 li
332.045 59.6729 li
333.286 57.0688 li
334.526 58.9292 li
335.766 55.1069 li
337.004 54.9907 li
338.245 56.5449 li
340.725 50.105 li
341.963 50.959 li
343.204 54.4858 li
344.444 53.3799 li
345.684 49.1929 li
346.922 48.5601 li
348.163 50.2578 li
349.403 46.8862 li
351.883 43.145 li
353.124 45.5142 li
354.362 42.1699 li
355.602 45.332 li
356.842 39.5581 li
358.083 39.126 li
360.563 40.3032 li
361.801 38.4678 li
363.042 35.9131 li
364.282 35.4678 li
365.522 36.6938 li
366.762 32.6948 li
368 30.2432 li
369.241 32.1069 li
370.481 35.0381 li
371.721 30.644 li
372.959 31.1089 li
374.2 28.8799 li
376.68 26.8491 li
377.918 27.1631 li
381.639 23.9058 li
382.879 24.0928 li
384.12 23.77 li
386.598 21.0361 li
387.838 22.0859 li
389.079 21.1489 li
390.319 25.7358 li
391.559 21.3481 li
392.797 18.4712 li
394.038 20.0522 li
395.278 23.9282 li
397.756 16.5972 li
400.237 22.188 li
402.717 15.9238 li
403.956 16.7642 li
405.196 20.085 li
407.676 14.6611 li
408.915 15.0249 li
410.155 13.7471 li
411.395 16.3569 li
411.395 16.3569 li
0 0 0 1 cmyk
@
39.4434 113.311 mo
48.1221 113.554 li
50.6021 114.021 li
53.0815 110.571 li
56.8013 109.246 li
61.7603 111.634 li
63.0005 113.02 li
64.2402 112.055 li
65.48 112.249 li
66.7197 111.714 li
67.9595 112.141 li
70.4395 111.697 li
71.6792 113.309 li
72.9189 113.241 li
75.3989 112.051 li
79.1182 114.128 li
80.3579 113.93 li
81.5977 114.258 li
82.8374 112.796 li
84.0771 112.185 li
87.7974 113.624 li
89.0371 112.902 li
90.2764 113.362 li
91.5161 113.067 li
95.2363 113.829 li
96.4761 113.426 li
98.9551 113.633 li
100.195 112.98 li
101.436 112.978 li
102.675 113.315 li
105.155 113.3 li
106.395 113.541 li
111.354 112.558 li
112.594 112.826 li
113.833 113.589 li
116.313 113.818 li
120.033 113.67 li
121.272 113.414 li
122.512 113.844 li
123.752 112.886 li
124.992 113.218 li
127.472 112.959 li
129.951 113.466 li
131.191 114.12 li
134.911 113.662 li
136.151 113.9 li
137.39 113.363 li
139.87 113.113 li
141.11 114.297 li
142.35 114.511 li
143.59 113.393 li
147.309 112.037 li
149.789 114.306 li
151.029 114.851 li
153.508 114.292 li
155.988 112.745 li
157.229 112.793 li
158.468 113.778 li
160.947 113.794 li
163.427 113.67 li
164.667 113.538 li
165.907 112.767 li
172.106 114.329 li
173.346 113.447 li
174.586 113.288 li
175.825 113.668 li
177.065 113.109 li
179.545 114.274 li
182.025 112.759 li
183.264 113.537 li
185.744 112.41 li
186.984 113.235 li
188.224 113.367 li
189.464 114.399 li
190.703 114.528 li
191.943 113.125 li
193.183 112.337 li
194.423 112.837 li
195.663 114.139 li
196.903 114.355 li
198.143 115.217 li
200.622 112.863 li
206.821 113.393 li
208.061 112.693 li
209.301 113.034 li
210.542 112.657 li
211.782 113.058 li
213.022 114.456 li
214.26 114.357 li
215.5 113.738 li
216.741 113.618 li
217.981 112.993 li
220.459 112.364 li
221.7 112.964 li
222.94 114.609 li
224.18 114.973 li
225.418 114.881 li
226.659 114.171 li
227.899 112.765 li
229.139 112.902 li
230.377 112.337 li
232.858 113.952 li
234.098 113.89 li
235.338 112.939 li
236.579 112.874 li
237.817 113.729 li
239.057 113.491 li
240.297 112.654 li
241.538 111.143 li
242.778 110.838 li
244.018 111.254 li
245.256 111.066 li
246.497 110.486 li
247.737 110.35 li
248.977 109.408 li
250.215 109.398 li
251.456 110.516 li
252.696 110.752 li
253.936 109.911 li
255.176 108.351 li
256.415 107.632 li
258.895 107.962 li
261.374 109.314 li
262.614 108.036 li
263.854 107.506 li
265.094 108.367 li
266.334 107.71 li
268.813 107.271 li
270.053 106.023 li
271.293 106.324 li
272.534 108.039 li
273.774 108.707 li
276.252 108.299 li
277.493 108.821 li
278.733 108.604 li
279.973 107.619 li
283.692 107.502 li
287.411 109.592 li
288.651 108.12 li
289.891 108.591 li
291.131 108.656 li
292.37 109.399 li
293.61 109.066 li
294.85 109.768 li
296.09 109.693 li
297.331 108.554 li
298.571 109.239 li
299.809 109.065 li
301.049 109.602 li
302.29 111.049 li
303.53 111.286 li
304.77 110.898 li
306.01 111.666 li
307.249 110.953 li
308.489 110.784 li
309.729 111.003 li
310.969 112.711 li
312.208 112.685 li
315.928 111.45 li
317.167 113.499 li
318.407 114.111 li
319.647 113.433 li
320.887 113.631 li
322.127 114.438 li
323.366 114.552 li
324.606 114.165 li
325.846 115.299 li
327.086 115.252 li
328.327 116.308 li
329.567 115.43 li
332.045 115.534 li
333.286 116.6 li
334.526 116.805 li
335.766 117.55 li
339.485 118.162 li
344.444 118.979 li
346.922 120.9 li
348.163 120.508 li
349.403 121.57 li
350.643 121.449 li
351.883 121.836 li
353.124 121.231 li
354.362 122.378 li
355.602 121.696 li
356.842 121.917 li
358.083 122.758 li
359.323 123.065 li
360.563 122.806 li
364.282 124.624 li
365.522 124.279 li
366.762 124.396 li
368 125.044 li
369.241 124.793 li
370.481 124.898 li
371.721 126.072 li
372.959 125.1 li
374.2 125.565 li
375.44 125.661 li
379.159 127.195 li
380.399 126.791 li
381.639 127.45 li
384.12 126.31 li
385.358 126.76 li
386.598 127.595 li
387.838 127.409 li
389.079 127.601 li
390.319 126.492 li
391.559 126.977 li
392.797 128.09 li
394.038 127.674 li
395.278 126.812 li
396.518 127.959 li
397.756 128.099 li
401.477 126.94 li
402.717 128.217 li
403.956 128.223 li
405.196 127.629 li
406.436 127.806 li
407.676 129.019 li
410.155 128.259 li
411.395 128.293 li
411.395 128.293 li
0 0 0 .7 cmyk
@
39.4434 113.311 mo
44.4028 113.311 li
45.6426 113.676 li
46.8823 113.003 li
50.6021 112.327 li
51.8418 111.82 li
53.0815 110.458 li
55.561 109.358 li
56.8013 110.15 li
58.041 109.905 li
60.5205 111.763 li
63.0005 111.43 li
64.2402 111.447 li
65.48 110.966 li
66.7197 111.715 li
69.1997 112.247 li
71.6792 113.035 li
72.9189 113.21 li
74.1587 112.452 li
76.6387 111.634 li
81.5977 114.125 li
85.3174 111.761 li
86.5571 111.88 li
87.7974 111.381 li
90.2764 112.611 li
93.9961 114.199 li
95.2363 113.869 li
97.7153 111.937 li
98.9551 112.538 li
100.195 111.543 li
101.436 111.918 li
102.675 113.684 li
103.915 113.321 li
105.155 114.001 li
106.395 113.853 li
107.634 113.232 li
108.875 113.211 li
110.114 112.099 li
112.594 111.358 li
115.073 112.194 li
116.313 114.045 li
117.553 113.802 li
118.793 114.273 li
121.272 113.113 li
122.512 112.812 li
123.752 113.099 li
126.232 111.969 li
129.951 112.707 li
131.191 113.563 li
132.431 113.834 li
133.671 113.061 li
137.39 112.61 li
138.63 112.775 li
139.87 113.471 li
141.11 113.686 li
142.35 112.989 li
143.59 111.724 li
144.829 112.187 li
146.069 111.714 li
147.309 113.185 li
148.549 112.92 li
149.789 113.83 li
151.029 112.192 li
152.268 112.599 li
153.508 113.495 li
155.988 112.274 li
158.468 113.616 li
160.947 113.85 li
162.188 112.165 li
163.427 112.226 li
164.667 111.899 li
165.907 112.278 li
168.386 113.767 li
169.626 114.101 li
172.106 113.069 li
173.346 112.8 li
174.586 112.009 li
175.825 111.718 li
177.065 112.718 li
179.545 113.61 li
180.785 113.264 li
182.025 113.568 li
183.264 112.942 li
184.504 113.241 li
189.464 112.068 li
191.943 113.612 li
193.183 113.994 li
194.423 113.882 li
195.663 112.749 li
196.903 112.755 li
198.143 112.308 li
199.382 112.868 li
205.583 113.477 li
206.821 113.142 li
208.061 113.582 li
210.542 112.114 li
213.022 112.258 li
214.26 112.842 li
217.981 113.215 li
220.459 112.007 li
221.7 113.175 li
222.94 112.877 li
224.18 113.964 li
226.659 114.245 li
227.899 113.534 li
229.139 111.76 li
230.377 111.615 li
232.858 113.542 li
234.098 112.952 li
235.338 114.316 li
236.579 112.47 li
237.817 112.685 li
239.057 112.44 li
240.297 110.826 li
241.538 106.816 li
242.778 105.13 li
244.018 104.956 li
245.256 105.603 li
246.497 104.445 li
247.737 105.126 li
248.977 99.522 li
250.215 100.311 li
251.456 99.8618 li
252.696 100.747 li
253.936 99.519 li
255.176 96.6182 li
257.655 93.9189 li
260.135 95.5972 li
261.374 92.2681 li
266.334 91.6362 li
267.575 91.2109 li
268.813 90.0791 li
270.053 90.0688 li
271.293 91.002 li
272.534 89.1079 li
273.774 89.6968 li
275.014 89.2891 li
276.252 90.4282 li
277.493 90.8491 li
278.733 88.46 li
281.211 89.0098 li
282.452 88.7441 li
283.692 87.9331 li
286.17 89.2622 li
287.411 88.0391 li
288.651 89.4712 li
289.891 89.1372 li
291.131 89.3521 li
292.37 87.6382 li
293.61 87.6392 li
294.85 86.8599 li
296.09 88.7769 li
297.331 89.1138 li
298.571 88.4561 li
299.809 88.7529 li
301.049 89.6768 li
302.29 89.3408 li
304.77 90.7881 li
306.01 91.2061 li
307.249 90.54 li
309.729 91.9609 li
310.969 90.625 li
312.208 91.4419 li
314.688 93.9819 li
317.167 93.75 li
320.887 95.0269 li
322.127 95.604 li
323.366 95.6021 li
324.606 97.2881 li
325.846 97.063 li
327.086 97.9639 li
328.327 96.897 li
329.567 98.1592 li
330.805 97.6558 li
332.045 99.5552 li
337.004 100.743 li
338.245 101.361 li
339.485 100.7 li
340.725 101.228 li
341.963 102.808 li
343.204 102.925 li
344.444 104.238 li
346.922 105.036 li
348.163 104.391 li
349.403 105.62 li
350.643 106.168 li
353.124 106.309 li
354.362 107.246 li
355.602 106.99 li
358.083 108.46 li
359.323 109.677 li
360.563 109.429 li
361.801 111.122 li
363.042 109.687 li
364.282 111.761 li
365.522 111.702 li
366.762 112.547 li
368 112.729 li
369.241 114.207 li
370.481 114.284 li
371.721 113.577 li
375.44 116.225 li
377.918 116.392 li
379.159 117.296 li
382.879 117.726 li
385.358 118.986 li
386.598 119.562 li
387.838 119.412 li
389.079 120.23 li
390.319 119.926 li
391.559 120.31 li
392.797 121.468 li
395.278 121.289 li
397.756 122.963 li
398.997 122.745 li
401.477 123.338 li
402.717 124.014 li
403.956 123.082 li
407.676 124.345 li
408.915 124.556 li
410.155 125.542 li
411.395 125.977 li
411.395 125.977 li
0 0 0 .5 cmyk
@
39.4434 113.311 mo
44.4028 113.311 li
45.6426 113.931 li
46.8823 113.666 li
49.3618 114.589 li
50.6021 114.568 li
53.0815 112.42 li
56.8013 111.957 li
58.041 111.465 li
59.2808 111.761 li
60.5205 112.796 li
61.7603 112.618 li
64.2402 112.881 li
65.48 112.523 li
66.7197 111.252 li
67.9595 112.078 li
69.1997 111.983 li
70.4395 113.195 li
71.6792 112.863 li
72.9189 113.395 li
75.3989 112.429 li
76.6387 111.891 li
77.8784 112.205 li
79.1182 113.058 li
80.3579 112.581 li
82.8374 114.199 li
85.3174 112.033 li
87.7974 112.239 li
90.2764 113.671 li
91.5161 112.739 li
92.7563 112.795 li
93.9961 112.256 li
95.2363 112.871 li
96.4761 113.108 li
98.9551 112.759 li
100.195 113.018 li
101.436 112.2 li
102.675 112.109 li
105.155 113.385 li
108.875 113.574 li
110.114 113.386 li
111.354 112.274 li
112.594 112.889 li
116.313 112.644 li
117.553 113.098 li
118.793 112.724 li
121.272 112.962 li
122.512 112.446 li
123.752 112.54 li
124.992 113.474 li
126.232 113.246 li
127.472 113.724 li
129.951 112.646 li
132.431 112.07 li
134.911 113.586 li
136.151 113.735 li
138.63 112.566 li
139.87 112.301 li
141.11 113.344 li
142.35 113.51 li
143.59 114.133 li
144.829 113.173 li
147.309 112.237 li
149.789 113.375 li
151.029 113.566 li
152.268 112.761 li
153.508 113.541 li
155.988 111.713 li
157.229 111.85 li
159.708 113.333 li
160.947 112.713 li
163.427 113.486 li
164.667 113.116 li
168.386 113.752 li
170.866 112.41 li
172.106 112.581 li
173.346 111.739 li
174.586 112.423 li
175.825 112.699 li
177.065 113.675 li
178.305 113.654 li
179.545 114.491 li
182.025 112.985 li
183.264 111.705 li
184.504 112.743 li
185.744 112.744 li
186.984 113.24 li
188.224 113.096 li
189.464 113.486 li
190.703 112.037 li
191.943 112.772 li
198.143 113.255 li
199.382 113.912 li
200.622 112.569 li
201.862 113.114 li
204.342 112.394 li
208.061 113.85 li
209.301 113.796 li
211.782 112.206 li
215.5 112.826 li
216.741 113.646 li
217.981 114.041 li
219.221 113.484 li
220.459 113.358 li
222.94 111.913 li
224.18 112.072 li
225.418 113.002 li
226.659 111.852 li
229.139 113.275 li
230.377 113.903 li
231.618 113.42 li
232.858 111.813 li
234.098 112.778 li
236.579 113.364 li
237.817 112.457 li
239.057 112.772 li
240.297 112.49 li
241.538 108.893 li
242.778 108.081 li
244.018 108.716 li
247.737 107.684 li
248.977 104.01 li
250.215 104.335 li
251.456 104.08 li
252.696 104.635 li
253.936 103.359 li
257.655 102.937 li
258.895 103.809 li
260.135 103.117 li
261.374 102.809 li
262.614 101.635 li
265.094 100.728 li
266.334 101.893 li
268.813 101.026 li
270.053 100.367 li
271.293 100.838 li
272.534 100.022 li
273.774 99.9199 li
275.014 99.1558 li
276.252 99.4819 li
277.493 100.431 li
278.733 100.092 li
279.973 100.916 li
282.452 99.5591 li
283.692 99.8408 li
284.932 99.083 li
286.17 99.1431 li
288.651 99.7329 li
289.891 99.54 li
291.131 100.18 li
292.37 99.7529 li
293.61 99.6851 li
294.85 98.3682 li
296.09 99.418 li
298.571 98.354 li
299.809 98.8999 li
301.049 100.319 li
302.29 99.6548 li
303.53 99.3862 li
304.77 97.9639 li
307.249 100.016 li
308.489 100.553 li
309.729 102.043 li
310.969 100.186 li
313.448 100.626 li
314.688 100.747 li
315.928 100.268 li
317.167 100.165 li
318.407 101.245 li
319.647 100.312 li
320.887 100.575 li
323.366 100.512 li
324.606 101.241 li
325.846 100.844 li
327.086 101.749 li
328.327 100.785 li
329.567 102.598 li
330.805 102.145 li
332.045 101.269 li
333.286 101.975 li
335.766 101.778 li
338.245 103.28 li
340.725 102.255 li
344.444 103.861 li
345.684 103.351 li
346.922 103.526 li
349.403 104.906 li
350.643 103.706 li
351.883 103.84 li
353.124 103.609 li
354.362 104.043 li
355.602 105.341 li
356.842 105.682 li
359.323 105.817 li
360.563 106.171 li
361.801 107.396 li
366.762 106.348 li
368 106.683 li
369.241 108.127 li
370.481 108.505 li
371.721 108.188 li
374.2 108.962 li
375.44 109.229 li
376.68 108.874 li
381.639 109.797 li
382.879 109.771 li
384.12 110.494 li
389.079 111.049 li
390.319 111.695 li
391.559 111.541 li
394.038 112.107 li
396.518 112.149 li
397.756 112.137 li
398.997 113.068 li
401.477 112.201 li
402.717 113.105 li
407.676 112.878 li
408.915 114.018 li
410.155 114.098 li
411.395 113.79 li
411.395 113.79 li
0 0 0 1 cmyk
@
39.4434 113.311 mo
44.4028 113.311 li
48.1221 112.539 li
50.6021 112.517 li
51.8418 110.687 li
53.0815 110.455 li
54.3213 110.764 li
55.561 110.549 li
56.8013 111.638 li
60.5205 111.343 li
61.7603 111.289 li
63.0005 112.35 li
66.7197 112.661 li
67.9595 112.863 li
69.1997 111.996 li
70.4395 112.673 li
71.6792 112.628 li
72.9189 111.857 li
74.1587 111.999 li
76.6387 114.089 li
79.1182 112.2 li
81.5977 113.364 li
82.8374 112.769 li
84.0771 113.498 li
85.3174 112.588 li
86.5571 112.694 li
87.7974 112.324 li
89.0371 112.798 li
90.2764 113.774 li
91.5161 113.969 li
92.7563 113.492 li
95.2363 114.114 li
97.7153 112.274 li
98.9551 112.572 li
101.436 114.165 li
102.675 113.624 li
103.915 113.813 li
108.875 112.758 li
110.114 112.497 li
111.354 113.657 li
112.594 114.045 li
115.073 113.809 li
116.313 112.795 li
117.553 112.897 li
118.793 112.411 li
120.033 113.174 li
121.272 112.612 li
122.512 114.284 li
124.992 113.231 li
126.232 113.253 li
127.472 112.288 li
128.711 112.726 li
129.951 113.687 li
132.431 113.75 li
136.151 112.52 li
137.39 113.455 li
139.87 113.843 li
141.11 112.668 li
142.35 113.143 li
143.59 112.85 li
144.829 113.081 li
146.069 112.773 li
148.549 113.887 li
149.789 114.633 li
152.268 113.247 li
153.508 111.724 li
159.708 114.827 li
160.947 114.272 li
162.188 112.546 li
163.427 112.939 li
165.907 112.667 li
167.147 113.471 li
168.386 112.524 li
169.626 112.615 li
170.866 113.494 li
172.106 113.232 li
174.586 113.79 li
175.825 113.521 li
177.065 114.592 li
179.545 112.322 li
180.785 112.146 li
183.264 113.265 li
184.504 113.614 li
185.744 114.564 li
186.984 114.588 li
189.464 112.605 li
190.703 113.963 li
191.943 113.255 li
193.183 113.831 li
194.423 113.106 li
196.903 112.509 li
198.143 113.066 li
199.382 113.167 li
200.622 114.404 li
205.583 112.417 li
206.821 112.578 li
208.061 113.234 li
209.301 113.439 li
210.542 112.199 li
211.782 114.18 li
213.022 113.101 li
214.26 113.561 li
215.5 113.344 li
216.741 112.765 li
217.981 111.749 li
222.94 114.434 li
225.418 113.672 li
226.659 113.986 li
227.899 112.817 li
229.139 112.725 li
232.858 113.764 li
234.098 112.335 li
240.297 113.258 li
241.538 110.439 li
242.778 110.5 li
244.018 111.25 li
245.256 111.321 li
246.497 110.568 li
247.737 110.973 li
248.977 108.262 li
250.215 107.931 li
252.696 108.52 li
253.936 108.953 li
256.415 108.186 li
257.655 108.092 li
258.895 108.601 li
260.135 108.515 li
261.374 106.601 li
262.614 106.168 li
263.854 106.349 li
267.575 105.014 li
268.813 105.479 li
271.293 105.757 li
272.534 104.813 li
273.774 105.425 li
275.014 103.182 li
277.493 103.512 li
278.733 101.86 li
279.973 102.908 li
282.452 102.006 li
283.692 101.387 li
284.932 101.271 li
286.17 103.3 li
287.411 101.157 li
288.651 100.93 li
291.131 101.793 li
292.37 100.996 li
293.61 101.034 li
296.09 99.7451 li
298.571 97.4478 li
301.049 97.4258 li
302.29 95.8657 li
303.53 97.2539 li
304.77 95.7632 li
306.01 95.0259 li
307.249 95.3149 li
309.729 96.71 li
310.969 93.7329 li
312.208 93.1489 li
313.448 94.9839 li
314.688 95.188 li
318.407 92.7178 li
319.647 92.8809 li
320.887 90.7319 li
323.366 89.1729 li
324.606 89.3418 li
325.846 88.208 li
327.086 88.8711 li
328.327 87.748 li
329.567 88.3188 li
330.805 86.272 li
332.045 86.541 li
333.286 85.2021 li
334.526 86.5562 li
335.766 84.396 li
337.004 84.0659 li
338.245 86.6519 li
339.485 83.4189 li
340.725 82.936 li
341.963 83.3711 li
343.204 85.0161 li
345.684 81.7969 li
346.922 81.4819 li
348.163 81.8511 li
349.403 79.5381 li
350.643 79.7422 li
351.883 79.0728 li
353.124 80.5508 li
354.362 79.2671 li
355.602 79.939 li
356.842 77.8638 li
359.323 77.0039 li
360.563 78.1318 li
361.801 77.481 li
363.042 74.8091 li
365.522 75.2168 li
366.762 74.7549 li
368 73.1421 li
370.481 74.3452 li
371.721 72.7471 li
372.959 73.0981 li
374.2 71.9868 li
377.918 70.7598 li
379.159 69.2339 li
380.399 69.8062 li
381.639 69.1182 li
382.879 69.3872 li
385.358 68.9619 li
386.598 67.1968 li
387.838 68.1841 li
389.079 67.5908 li
390.319 70.3032 li
392.797 66.1909 li
394.038 67.7109 li
395.278 68.644 li
397.756 64.8281 li
398.997 67.2388 li
400.237 68.0098 li
401.477 67.377 li
402.717 65.0439 li
405.196 66.856 li
406.436 66.5918 li
407.676 63.9438 li
408.915 64.5542 li
410.155 63.7891 li
411.395 64.7168 li
411.395 64.7168 li
0 0 0 .7 cmyk
@
39.4434 113.311 mo
45.6426 113.34 li
46.8823 111.962 li
48.1221 112.467 li
50.6021 111.393 li
51.8418 109.753 li
53.0815 108.983 li
54.3213 109.473 li
55.561 109.092 li
56.8013 109.135 li
58.041 109.932 li
63.0005 110.836 li
65.48 110.711 li
66.7197 109.963 li
69.1997 112.341 li
71.6792 112.198 li
74.1587 111.267 li
75.3989 111.077 li
76.6387 112.499 li
77.8784 113.242 li
81.5977 113.265 li
82.8374 112.466 li
85.3174 112.533 li
89.0371 112.942 li
91.5161 111.822 li
100.195 113.529 li
102.675 112.332 li
103.915 112.265 li
105.155 113.276 li
107.634 113.035 li
108.875 112.469 li
110.114 112.657 li
111.354 111.726 li
112.594 112.756 li
115.073 113.2 li
116.313 113.529 li
117.553 113.258 li
118.793 112.471 li
120.033 112.086 li
121.272 112.656 li
124.992 113.017 li
127.472 113.831 li
128.711 113.265 li
129.951 113.212 li
131.191 112.645 li
134.911 112.644 li
136.151 111.841 li
137.39 111.711 li
139.87 112.794 li
141.11 112.764 li
142.35 113.425 li
143.59 113.155 li
144.829 113.823 li
146.069 113.075 li
147.309 113.055 li
148.549 113.483 li
149.789 112.88 li
151.029 112.724 li
152.268 112.978 li
153.508 112.684 li
154.748 113.594 li
157.229 113.816 li
158.468 113.036 li
159.708 112.859 li
160.947 111.599 li
162.188 111.641 li
165.907 113.539 li
167.147 113.062 li
168.386 112.991 li
169.626 113.635 li
170.866 112.525 li
172.106 113.292 li
173.346 112.541 li
174.586 113.481 li
175.825 113.105 li
179.545 113.893 li
180.785 112.763 li
183.264 112.619 li
185.744 114.102 li
186.984 113.714 li
189.464 111.341 li
190.703 112.242 li
191.943 111.489 li
193.183 111.809 li
195.663 113.779 li
196.903 113.079 li
200.622 112.617 li
201.862 113.094 li
203.103 112.574 li
204.342 112.771 li
206.821 114.211 li
208.061 112.803 li
209.301 112.351 li
211.782 113.319 li
213.022 113.609 li
214.26 112.32 li
216.741 112.46 li
217.981 112.256 li
220.459 113.029 li
221.7 113.88 li
224.18 113.02 li
225.418 113.826 li
226.659 113.758 li
227.899 112.973 li
230.377 112.867 li
231.618 112.005 li
232.858 112.18 li
234.098 112.893 li
235.338 112.91 li
236.579 114.316 li
237.817 113.335 li
239.057 112.971 li
240.297 109.416 li
241.538 104.428 li
242.778 104.138 li
245.256 104.758 li
246.497 103.55 li
247.737 103.442 li
248.977 97.9868 li
250.215 97.4321 li
252.696 98.0112 li
253.936 96.6729 li
255.176 93.2349 li
256.415 91.5762 li
257.655 91.668 li
258.895 92.8301 li
260.135 92.8398 li
261.374 90.6001 li
262.614 89.5791 li
266.334 89.3892 li
268.813 84.3521 li
270.053 84.0972 li
271.293 86.0229 li
272.534 85.2681 li
273.774 85.709 li
275.014 83.519 li
277.493 84.7002 li
278.733 83.272 li
281.211 83.3711 li
282.452 83.0088 li
283.692 81.0449 li
286.17 83.1768 li
287.411 81.228 li
288.651 81.812 li
289.891 80.9487 li
291.131 81.438 li
293.61 79.1499 li
294.85 79.2339 li
296.09 80.3711 li
299.809 78.875 li
301.049 79.4888 li
302.29 77.958 li
303.53 80.1221 li
304.77 77.959 li
306.01 76.9521 li
307.249 78.0039 li
309.729 81.6592 li
310.969 77.3657 li
314.688 79.374 li
317.167 77.356 li
318.407 78.5801 li
319.647 78.0308 li
320.887 77.0068 li
322.127 76.896 li
323.366 76.2632 li
324.606 78.415 li
325.846 76.4961 li
327.086 78.4731 li
328.327 75.9058 li
329.567 77.1089 li
330.805 76.3589 li
332.045 77.0718 li
333.286 76.645 li
334.526 77.8672 li
335.766 75.687 li
338.245 78.6338 li
340.725 76.1201 li
341.963 77.3091 li
343.204 79.1362 li
344.444 78.584 li
345.684 77.3647 li
346.922 77.9551 li
348.163 79.376 li
349.403 79.2148 li
350.643 78.4082 li
351.883 78.4922 li
353.124 80.0688 li
354.362 79.3408 li
355.602 80.8032 li
356.842 78.9141 li
360.563 81.4082 li
363.042 80.2319 li
364.282 81.377 li
365.522 81.5308 li
366.762 79.7969 li
368 79.9341 li
369.241 80.7451 li
370.481 82.8218 li
371.721 82.123 li
372.959 82.6758 li
374.2 82.416 li
375.44 82.834 li
376.68 82.0972 li
377.918 83.0908 li
379.159 82.7842 li
380.399 83.5542 li
381.639 82.4209 li
382.879 83.3188 li
384.12 83.7559 li
385.358 83.6567 li
387.838 84.5981 li
389.079 84.6328 li
390.319 85.4219 li
392.797 84.7432 li
395.278 87.4341 li
396.518 86.0171 li
397.756 86.3999 li
400.237 88.0889 li
402.717 86.5342 li
403.956 87.9189 li
405.196 88.2202 li
407.676 87.6699 li
408.915 88.5737 li
410.155 88.3647 li
411.395 89.5269 li
411.395 89.5269 li
0 0 0 .5 cmyk
@
grestore
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
411.395 113.311 mo
407.395 113.311 li
39.4434 113.311 mo
43.4434 113.311 li
0 0 0 1 cmyk
@
21.8154 108.72 mo
22.7871 108.72 23.5313 109.116 24.0591 109.884 cv
24.5752 110.664 24.8394 111.792 24.8394 113.256 cv
24.8394 114.732 24.5752 115.86 24.0591 116.628 cv
23.5313 117.396 22.7871 117.78 21.8154 117.78 cv
20.8311 117.78 20.0752 117.396 19.5591 116.628 cv
19.0435 115.86 18.7915 114.732 18.7915 113.256 cv
18.7915 111.792 19.0435 110.664 19.5591 109.884 cv
20.0752 109.116 20.8311 108.72 21.8154 108.72 cv
21.8154 108.72 li
cp
21.8154 109.656 mo
21.2031 109.656 20.7471 109.956 20.4355 110.556 cv
20.123 111.156 19.9795 112.056 19.9795 113.256 cv
19.9795 114.456 20.123 115.356 20.4355 115.956 cv
20.7471 116.556 21.2031 116.856 21.8154 116.856 cv
22.4272 116.856 22.8833 116.556 23.1953 115.956 cv
23.4951 115.356 23.6514 114.456 23.6514 113.256 cv
23.6514 112.056 23.4951 111.156 23.1953 110.556 cv
22.8833 109.956 22.4272 109.656 21.8154 109.656 cv
ef
26.9634 116.136 mo
28.1992 116.136 li
28.1992 117.624 li
26.9634 117.624 li
26.9634 116.136 li
26.9634 116.136 li
cp
ef
33.0952 108.72 mo
34.0674 108.72 34.8115 109.116 35.3394 109.884 cv
35.8555 110.664 36.1191 111.792 36.1191 113.256 cv
36.1191 114.732 35.8555 115.86 35.3394 116.628 cv
34.8115 117.396 34.0674 117.78 33.0952 117.78 cv
32.1113 117.78 31.3555 117.396 30.8394 116.628 cv
30.3232 115.86 30.0713 114.732 30.0713 113.256 cv
30.0713 111.792 30.3232 110.664 30.8394 109.884 cv
31.3555 109.116 32.1113 108.72 33.0952 108.72 cv
33.0952 108.72 li
cp
33.0952 109.656 mo
32.4834 109.656 32.0273 109.956 31.7153 110.556 cv
31.4033 111.156 31.2593 112.056 31.2593 113.256 cv
31.2593 114.456 31.4033 115.356 31.7153 115.956 cv
32.0273 116.556 32.4834 116.856 33.0952 116.856 cv
33.7075 116.856 34.1631 116.556 34.4751 115.956 cv
34.7754 115.356 34.9312 114.456 34.9312 113.256 cv
34.9312 112.056 34.7754 111.156 34.4751 110.556 cv
34.1631 109.956 33.7075 109.656 33.0952 109.656 cv
ef
411.395 58.9829 mo
407.395 58.9829 li
39.4434 58.9829 mo
43.4434 58.9829 li
@
22.0552 54.48 mo
23.0273 54.48 23.7715 54.876 24.2993 55.644 cv
24.8154 56.4238 25.0791 57.5518 25.0791 59.0161 cv
25.0791 60.4922 24.8154 61.6201 24.2993 62.3882 cv
23.7715 63.1558 23.0273 63.54 22.0552 63.54 cv
21.0713 63.54 20.3154 63.1558 19.7993 62.3882 cv
19.2832 61.6201 19.0313 60.4922 19.0313 59.0161 cv
19.0313 57.5518 19.2832 56.4238 19.7993 55.644 cv
20.3154 54.876 21.0713 54.48 22.0552 54.48 cv
22.0552 54.48 li
cp
22.0552 55.416 mo
21.4434 55.416 20.9873 55.7158 20.6753 56.3159 cv
20.3633 56.916 20.2192 57.8159 20.2192 59.0161 cv
20.2192 60.2158 20.3633 61.1157 20.6753 61.7158 cv
20.9873 62.3159 21.4434 62.6157 22.0552 62.6157 cv
22.6675 62.6157 23.123 62.3159 23.4355 61.7158 cv
23.7354 61.1157 23.8911 60.2158 23.8911 59.0161 cv
23.8911 57.8159 23.7354 56.916 23.4355 56.3159 cv
23.123 55.7158 22.6675 55.416 22.0552 55.416 cv
ef
27.2031 61.896 mo
28.4395 61.896 li
28.4395 63.3838 li
27.2031 63.3838 li
27.2031 61.896 li
27.2031 61.896 li
cp
ef
31.0552 54.6357 mo
35.6992 54.6357 li
35.6992 55.6318 li
32.1353 55.6318 li
32.1353 57.7798 li
32.3032 57.7202 32.4834 57.6719 32.6514 57.6479 cv
32.8193 57.624 32.9995 57.6001 33.1675 57.6001 cv
34.1392 57.6001 34.9072 57.876 35.4834 58.4038 cv
36.0591 58.9438 36.3472 59.6641 36.3472 60.5762 cv
36.3472 61.5239 36.0474 62.2559 35.4595 62.772 cv
34.8711 63.2881 34.0435 63.54 32.9873 63.54 cv
32.6152 63.54 32.2432 63.5039 31.8594 63.4561 cv
31.4751 63.396 31.0913 63.312 30.6831 63.1802 cv
30.6831 61.9922 li
31.0313 62.1841 31.3911 62.3281 31.7754 62.4238 cv
32.1475 62.52 32.5435 62.5562 32.9634 62.5562 cv
33.6353 62.5562 34.1753 62.3882 34.5713 62.0278 cv
34.9551 61.668 35.1592 61.188 35.1592 60.5762 cv
35.1592 59.9761 34.9551 59.4961 34.5713 59.1357 cv
34.1753 58.7759 33.6353 58.5962 32.9634 58.5962 cv
32.6514 58.5962 32.3271 58.6318 32.0151 58.7041 cv
31.7031 58.7759 31.3794 58.8838 31.0552 59.0278 cv
31.0552 54.6357 li
31.0552 54.6357 li
cp
ef
411.395 4.65576 mo
407.395 4.65576 li
39.4434 4.65576 mo
43.4434 4.65576 li
@
19.9673 7.90771 mo
21.8994 7.90771 li
21.8994 1.23584 li
19.7993 1.65576 li
19.7993 .575684 li
21.8872 .155762 li
23.0752 .155762 li
23.0752 7.90771 li
25.0073 7.90771 li
25.0073 8.90381 li
19.9673 8.90381 li
19.9673 7.90771 li
19.9673 7.90771 li
cp
ef
27.4434 7.41602 mo
28.6792 7.41602 li
28.6792 8.90381 li
27.4434 8.90381 li
27.4434 7.41602 li
27.4434 7.41602 li
cp
ef
33.8154 0 mo
34.7871 0 35.5313 .395996 36.0591 1.16406 cv
36.5752 1.94385 36.8394 3.07178 36.8394 4.53613 cv
36.8394 6.01221 36.5752 7.14014 36.0591 7.90771 cv
35.5313 8.67578 34.7871 9.06006 33.8154 9.06006 cv
32.8311 9.06006 32.0752 8.67578 31.5591 7.90771 cv
31.0435 7.14014 30.7915 6.01221 30.7915 4.53613 cv
30.7915 3.07178 31.0435 1.94385 31.5591 1.16406 cv
32.0752 .395996 32.8311 0 33.8154 0 cv
33.8154 0 li
cp
33.8154 .936035 mo
33.2031 .936035 32.7471 1.23584 32.4355 1.83594 cv
32.123 2.43604 31.9795 3.33594 31.9795 4.53613 cv
31.9795 5.73584 32.123 6.63623 32.4355 7.23584 cv
32.7471 7.83594 33.2031 8.13623 33.8154 8.13623 cv
34.4272 8.13623 34.8833 7.83594 35.1953 7.23584 cv
35.4951 6.63623 35.6514 5.73584 35.6514 4.53613 cv
35.6514 3.33594 35.4951 2.43604 35.1953 1.83594 cv
34.8833 1.23584 34.4272 .936035 33.8154 .936035 cv
ef
1 lw
2 lc
39.4434 124.176 mo
39.4434 4.65576 li
39.4434 124.176 mo
411.395 124.176 li
411.395 124.176 mo
411.395 4.65576 li
39.4434 4.65576 mo
411.395 4.65576 li
@
gsave
39.4395 255.644 mo
411.44 255.644 li
411.44 136.144 li
39.4395 136.144 li
39.4395 255.644 li
cp
clp
39.4434 255.647 mo
39.4434 136.128 li
101.436 136.128 li
101.436 255.647 li
39.4434 255.647 li
0 0 0 .1 cmyk
f
39.4434 255.647 mo
39.4434 136.128 li
101.436 136.128 li
101.436 255.647 li
39.4434 255.647 li
0 0 0 .6 cmyk
@
163.427 255.647 mo
163.427 136.128 li
287.411 136.128 li
287.411 255.647 li
163.427 255.647 li
0 0 0 .1 cmyk
f
163.427 255.647 mo
163.427 136.128 li
287.411 136.128 li
287.411 255.647 li
163.427 255.647 li
0 0 0 .6 cmyk
@
39.4434 244.782 mo
44.4028 244.782 li
45.6426 245.339 li
46.8823 244.37 li
48.1221 245.655 li
50.6021 246.132 li
54.3213 242.181 li
55.561 242.169 li
56.8013 242.622 li
58.041 242.185 li
60.5205 243.981 li
61.7603 244.573 li
63.0005 245.644 li
67.9595 243.325 li
74.1587 244.88 li
75.3989 244.192 li
76.6387 244.319 li
77.8784 245.005 li
79.1182 245.136 li
80.3579 244.065 li
82.8374 243.856 li
85.3174 245.274 li
86.5571 246.241 li
89.0371 245.376 li
90.2764 244.554 li
91.5161 244.167 li
92.7563 245.155 li
95.2363 244.251 li
96.4761 244.55 li
97.7153 244.142 li
100.195 245.552 li
102.675 244.698 li
103.915 244.796 li
105.155 244.022 li
106.395 243.757 li
112.594 245.972 li
113.833 244.646 li
116.313 245.192 li
117.553 244.97 li
118.793 245.673 li
120.033 245.405 li
121.272 244.485 li
122.512 244.31 li
123.752 244.606 li
124.992 244.558 li
127.472 245.356 li
128.711 246.331 li
129.951 245.397 li
134.911 244.185 li
136.151 243.942 li
138.63 245.194 li
139.87 245.444 li
141.11 246.229 li
143.59 244.532 li
144.829 244.737 li
146.069 245.345 li
147.309 244.899 li
148.549 245.116 li
149.789 244.601 li
151.029 244.622 li
152.268 245.493 li
153.508 245.808 li
155.988 245.134 li
157.229 245.407 li
158.468 244.591 li
159.708 244.667 li
160.947 245.456 li
162.188 244.212 li
163.427 244.726 li
165.907 244.763 li
167.147 245.526 li
169.626 245.726 li
172.106 244.089 li
173.346 244.036 li
174.586 244.683 li
175.825 246.052 li
178.305 245.024 li
179.545 243.829 li
180.785 243.417 li
182.025 244.776 li
184.504 246.009 li
186.984 245.374 li
188.224 244.157 li
189.464 244.423 li
190.703 245.288 li
191.943 244.966 li
193.183 245.263 li
195.663 243.944 li
196.903 245.884 li
198.143 246.257 li
199.382 245.562 li
200.622 245.698 li
201.862 245.374 li
203.103 244.694 li
204.342 244.743 li
206.821 245.655 li
208.061 244.591 li
209.301 244.728 li
210.542 244.056 li
211.782 244.532 li
213.022 245.528 li
214.26 245.71 li
215.5 246.407 li
216.741 245.396 li
217.981 245.671 li
219.221 245.448 li
220.459 244.095 li
224.18 244.894 li
225.418 245.493 li
226.659 245.476 li
230.377 244.149 li
231.618 245.083 li
234.098 245.798 li
235.338 244.974 li
237.817 244.708 li
239.057 244.108 li
242.778 245.62 li
244.018 245.046 li
247.737 247.337 li
250.215 247.495 li
251.456 246.956 li
252.696 246.915 li
256.415 247.874 li
258.895 246.679 li
260.135 247.563 li
261.374 246.8 li
262.614 247.683 li
263.854 247.104 li
265.094 247.866 li
266.334 248.173 li
268.813 247.421 li
270.053 246.394 li
271.293 247.046 li
272.534 248.362 li
275.014 248.804 li
277.493 247.554 li
279.973 248.69 li
281.211 247.519 li
282.452 248.052 li
284.932 246.718 li
286.17 246.468 li
287.411 247.122 li
292.37 245.837 li
294.85 243.933 li
296.09 243.483 li
297.331 243.638 li
299.809 241.011 li
301.049 240.909 li
302.29 239.712 li
303.53 239.954 li
304.77 239.538 li
307.249 237.593 li
308.489 237.339 li
309.729 237.954 li
310.969 234.636 li
313.448 234.302 li
314.688 233.3 li
315.928 233.196 li
317.167 231.157 li
318.407 230.688 li
319.647 230.761 li
322.127 226.632 li
324.606 226.218 li
325.846 224.022 li
327.086 224.749 li
328.327 221.974 li
329.567 222.122 li
330.805 219.159 li
332.045 219.134 li
333.286 216.739 li
334.526 217.325 li
335.766 215.714 li
337.004 215.146 li
338.245 216.397 li
339.485 213.036 li
341.963 212.349 li
343.204 213.267 li
344.444 212.058 li
345.684 209.431 li
346.922 208.997 li
348.163 208.976 li
349.403 205.567 li
350.643 204.892 li
351.883 203.302 li
353.124 205.521 li
354.362 202.753 li
355.602 203.403 li
356.842 199.556 li
358.083 199.919 li
359.323 199.454 li
360.563 200.12 li
361.801 198.733 li
363.042 196.413 li
364.282 195.776 li
365.522 196.466 li
368 191.677 li
369.241 192.653 li
370.481 194.116 li
371.721 190.864 li
372.959 191.63 li
374.2 189.347 li
375.44 188.571 li
376.68 187.378 li
377.918 188.204 li
379.159 186.058 li
380.399 185.831 li
381.639 185.263 li
382.879 185.53 li
384.12 185.349 li
386.598 182.628 li
387.838 183.286 li
389.079 182.839 li
390.319 185.585 li
392.797 179.96 li
394.038 180.778 li
395.278 183.446 li
396.518 180.401 li
397.756 178.405 li
398.997 179.343 li
400.237 181.864 li
402.717 176.63 li
403.956 177.698 li
405.196 179.509 li
406.436 177.929 li
407.676 174.7 li
408.915 175.198 li
410.155 174.171 li
411.395 175.405 li
411.395 175.405 li
0 0 0 .5 cmyk
@
39.4434 244.782 mo
44.4028 244.782 li
45.6426 244.212 li
46.8823 245.269 li
48.1221 245.417 li
49.3618 244.233 li
50.6021 245.063 li
51.8418 243.319 li
53.0815 242.218 li
54.3213 241.798 li
55.561 242.056 li
56.8013 241.81 li
60.5205 244.487 li
61.7603 243.722 li
64.2402 242.786 li
70.4395 243.839 li
71.6792 243.946 li
72.9189 243.458 li
74.1587 243.405 li
75.3989 244.509 li
76.6387 244.257 li
77.8784 244.587 li
80.3579 244.126 li
82.8374 242.993 li
85.3174 244.62 li
86.5571 243.78 li
87.7974 243.995 li
89.0371 244.671 li
90.2764 244.343 li
91.5161 245.022 li
93.9961 243.999 li
95.2363 243.872 li
96.4761 244.263 li
97.7153 245.862 li
98.9551 245.521 li
100.195 244.667 li
102.675 244.171 li
105.155 244.218 li
106.395 244.153 li
107.634 244.778 li
108.875 244.214 li
110.114 244.538 li
112.594 244.142 li
113.833 244.728 li
115.073 243.976 li
116.313 244.118 li
117.553 244.614 li
118.793 244.456 li
120.033 244.702 li
123.752 243.558 li
127.472 244.21 li
128.711 244.056 li
129.951 244.97 li
131.191 244.966 li
132.431 243.979 li
133.671 244.874 li
134.911 244.267 li
141.11 245.089 li
144.829 243.714 li
147.309 244.796 li
149.789 244.396 li
151.029 244.528 li
152.268 243.956 li
154.748 244.778 li
155.988 245.118 li
160.947 243.159 li
162.188 244.183 li
163.427 244.45 li
164.667 245.46 li
165.907 245.597 li
167.147 245.151 li
168.386 245.11 li
169.626 243.892 li
170.866 243.462 li
172.106 243.966 li
173.346 244.095 li
174.586 245.319 li
175.825 245.63 li
177.065 244.544 li
178.305 244.388 li
179.545 243.804 li
180.785 244.298 li
182.025 243.624 li
183.264 243.571 li
188.224 245.778 li
190.703 243.794 li
191.943 243.438 li
193.183 243.544 li
195.663 244.821 li
196.903 244.288 li
198.143 244.599 li
204.342 243.964 li
205.583 243.515 li
209.301 244.802 li
210.542 246.036 li
211.782 245.519 li
213.022 244.022 li
214.26 243.505 li
216.741 244.704 li
217.981 243.972 li
219.221 244.38 li
221.7 244.087 li
222.94 244.437 li
224.18 244.005 li
225.418 244.175 li
226.659 243.938 li
229.139 244.767 li
232.858 243.858 li
234.098 244.53 li
235.338 244.79 li
236.579 245.462 li
240.297 243.009 li
241.538 241.228 li
242.778 241.151 li
244.018 241.778 li
245.256 241.438 li
247.737 239.743 li
248.977 237.786 li
250.215 237.46 li
253.936 237.716 li
255.176 237.003 li
261.374 235.485 li
262.614 234.099 li
263.854 235.044 li
265.094 235.21 li
266.334 234.722 li
267.575 233.204 li
268.813 233.22 li
271.293 234.022 li
272.534 233.062 li
273.774 233.138 li
275.014 231.786 li
276.252 232.585 li
277.493 232.86 li
278.733 232.153 li
279.973 233.093 li
281.211 233.177 li
282.452 231.751 li
283.692 231.138 li
284.932 231.216 li
286.17 232.706 li
287.411 231.454 li
288.651 230.839 li
291.131 231.415 li
292.37 230.995 li
293.61 230.937 li
294.85 231.562 li
296.09 231.718 li
297.331 231.308 li
299.809 229.472 li
301.049 230.171 li
302.29 229.64 li
303.53 229.481 li
304.77 228.06 li
306.01 228.833 li
307.249 228.642 li
309.729 231.29 li
310.969 228.542 li
312.208 228.431 li
313.448 229.479 li
317.167 227.915 li
318.407 228.979 li
319.647 229.239 li
320.887 228.423 li
322.127 228.327 li
323.366 227.567 li
324.606 228.253 li
325.846 228.155 li
327.086 227.409 li
328.327 227.218 li
329.567 228.349 li
330.805 227.823 li
333.286 227.399 li
334.526 228.155 li
335.766 226.011 li
338.245 227.985 li
340.725 226.944 li
344.444 229.251 li
345.684 228.208 li
346.922 229.673 li
348.163 229.233 li
349.403 229.208 li
350.643 228.214 li
351.883 228.489 li
354.362 229.577 li
355.602 229.823 li
356.842 229.651 li
358.083 228.938 li
360.563 229.802 li
361.801 230.636 li
363.042 229.858 li
364.282 229.726 li
366.762 230.528 li
368 229.073 li
369.241 230.745 li
370.481 231.647 li
371.721 230.712 li
372.959 230.528 li
375.44 231.169 li
376.68 230.894 li
377.918 231.054 li
379.159 232.187 li
381.639 231.257 li
382.879 230.933 li
386.598 231.653 li
387.838 231.38 li
389.079 232.261 li
391.559 231.976 li
392.797 232.509 li
394.038 231.759 li
395.278 232.978 li
396.518 232.731 li
397.756 232.067 li
398.997 232.87 li
400.237 232.972 li
402.717 232.167 li
405.196 233.929 li
406.436 232.606 li
407.676 232.692 li
408.915 233.212 li
411.395 232.858 li
411.395 232.858 li
0 0 0 1 cmyk
@
39.4434 244.782 mo
48.1221 245.026 li
50.6021 245.493 li
53.0815 242.042 li
56.8013 240.718 li
61.7603 243.106 li
63.0005 244.491 li
64.2402 243.526 li
65.48 243.72 li
66.7197 243.187 li
67.9595 243.614 li
70.4395 243.169 li
71.6792 244.78 li
72.9189 244.712 li
75.3989 243.522 li
79.1182 245.601 li
80.3579 245.403 li
81.5977 245.729 li
82.8374 244.269 li
84.0771 243.657 li
87.7974 245.097 li
89.0371 244.374 li
90.2764 244.835 li
91.5161 244.538 li
95.2363 245.3 li
96.4761 244.897 li
98.9551 245.104 li
100.195 244.452 li
101.436 244.45 li
102.675 244.786 li
105.155 244.772 li
106.395 245.013 li
111.354 244.03 li
112.594 244.298 li
113.833 245.062 li
116.313 245.29 li
120.033 245.142 li
121.272 244.886 li
122.512 245.315 li
123.752 244.358 li
124.992 244.69 li
127.472 244.431 li
129.951 244.938 li
131.191 245.593 li
134.911 245.134 li
136.151 245.372 li
137.39 244.835 li
139.87 244.585 li
141.11 245.769 li
142.35 245.983 li
143.59 244.866 li
147.309 243.509 li
149.789 245.778 li
151.029 246.323 li
153.508 245.765 li
155.988 244.218 li
157.229 244.265 li
158.468 245.251 li
160.947 245.267 li
163.427 245.142 li
164.667 245.011 li
165.907 244.239 li
172.106 245.8 li
173.346 244.919 li
174.586 244.761 li
175.825 245.14 li
177.065 244.581 li
179.545 245.747 li
182.025 244.231 li
183.264 245.009 li
185.744 243.882 li
186.984 244.706 li
188.224 244.839 li
189.464 245.872 li
190.703 246.001 li
191.943 244.597 li
193.183 243.81 li
194.423 244.31 li
195.663 245.612 li
196.903 245.827 li
198.143 246.688 li
200.622 244.335 li
206.821 244.864 li
208.061 244.165 li
209.301 244.507 li
210.542 244.13 li
211.782 244.53 li
213.022 245.927 li
214.26 245.829 li
215.5 245.21 li
216.741 245.091 li
217.981 244.466 li
220.459 243.837 li
221.7 244.437 li
222.94 246.081 li
224.18 246.444 li
225.418 246.353 li
226.659 245.644 li
227.899 244.237 li
229.139 244.374 li
230.377 243.81 li
232.858 245.425 li
234.098 245.362 li
235.338 244.411 li
236.579 244.347 li
237.817 245.202 li
239.057 244.964 li
240.297 244.126 li
241.538 242.614 li
242.778 242.31 li
244.018 242.726 li
245.256 242.538 li
246.497 241.958 li
247.737 241.821 li
248.977 240.88 li
250.215 240.87 li
251.456 241.987 li
252.696 242.267 li
253.936 241.423 li
255.176 239.759 li
256.415 239.218 li
260.135 239.583 li
261.374 240.712 li
262.614 239.04 li
263.854 238.839 li
265.094 239.521 li
266.334 239.044 li
267.575 239.39 li
270.053 237.394 li
271.293 237.892 li
273.774 240.159 li
275.014 239.358 li
277.493 240.597 li
278.733 238.767 li
281.211 238.913 li
282.452 238.419 li
286.17 239.616 li
287.411 240.538 li
289.891 238.831 li
291.131 239.745 li
292.37 239.667 li
293.61 238.778 li
296.09 240.521 li
297.331 238.788 li
299.809 238.7 li
302.29 241.104 li
303.53 241.183 li
304.77 241.653 li
306.01 241.329 li
307.249 240.628 li
308.489 240.554 li
309.729 241.138 li
310.969 243.599 li
313.448 242.212 li
317.167 242.229 li
318.407 243.724 li
319.647 244.167 li
320.887 243.708 li
327.086 246.173 li
328.327 245.247 li
329.567 245.669 li
333.286 245.358 li
335.766 246.317 li
337.004 247.282 li
338.245 246.464 li
341.963 247.528 li
343.204 247.884 li
344.444 246.728 li
345.684 247.876 li
346.922 247.999 li
348.163 247.179 li
349.403 248.077 li
350.643 247.63 li
353.124 247.454 li
354.362 248.784 li
355.602 248.284 li
361.801 248.784 li
363.042 249.384 li
366.762 249.587 li
368 250.296 li
369.241 249.897 li
370.481 250.489 li
371.721 250.618 li
372.959 250.3 li
375.44 250.708 li
376.68 250.503 li
377.918 250.909 li
379.159 251.771 li
380.399 251.401 li
381.639 251.632 li
382.879 250.511 li
384.12 250.991 li
385.358 252.163 li
386.598 251.745 li
387.838 250.892 li
389.079 251.657 li
390.319 251.097 li
391.559 251.812 li
395.278 251.999 li
396.518 251.155 li
397.756 251.829 li
398.997 251.847 li
400.237 251.427 li
401.477 251.942 li
402.717 252.032 li
403.956 251.7 li
405.196 252.032 li
406.436 251.534 li
408.915 251.599 li
410.155 252.384 li
411.395 251.671 li
411.395 251.671 li
0 0 0 .7 cmyk
@
39.4434 244.782 mo
44.4028 244.782 li
45.6426 245.147 li
46.8823 244.476 li
50.6021 243.8 li
51.8418 243.292 li
53.0815 241.931 li
55.561 240.831 li
56.8013 241.622 li
58.041 241.378 li
60.5205 243.235 li
63.0005 242.901 li
64.2402 242.919 li
65.48 242.438 li
66.7197 243.187 li
69.1997 243.72 li
71.6792 244.507 li
72.9189 244.683 li
74.1587 243.925 li
76.6387 243.106 li
81.5977 245.597 li
85.3174 243.233 li
86.5571 243.353 li
87.7974 242.853 li
90.2764 244.083 li
93.9961 245.671 li
95.2363 245.341 li
97.7153 243.409 li
98.9551 244.011 li
100.195 243.015 li
101.436 243.39 li
102.675 245.157 li
103.915 244.792 li
105.155 245.474 li
106.395 245.325 li
107.634 244.704 li
108.875 244.683 li
110.114 243.571 li
112.594 242.829 li
115.073 243.667 li
116.313 245.517 li
117.553 245.274 li
118.793 245.745 li
121.272 244.585 li
122.512 244.284 li
123.752 244.571 li
126.232 243.44 li
129.951 244.179 li
131.191 245.036 li
132.431 245.306 li
133.671 244.532 li
137.39 244.083 li
138.63 244.247 li
139.87 244.942 li
141.11 245.157 li
142.35 244.462 li
143.59 243.196 li
144.829 243.659 li
146.069 243.187 li
147.309 244.657 li
148.549 244.392 li
149.789 245.302 li
151.029 243.663 li
152.268 244.071 li
153.508 244.966 li
155.988 243.747 li
158.468 245.087 li
160.947 245.323 li
162.188 243.638 li
163.427 243.698 li
164.667 243.37 li
165.907 243.749 li
168.386 245.239 li
169.626 245.573 li
172.106 244.542 li
173.346 244.272 li
174.586 243.481 li
175.825 243.19 li
177.065 244.19 li
179.545 245.081 li
180.785 244.735 li
182.025 245.04 li
183.264 244.413 li
184.504 244.714 li
189.464 243.54 li
191.943 245.083 li
193.183 245.466 li
194.423 245.354 li
195.663 244.222 li
196.903 244.228 li
198.143 243.78 li
199.382 244.341 li
205.583 244.948 li
206.821 244.614 li
208.061 245.054 li
210.542 243.585 li
213.022 243.729 li
214.26 244.313 li
217.981 244.687 li
220.459 243.479 li
221.7 244.647 li
222.94 244.349 li
224.18 245.437 li
226.659 245.716 li
227.899 245.005 li
229.139 243.231 li
230.377 243.087 li
232.858 245.015 li
234.098 244.425 li
235.338 245.788 li
236.579 243.942 li
237.817 244.157 li
239.057 243.913 li
240.297 242.298 li
241.538 238.288 li
242.778 236.603 li
244.018 236.429 li
245.256 237.075 li
246.497 235.917 li
247.737 236.599 li
248.977 230.995 li
250.215 231.784 li
251.456 231.333 li
252.696 232.181 li
253.936 231.026 li
255.176 228.259 li
256.415 226.642 li
257.655 225.731 li
260.135 227.354 li
261.374 223.835 li
263.854 223.675 li
267.575 222.972 li
268.813 221.511 li
270.053 221.571 li
271.293 222.499 li
272.534 220.876 li
273.774 220.786 li
275.014 220.233 li
276.252 221.507 li
277.493 221.329 li
278.733 219.292 li
279.973 219.952 li
282.452 219.905 li
283.692 217.14 li
284.932 218.854 li
286.17 219.981 li
287.411 218.94 li
288.651 219.899 li
289.891 219.003 li
291.131 219.407 li
293.61 217.491 li
294.85 217.739 li
297.331 219.286 li
298.571 217.952 li
299.809 218.073 li
301.049 219.003 li
302.29 217.423 li
303.53 219.183 li
304.77 216.821 li
307.249 218.499 li
309.729 220.718 li
310.969 216.753 li
312.208 217.733 li
314.688 220.501 li
315.928 219.278 li
319.647 219.388 li
322.127 218.284 li
323.366 217.917 li
324.606 219.39 li
325.846 219.263 li
327.086 219.79 li
328.327 218.524 li
329.567 219.229 li
330.805 217.964 li
332.045 219.319 li
333.286 218.874 li
334.526 219.933 li
335.766 219.054 li
337.004 220.349 li
338.245 220.78 li
339.485 219.341 li
340.725 218.851 li
341.963 219.155 li
343.204 220.722 li
344.444 221.362 li
345.684 219.899 li
346.922 221.716 li
348.163 220.88 li
349.403 220.946 li
350.643 221.409 li
351.883 220.483 li
353.124 221.983 li
354.362 221.622 li
355.602 222.515 li
356.842 221.626 li
359.323 223.046 li
360.563 223.228 li
361.801 224.065 li
363.042 224.048 li
364.282 223.415 li
365.522 224.599 li
368 224.179 li
369.241 225.196 li
370.481 225.362 li
371.721 224.876 li
372.959 225.981 li
374.2 225.606 li
375.44 226.351 li
376.68 226.661 li
377.918 226.448 li
380.399 227.253 li
381.639 226.591 li
382.879 227.683 li
384.12 226.997 li
386.598 227.45 li
387.838 227.653 li
391.559 229.479 li
394.038 228.755 li
395.278 229.401 li
397.756 229.444 li
398.997 229.282 li
400.237 230.612 li
403.956 229.546 li
405.196 230.415 li
408.915 230.397 li
410.155 231.083 li
411.395 231.032 li
411.395 231.032 li
0 0 0 .5 cmyk
@
39.4434 244.782 mo
44.4028 244.782 li
45.6426 245.403 li
46.8823 245.138 li
49.3618 246.062 li
50.6021 246.04 li
53.0815 243.892 li
56.8013 243.429 li
58.041 242.937 li
59.2808 243.233 li
60.5205 244.269 li
61.7603 244.089 li
64.2402 244.353 li
65.48 243.995 li
66.7197 242.724 li
67.9595 243.55 li
69.1997 243.456 li
70.4395 244.667 li
71.6792 244.335 li
72.9189 244.866 li
75.3989 243.901 li
76.6387 243.362 li
77.8784 243.677 li
79.1182 244.53 li
80.3579 244.052 li
82.8374 245.671 li
85.3174 243.505 li
87.7974 243.712 li
90.2764 245.144 li
91.5161 244.21 li
92.7563 244.267 li
93.9961 243.728 li
95.2363 244.343 li
96.4761 244.581 li
98.9551 244.231 li
100.195 244.489 li
101.436 243.671 li
102.675 243.581 li
105.155 244.856 li
108.875 245.046 li
110.114 244.858 li
111.354 243.747 li
112.594 244.36 li
116.313 244.116 li
117.553 244.569 li
118.793 244.196 li
121.272 244.435 li
122.512 243.919 li
123.752 244.011 li
124.992 244.946 li
126.232 244.718 li
127.472 245.196 li
129.951 244.118 li
132.431 243.542 li
134.911 245.058 li
136.151 245.206 li
138.63 244.038 li
139.87 243.772 li
141.11 244.815 li
142.35 244.981 li
143.59 245.604 li
144.829 244.646 li
147.309 243.708 li
149.789 244.847 li
151.029 245.038 li
152.268 244.233 li
153.508 245.013 li
155.988 243.185 li
157.229 243.323 li
159.708 244.806 li
160.947 244.185 li
163.427 244.958 li
164.667 244.589 li
168.386 245.224 li
170.866 243.882 li
172.106 244.054 li
173.346 243.212 li
174.586 243.896 li
175.825 244.171 li
177.065 245.147 li
178.305 245.126 li
179.545 245.964 li
182.025 244.458 li
183.264 243.177 li
184.504 244.214 li
185.744 244.216 li
186.984 244.712 li
188.224 244.567 li
189.464 244.958 li
190.703 243.509 li
191.943 244.245 li
198.143 244.728 li
199.382 245.384 li
200.622 244.042 li
201.862 244.585 li
204.342 243.866 li
208.061 245.321 li
209.301 245.269 li
211.782 243.677 li
215.5 244.298 li
216.741 245.118 li
217.981 245.513 li
219.221 244.956 li
220.459 244.831 li
222.94 243.386 li
224.18 243.544 li
225.418 244.474 li
226.659 243.323 li
229.139 244.747 li
230.377 245.376 li
231.618 244.892 li
232.858 243.284 li
234.098 244.249 li
236.579 244.837 li
237.817 243.929 li
239.057 244.243 li
240.297 243.962 li
241.538 240.364 li
242.778 239.554 li
244.018 240.187 li
247.737 239.155 li
248.977 235.481 li
250.215 235.808 li
251.456 235.552 li
252.696 236.134 li
253.936 234.901 li
255.176 234.716 li
256.415 234.161 li
257.655 234.517 li
258.895 235.239 li
260.135 234.354 li
261.374 234.175 li
262.614 232.974 li
265.094 231.97 li
266.334 233.229 li
267.575 233.386 li
270.053 231.577 li
271.293 232.159 li
273.774 231.136 li
275.014 230.788 li
279.973 232.628 li
282.452 232.706 li
283.692 231.829 li
286.17 232.714 li
288.651 231.905 li
289.891 232.138 li
291.131 232.796 li
292.37 232.751 li
293.61 232.222 li
296.09 232.388 li
297.331 231.597 li
298.571 232.06 li
299.809 231.313 li
301.049 232.423 li
302.29 232.63 li
304.77 231.968 li
307.249 233.28 li
308.489 234.954 li
309.729 234.95 li
310.969 233.397 li
312.208 234.28 li
313.448 234.72 li
314.688 234.183 li
317.167 234.233 li
318.407 235.538 li
319.647 234.817 li
320.887 236.103 li
322.127 236.647 li
323.366 236.698 li
324.606 236.261 li
325.846 237.464 li
328.327 237.944 li
329.567 238.466 li
330.805 237.923 li
332.045 238.292 li
334.526 239.897 li
335.766 239.999 li
338.245 241.052 li
339.485 240.661 li
340.725 240.796 li
341.963 241.392 li
344.444 241.444 li
345.684 243.081 li
346.922 241.954 li
348.163 242.187 li
349.403 243.663 li
350.643 242.663 li
351.883 243.81 li
354.362 242.835 li
356.842 243.53 li
358.083 244.14 li
359.323 244.067 li
360.563 245.435 li
361.801 245.634 li
363.042 246.216 li
364.282 245.151 li
365.522 245.587 li
366.762 245.667 li
369.241 246.731 li
370.481 246.716 li
371.721 246.173 li
372.959 247.388 li
375.44 247.745 li
376.68 247.151 li
377.918 248.03 li
381.639 248.89 li
382.879 248.063 li
386.598 248.921 li
387.838 248.45 li
389.079 248.687 li
391.559 249.571 li
392.797 249.431 li
394.038 249.786 li
395.278 249.517 li
396.518 250.173 li
397.756 250.085 li
398.997 250.722 li
400.237 250.136 li
402.717 251.091 li
403.956 250.36 li
405.196 250.454 li
406.436 250.892 li
407.676 250.856 li
408.915 251.921 li
410.155 251.292 li
411.395 251.603 li
411.395 251.603 li
0 0 0 1 cmyk
@
39.4434 244.782 mo
44.4028 244.782 li
48.1221 244.011 li
50.6021 243.989 li
51.8418 242.159 li
53.0815 241.927 li
54.3213 242.235 li
55.561 242.021 li
56.8013 243.11 li
60.5205 242.815 li
61.7603 242.761 li
63.0005 243.821 li
66.7197 244.132 li
67.9595 244.335 li
69.1997 243.468 li
70.4395 244.146 li
71.6792 244.101 li
72.9189 243.329 li
74.1587 243.472 li
76.6387 245.562 li
79.1182 243.673 li
81.5977 244.837 li
82.8374 244.241 li
84.0771 244.97 li
85.3174 244.06 li
86.5571 244.165 li
87.7974 243.796 li
89.0371 244.271 li
90.2764 245.245 li
91.5161 245.44 li
92.7563 244.964 li
95.2363 245.587 li
97.7153 243.747 li
98.9551 244.044 li
101.436 245.638 li
102.675 245.097 li
103.915 245.286 li
108.875 244.229 li
110.114 243.968 li
111.354 245.128 li
112.594 245.517 li
115.073 245.28 li
116.313 244.267 li
117.553 244.368 li
118.793 243.884 li
120.033 244.646 li
121.272 244.085 li
122.512 245.757 li
124.992 244.704 li
126.232 244.724 li
127.472 243.761 li
128.711 244.198 li
129.951 245.159 li
132.431 245.222 li
136.151 243.993 li
137.39 244.927 li
139.87 245.315 li
141.11 244.14 li
142.35 244.614 li
143.59 244.323 li
144.829 244.554 li
146.069 244.245 li
148.549 245.36 li
149.789 246.104 li
152.268 244.72 li
153.508 243.196 li
159.708 246.298 li
160.947 245.743 li
162.188 244.019 li
163.427 244.411 li
165.907 244.14 li
167.147 244.942 li
168.386 243.997 li
169.626 244.087 li
170.866 244.966 li
172.106 244.704 li
174.586 245.263 li
175.825 244.993 li
177.065 246.063 li
179.545 243.794 li
180.785 243.618 li
183.264 244.737 li
184.504 245.085 li
185.744 246.036 li
186.984 246.06 li
189.464 244.077 li
190.703 245.435 li
191.943 244.728 li
193.183 245.304 li
194.423 244.577 li
196.903 243.981 li
198.143 244.538 li
199.382 244.64 li
200.622 245.876 li
205.583 243.89 li
206.821 244.05 li
208.061 244.706 li
209.301 244.911 li
210.542 243.671 li
211.782 245.651 li
213.022 244.573 li
214.26 245.032 li
215.5 244.815 li
216.741 244.237 li
217.981 243.222 li
222.94 245.905 li
225.418 245.144 li
226.659 245.458 li
227.899 244.288 li
229.139 244.196 li
232.858 245.235 li
234.098 243.808 li
240.297 244.729 li
241.538 241.911 li
242.778 241.972 li
244.018 242.722 li
245.256 242.794 li
246.497 242.04 li
247.737 242.446 li
248.977 239.733 li
250.215 239.403 li
252.696 240.022 li
253.936 240.417 li
255.176 239.771 li
257.655 239.612 li
258.895 240.208 li
260.135 240.093 li
261.374 238.368 li
262.614 237.901 li
265.094 237.956 li
266.334 237.341 li
267.575 237.335 li
268.813 237.935 li
271.293 237.894 li
272.534 236.993 li
273.774 238.03 li
275.014 236.483 li
277.493 236.964 li
278.733 235.636 li
279.973 236.22 li
281.211 235.147 li
282.452 235.606 li
283.692 234.95 li
284.932 235.255 li
286.17 237.583 li
287.411 236.708 li
288.651 237.062 li
289.891 235.681 li
291.131 235.792 li
292.37 236.687 li
293.61 236.606 li
296.09 237.452 li
298.571 236.146 li
301.049 236.722 li
302.29 236.245 li
303.53 237.12 li
304.77 236.106 li
307.249 236.241 li
308.489 237.101 li
309.729 238.669 li
310.969 237.831 li
312.208 238.511 li
313.448 237.888 li
314.688 238.657 li
315.928 237.89 li
317.167 237.685 li
319.647 239.075 li
320.887 236.755 li
322.127 236.917 li
323.366 236.532 li
324.606 236.983 li
325.846 236.587 li
327.086 237.749 li
328.327 237.599 li
330.805 237.792 li
332.045 237.847 li
333.286 237.462 li
337.004 237.806 li
338.245 238.333 li
339.485 237.782 li
340.725 238.235 li
341.963 237.747 li
344.444 238.327 li
345.684 237.767 li
346.922 238.78 li
349.403 238.368 li
351.883 239.106 li
355.602 239.521 li
356.842 239.45 li
358.083 238.876 li
359.323 239.704 li
360.563 239.599 li
361.801 240.329 li
363.042 239.272 li
364.282 240.36 li
365.522 239.989 li
366.762 240.292 li
368 240.034 li
370.481 240.792 li
372.959 239.915 li
374.2 240.771 li
375.44 240.095 li
376.68 240.042 li
377.918 240.495 li
379.159 239.458 li
380.399 240.376 li
385.358 241.39 li
386.598 241.134 li
387.838 241.386 li
389.079 240.933 li
390.319 241.302 li
394.038 240.966 li
395.278 242.112 li
396.518 241.206 li
397.756 241.612 li
398.997 241.151 li
400.237 242.519 li
402.717 241.071 li
403.956 242.571 li
405.196 241.595 li
407.676 242.001 li
411.395 241.364 li
411.395 241.364 li
0 0 0 .7 cmyk
@
39.4434 244.782 mo
45.6426 244.812 li
46.8823 243.433 li
48.1221 243.938 li
50.6021 242.864 li
51.8418 241.226 li
53.0815 240.456 li
54.3213 240.944 li
55.561 240.563 li
56.8013 240.606 li
58.041 241.405 li
63.0005 242.308 li
65.48 242.183 li
66.7197 241.435 li
69.1997 243.813 li
71.6792 243.671 li
74.1587 242.739 li
75.3989 242.55 li
76.6387 243.972 li
77.8784 244.714 li
81.5977 244.737 li
82.8374 243.938 li
85.3174 244.005 li
89.0371 244.415 li
91.5161 243.294 li
100.195 245.001 li
102.675 243.804 li
103.915 243.737 li
105.155 244.749 li
107.634 244.507 li
108.875 243.94 li
110.114 244.128 li
111.354 243.198 li
112.594 244.228 li
115.073 244.673 li
116.313 245.001 li
117.553 244.729 li
118.793 243.942 li
120.033 243.558 li
121.272 244.128 li
124.992 244.489 li
127.472 245.302 li
128.711 244.737 li
129.951 244.685 li
131.191 244.118 li
134.911 244.116 li
136.151 243.312 li
137.39 243.183 li
139.87 244.267 li
141.11 244.235 li
142.35 244.897 li
143.59 244.628 li
144.829 245.294 li
146.069 244.548 li
147.309 244.526 li
148.549 244.956 li
149.789 244.353 li
151.029 244.196 li
152.268 244.45 li
153.508 244.155 li
154.748 245.065 li
157.229 245.288 li
158.468 244.509 li
159.708 244.331 li
160.947 243.071 li
162.188 243.112 li
165.907 245.011 li
167.147 244.534 li
168.386 244.464 li
169.626 245.106 li
170.866 243.997 li
172.106 244.765 li
173.346 244.013 li
174.586 244.954 li
175.825 244.577 li
179.545 245.364 li
180.785 244.235 li
183.264 244.091 li
185.744 245.573 li
186.984 245.187 li
189.464 242.813 li
190.703 243.714 li
191.943 242.962 li
193.183 243.28 li
195.663 245.251 li
196.903 244.55 li
200.622 244.089 li
201.862 244.565 li
203.103 244.046 li
204.342 244.243 li
206.821 245.683 li
208.061 244.274 li
209.301 243.823 li
211.782 244.79 li
213.022 245.081 li
214.26 243.792 li
216.741 243.931 li
217.981 243.728 li
220.459 244.501 li
221.7 245.353 li
224.18 244.491 li
225.418 245.298 li
226.659 245.229 li
227.899 244.446 li
230.377 244.339 li
231.618 243.478 li
232.858 243.651 li
234.098 244.366 li
235.338 244.382 li
236.579 245.788 li
237.817 244.808 li
239.057 244.442 li
240.297 240.888 li
241.538 235.899 li
242.778 235.61 li
245.256 236.229 li
246.497 235.022 li
247.737 234.913 li
248.977 229.46 li
250.215 228.905 li
252.696 229.571 li
253.936 228.146 li
255.176 224.825 li
256.415 223.122 li
257.655 222.995 li
258.895 224.136 li
260.135 224.077 li
261.374 221.806 li
262.614 220.823 li
266.334 220.665 li
268.813 215.642 li
270.053 215.222 li
271.293 217.313 li
272.534 215.913 li
273.774 216.901 li
275.014 213.911 li
276.252 214.837 li
277.493 215.255 li
278.733 214.29 li
279.973 215.024 li
282.452 213.407 li
283.692 211.983 li
284.932 211.981 li
286.17 213.915 li
287.411 211.425 li
289.891 211.001 li
291.131 211.169 li
293.61 208.409 li
296.09 210.366 li
297.331 209.892 li
299.809 207.29 li
301.049 207.976 li
302.29 207.976 li
303.53 209.552 li
304.77 207.087 li
307.249 206.087 li
309.729 209.522 li
310.969 204.606 li
313.448 207.679 li
314.688 207.065 li
315.928 205.558 li
317.167 205.497 li
318.407 205.913 li
320.887 204.644 li
322.127 203.663 li
323.366 203.407 li
324.606 205.079 li
325.846 203.069 li
327.086 204.761 li
328.327 202.616 li
329.567 204.97 li
330.805 203.28 li
333.286 203.276 li
334.526 204.087 li
335.766 202.011 li
337.004 202.647 li
338.245 204.87 li
339.485 202.733 li
340.725 201.644 li
343.204 205.614 li
344.444 204.085 li
345.684 203.183 li
348.163 204.233 li
349.403 204.392 li
350.643 202.837 li
351.883 203.374 li
353.124 204.786 li
354.362 204.226 li
355.602 205.878 li
356.842 203.763 li
358.083 203.89 li
361.801 206.126 li
363.042 204.437 li
364.282 204.188 li
365.522 205.874 li
366.762 204.323 li
368 204.896 li
369.241 205.067 li
370.481 206.96 li
371.721 205.401 li
372.959 206.636 li
374.2 205.53 li
375.44 206.319 li
376.68 206.335 li
377.918 207.044 li
379.159 206.017 li
380.399 206.624 li
382.879 206.386 li
384.12 207.501 li
385.358 206.896 li
386.598 206.835 li
387.838 207.769 li
389.079 207.21 li
390.319 209.503 li
391.559 207.954 li
394.038 208.097 li
395.278 209.581 li
397.756 208.675 li
398.997 210.021 li
400.237 210.192 li
401.477 209.716 li
402.717 208.798 li
403.956 209.524 li
405.196 211.056 li
406.436 209.804 li
407.676 209.419 li
408.915 210.085 li
410.155 209.946 li
411.395 211.304 li
411.395 211.304 li
0 0 0 .5 cmyk
@
grestore
.5 lw
0 lc
39.4434 136.128 mo
39.4434 140.128 li
39.4434 255.647 mo
39.4434 251.647 li
@
101.436 136.128 mo
101.436 140.128 li
101.436 255.647 mo
101.436 251.647 li
@
163.427 136.128 mo
163.427 140.128 li
163.427 255.647 mo
163.427 251.647 li
@
225.418 136.128 mo
225.418 140.128 li
225.418 255.647 mo
225.418 251.647 li
@
287.411 136.128 mo
287.411 140.128 li
287.411 255.647 mo
287.411 251.647 li
@
349.403 136.128 mo
349.403 140.128 li
349.403 255.647 mo
349.403 251.647 li
@
411.395 244.782 mo
407.395 244.782 li
39.4434 244.782 mo
43.4434 244.782 li
@
21.8154 240.239 mo
22.7871 240.239 23.5313 240.636 24.0591 241.403 cv
24.5752 242.185 24.8394 243.312 24.8394 244.776 cv
24.8394 246.253 24.5752 247.38 24.0591 248.147 cv
23.5313 248.915 22.7871 249.3 21.8154 249.3 cv
20.8311 249.3 20.0752 248.915 19.5591 248.147 cv
19.0435 247.38 18.7915 246.253 18.7915 244.776 cv
18.7915 243.312 19.0435 242.185 19.5591 241.403 cv
20.0752 240.636 20.8311 240.239 21.8154 240.239 cv
21.8154 240.239 li
cp
21.8154 241.177 mo
21.2031 241.177 20.7471 241.476 20.4355 242.075 cv
20.123 242.677 19.9795 243.575 19.9795 244.776 cv
19.9795 245.976 20.123 246.876 20.4355 247.476 cv
20.7471 248.075 21.2031 248.376 21.8154 248.376 cv
22.4272 248.376 22.8833 248.075 23.1953 247.476 cv
23.4951 246.876 23.6514 245.976 23.6514 244.776 cv
23.6514 243.575 23.4951 242.677 23.1953 242.075 cv
22.8833 241.476 22.4272 241.177 21.8154 241.177 cv
ef
26.9634 247.655 mo
28.1992 247.655 li
28.1992 249.144 li
26.9634 249.144 li
26.9634 247.655 li
26.9634 247.655 li
cp
ef
33.0952 240.239 mo
34.0674 240.239 34.8115 240.636 35.3394 241.403 cv
35.8555 242.185 36.1191 243.312 36.1191 244.776 cv
36.1191 246.253 35.8555 247.38 35.3394 248.147 cv
34.8115 248.915 34.0674 249.3 33.0952 249.3 cv
32.1113 249.3 31.3555 248.915 30.8394 248.147 cv
30.3232 247.38 30.0713 246.253 30.0713 244.776 cv
30.0713 243.312 30.3232 242.185 30.8394 241.403 cv
31.3555 240.636 32.1113 240.239 33.0952 240.239 cv
33.0952 240.239 li
cp
33.0952 241.177 mo
32.4834 241.177 32.0273 241.476 31.7153 242.075 cv
31.4033 242.677 31.2593 243.575 31.2593 244.776 cv
31.2593 245.976 31.4033 246.876 31.7153 247.476 cv
32.0273 248.075 32.4834 248.376 33.0952 248.376 cv
33.7075 248.376 34.1631 248.075 34.4751 247.476 cv
34.7754 246.876 34.9312 245.976 34.9312 244.776 cv
34.9312 243.575 34.7754 242.677 34.4751 242.075 cv
34.1631 241.476 33.7075 241.177 33.0952 241.177 cv
ef
411.395 190.454 mo
407.395 190.454 li
39.4434 190.454 mo
43.4434 190.454 li
@
22.0552 185.999 mo
23.0273 185.999 23.7715 186.396 24.2993 187.163 cv
24.8154 187.944 25.0791 189.071 25.0791 190.536 cv
25.0791 192.013 24.8154 193.14 24.2993 193.907 cv
23.7715 194.677 23.0273 195.06 22.0552 195.06 cv
21.0713 195.06 20.3154 194.677 19.7993 193.907 cv
19.2832 193.14 19.0313 192.013 19.0313 190.536 cv
19.0313 189.071 19.2832 187.944 19.7993 187.163 cv
20.3154 186.396 21.0713 185.999 22.0552 185.999 cv
22.0552 185.999 li
cp
22.0552 186.937 mo
21.4434 186.937 20.9873 187.235 20.6753 187.837 cv
20.3633 188.437 20.2192 189.337 20.2192 190.536 cv
20.2192 191.735 20.3633 192.636 20.6753 193.235 cv
20.9873 193.837 21.4434 194.136 22.0552 194.136 cv
22.6675 194.136 23.123 193.837 23.4355 193.235 cv
23.7354 192.636 23.8911 191.735 23.8911 190.536 cv
23.8911 189.337 23.7354 188.437 23.4355 187.837 cv
23.123 187.235 22.6675 186.937 22.0552 186.937 cv
ef
27.2031 193.415 mo
28.4395 193.415 li
28.4395 194.903 li
27.2031 194.903 li
27.2031 193.415 li
27.2031 193.415 li
cp
ef
31.0552 186.155 mo
35.6992 186.155 li
35.6992 187.151 li
32.1353 187.151 li
32.1353 189.3 li
32.3032 189.239 32.4834 189.192 32.6514 189.169 cv
32.8193 189.144 32.9995 189.12 33.1675 189.12 cv
34.1392 189.12 34.9072 189.396 35.4834 189.925 cv
36.0591 190.464 36.3472 191.185 36.3472 192.097 cv
36.3472 193.044 36.0474 193.776 35.4595 194.292 cv
34.8711 194.808 34.0435 195.06 32.9873 195.06 cv
32.6152 195.06 32.2432 195.024 31.8594 194.976 cv
31.4751 194.915 31.0913 194.831 30.6831 194.7 cv
30.6831 193.513 li
31.0313 193.704 31.3911 193.849 31.7754 193.944 cv
32.1475 194.04 32.5435 194.075 32.9634 194.075 cv
33.6353 194.075 34.1753 193.907 34.5713 193.548 cv
34.9551 193.188 35.1592 192.708 35.1592 192.097 cv
35.1592 191.495 34.9551 191.017 34.5713 190.655 cv
34.1753 190.296 33.6353 190.116 32.9634 190.116 cv
32.6514 190.116 32.3271 190.151 32.0151 190.224 cv
31.7031 190.296 31.3794 190.403 31.0552 190.548 cv
31.0552 186.155 li
31.0552 186.155 li
cp
ef
411.395 136.128 mo
407.395 136.128 li
39.4434 136.128 mo
43.4434 136.128 li
@
19.9673 139.428 mo
21.8994 139.428 li
21.8994 132.756 li
19.7993 133.176 li
19.7993 132.096 li
21.8872 131.676 li
23.0752 131.676 li
23.0752 139.428 li
25.0073 139.428 li
25.0073 140.424 li
19.9673 140.424 li
19.9673 139.428 li
19.9673 139.428 li
cp
ef
27.4434 138.936 mo
28.6792 138.936 li
28.6792 140.424 li
27.4434 140.424 li
27.4434 138.936 li
27.4434 138.936 li
cp
ef
33.8154 131.52 mo
34.7871 131.52 35.5313 131.916 36.0591 132.684 cv
36.5752 133.464 36.8394 134.592 36.8394 136.056 cv
36.8394 137.532 36.5752 138.66 36.0591 139.428 cv
35.5313 140.196 34.7871 140.58 33.8154 140.58 cv
32.8311 140.58 32.0752 140.196 31.5591 139.428 cv
31.0435 138.66 30.7915 137.532 30.7915 136.056 cv
30.7915 134.592 31.0435 133.464 31.5591 132.684 cv
32.0752 131.916 32.8311 131.52 33.8154 131.52 cv
33.8154 131.52 li
cp
33.8154 132.456 mo
33.2031 132.456 32.7471 132.756 32.4355 133.356 cv
32.123 133.956 31.9795 134.856 31.9795 136.056 cv
31.9795 137.256 32.123 138.156 32.4355 138.756 cv
32.7471 139.356 33.2031 139.656 33.8154 139.656 cv
34.4272 139.656 34.8833 139.356 35.1953 138.756 cv
35.4951 138.156 35.6514 137.256 35.6514 136.056 cv
35.6514 134.856 35.4951 133.956 35.1953 133.356 cv
34.8833 132.756 34.4272 132.456 33.8154 132.456 cv
ef
1 lw
2 lc
39.4434 255.647 mo
39.4434 136.128 li
39.4434 255.647 mo
411.395 255.647 li
411.395 255.647 mo
411.395 136.128 li
39.4434 136.128 mo
411.395 136.128 li
@
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Protected by U.S. Patents D454,582. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 43 /plus putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 53 /five putdup 79 /O putdup 83 /S putdup 84 /T putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 121 /y putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings30 dict dup begin/space <1C60D8A8C9B896187A> |-/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CF0E48D8A711D412E34AAB2732DF92ADCDC95C7C6D97E8C44CE2751654BC55BD12CD842E> |-/parenright <1C60D8A8C9B84E0A47D7FED609B3683507871E5C5015E3549BF91653A329EF8D5BF37DF948A5A8471707D087A577F9EE79FD91DC92667BCDE588EC87D3> |-/plus <1C60D8A8C9B7C7F3FCFFFDB16D71949556271E5F2AA88700268763C9ACD3F9E0997704EFB58B3C8E85BE2CD24BB97B678052C8703CE2AE55> |-/period <1C60D8A8C9B89DB76243241956147685E9D11B558168E06D18275E2338D279B9913C7A1D115D13271EAC> |-/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B27F0FFDEC3D4AC868BB2F3F35FB5E9F1C0F84AF60C7D8EABDB59B8E1F960151F9511E55A6B26091EC60E1C90C277465A6CD6BF415E99C1E3222E5D8229E07EB706E217942A6C6EE460AA0> |-/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-/five <1C60D8A8C9B7BA8F622456C4991FA35B552AABDBA410C5FE2A289D1C4B46CC6EA81B6F378E0E9FBB887620926C1C295BED9DF5CC60E1506BC8F14C40DD7EC5F146AE0B602E11477020F8E0DC1E61B7E5001ACA3564CDADF4245B4EB166D458A0663DB06F2579480E048AFCB0FC> |-/O <1C60D8A8C9B624F9257693AA05F54B3F6F5707D5ED56A2F403B01AB2B44BFA61536ECB93C3E443D431CDA75F7C80E1651DDF58D3BF4622794EC6262BD68BAD06E68E1E6A6884DEBA5A70BE002DB0A3D53BEB04D3F8C5368D696AC6C0C562F74CC4E6C46ADC> |-/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC9666D445523C20D6BC6D45C854A0BE693CA04DDB35CE9C6FCC12699F3ECF3D1B67F9F5777A6EECDAF3C0F3F32C0B6BC38F752623DB2A9617BDB514ED25F1A310A0C42BE659A27D8F2C06C4BFA42A6084F73A353D30020A89B386DABBAAA17119B17F011D1BF8067CBFE17C2D6AE10C51C95BF00F09A50ED067AF> |-/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB53E56E1831B0550D2FE4055F5> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/b <1C60D8A8C9B7E2CE503F0CE2BC5634A8F8728B9E7DF78E9EB37EA1AAF5A6E14429B2FFC30BA7B2B7F7056F226E2401F24ABDAD5426247AC27BE4FA97CE94C91E5B97490DDD42E9AC1499720E52A641A6B5FD3039B53C33A6C3FB59A9FDC5809A26029808C985DEBED644B28F1427AE3990CDC08FE3F67389E1C6D971D03C58C4203806687562D626FE9888BA19E8E374C457B0F0CAD2096A35C2A25CA9F88F3E7B91EC8C23BC> |-/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C66B70D3B3E9B799935A114CCF88968CB157B7DEA63450CA5D1B4BBF8E61AF225B205D414E242FC06624097F1B5D47BF4F384727F53BA1763156DBDB0266> |-/d <1C60D8A8C9B7E7C1D82219353B31AE497773900CFE039E7C34F7CEBE101056958EFFC2C789CCBD8768CC683564B6074DAAAE648B50C88AD4C58AC712C8476BA68C74E592EF7E71792F9E5367AB3C80F9D183D28DD5E961AA14DCB5D9206768FB9E099DA642A8BAA73D52C56C9913DC619FDF3F90996DC8D242E6BF94BEBE752CB2F5D6196384CDD6E5AC10AFB49712810FFD82A2782B9B182DA37A23E6043872EFC1C407DD53136E> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/m <1C60D8A8C9B6B770778B71072C32D83B2DE18F9EFFEDDA9C73816E98D1CE691983731B7222B167A6D2F63D304D344E93EA069603D18629A4320C5F1BC8DCC049DE26F978CA9BC88005768D4CD278F658DBD0215EC4C428D90DCB1C70291E674313AFD07F4ACB4C5152C73088F1801AB89447326D19BFA79413EE5F810BDD4269F23365D24789FC23A7E37320B3F849B7FB9F5D52128289A6456940F89EBCF3> |-/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A36646DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0318D13C761F9DF> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CEF7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFBBE8C69D79181> |-/q <1C60D8A8C9B7E897EED043C74253B54ADD4A83B5A401EE275FD05305D443701C0B5FB5FFB629FD564139466A0D21B941D95638CDD0441A0BA219E67025CA58D717F5105065C6C534C87A1E9460A7EB934679C52896D0325C4745FC1FA2E19A833C7512C47FAFC1F455DA264B132201332D7965A6000B61991E83CF8296E65C72578347B3415411104B5B8018A71A688EDD6AFDB9028F3C25C58A0C2F46C8DD14D67E4428A4> |-/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F89019F8CCCB6FE3AF5C57> |-/y <1C60D8A8C9B744514052D02E803EBAB86C11F12291D9D5A1504FC788087D686381D5B543506197B0A8ADF9BBF970FE769142A069FB8380E5823DCC497A6C0095124D4923B5CA9C6A958F4E90ADD7B82826865D1CD8932D873AEC8C248461B62B69DDE1FA42A8CFA455E382875F1E62FEF36E2B6CCC071B48DCAFB9B91BFAAE28D80C> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PXPVGX+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/PXPVGX+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five 25{/.notdef}rp /O 3{/.notdef}rp /S /T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]PXPVGX+MyriadPro-Regular nfPXPVGX+MyriadPro-Regular*1 [0 -12 -12 0 0 0 ]msf10.0439 106.848 mo(Output Similarity)[-8.30371 -6.6123 -3.97168 -6.82715 -6.6123 -3.97168 -2.54395 -5.91602 -2.80762 -10.0078 -2.80859 -2.83203 -5.78418 -3.97168 -2.80811 -4.08008 0 ]ysh10.0439 238.367 mo(Output Similarity)[-8.30371 -6.6123 -3.97168 -6.82715 -6.6123 -3.97168 -2.54395 -5.91602 -2.80762 -10.0078 -2.80859 -2.83203 -5.78418 -3.97168 -2.80811 -4.08008 0 ]yshPXPVGX+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf206.045 283.68 mo(Time \(s\))[5.82031 2.80762 10.0078 6.01172 2.54395 3.4082 4.75195 0 ]xsh31.5454 269.18 mo(0.00)[6.15625 2.4834 6.15625 0 ]xsh277.89 269.18 mo(0.20)[6.15625 2.4834 6.15625 0 ]xsh216.304 269.18 mo(0.15)[6.15625 2.4834 6.15625 0 ]xsh154.718 269.18 mo(0.10)[6.15625 2.4834 6.15625 0 ]xsh93.1313 269.18 mo(0.05)[6.15625 2.4834 6.15625 0 ]xsh339.476 269.18 mo(0.25)[6.15625 2.4834 6.15625 0 ]xsh190.22 25.7881 mo(question + red)[6.75586 6.6123 6.01172 4.75195 3.97168 2.80762 6.58789 6.66016 2.54395 7.15234 2.54395 3.80371 6.01172 0 ]xsh187.371 161.148 mo(question + blue)[6.75586 6.6123 6.01172 4.75195 3.97168 2.80762 6.58789 6.66016 2.54395 7.15234 2.54395 6.82813 2.83203 6.6123 0 ]xsh332.842 25.7881 mo(squ)sh350.962 25.7881 mo(are)[5.78418 3.80371 0 ]xsh370.598 174.481 mo(circle)[5.37598 2.80762 3.80469 5.37598 2.83105 0 ]xshPXPVGX+MyriadPro-Regular*1 [0 -12 -12 0 0 0 ]msf60.0889 84.6841 mo(statement)[-4.75195 -3.97217 -5.73633 -3.89941 -6.01172 -10.0078 -6.01172 -6.6123 0 ]ysh74.4893 94.6494 mo(+ blue     circle)[-7.15186 -2.54395 -6.82764 -2.83203 -6.6123 -6.01172 -2.54395 -2.54395 -2.54395 -2.54395 -2.54395 -5.37598 -2.80762 -3.80371 -5.37598 -2.83203 0 ]ysh88.8887 95.5557 mo(+ red     square)[-7.15186 -2.54395 -3.80371 -6.01172 -6.76807 -2.54395 -2.54395 -2.54395 -2.54395 -2.54395 -4.75195 -6.75586 -6.6123 -5.78418 -3.80371 0 ]ysh.5 lw
0 lc
0 lj
4 ml
71.5029 52.5469 mo
73.7085 52.5469 75.4946 54.334 75.4946 56.5376 cv
75.4946 58.7417 73.7085 60.5273 71.5029 60.5273 cv
69.2998 60.5273 67.5142 58.7417 67.5142 56.5376 cv
67.5142 54.334 69.2998 52.5469 71.5029 52.5469 cv
cp
@
1 lw
69.3794 56.5376 mo
73.6289 56.5376 li
@
70.4419 58.377 mo
72.5664 54.6973 li
@
70.4419 54.6973 mo
72.5664 58.377 li
@
.5 lw
85.4409 58.8867 mo
87.6465 58.8867 89.4326 60.6738 89.4326 62.8774 cv
89.4326 65.0815 87.6465 66.8672 85.4409 66.8672 cv
83.2378 66.8672 81.4521 65.0815 81.4521 62.8774 cv
81.4521 60.6738 83.2378 58.8867 85.4409 58.8867 cv
cp
@
1 lw
83.3174 62.8774 mo
87.5669 62.8774 li
@
84.3799 64.7168 mo
86.5044 61.0371 li
@
84.3799 61.0371 mo
86.5044 64.7168 li
@
PXPVGX+MyriadPro-Regular*1 [0 -12 -12 0 0 0 ]msf60.0889 217.711 mo(statement)[-4.75195 -3.97217 -5.73633 -3.89941 -6.01172 -10.0078 -6.01172 -6.6123 0 ]ysh74.4893 227.677 mo(+ blue     circle)[-7.15186 -2.54395 -6.82764 -2.83203 -6.6123 -6.01172 -2.54395 -2.54395 -2.54395 -2.54395 -2.54395 -5.37598 -2.80762 -3.80371 -5.37598 -2.83203 0 ]ysh88.8887 228.583 mo(+ red     square)[-7.15186 -2.54395 -3.80371 -6.01172 -6.76807 -2.54395 -2.54395 -2.54395 -2.54395 -2.54395 -4.75195 -6.75586 -6.6123 -5.78418 -3.80371 0 ]ysh.5 lw
71.5029 185.575 mo
73.7085 185.575 75.4946 187.362 75.4946 189.566 cv
75.4946 191.77 73.7085 193.556 71.5029 193.556 cv
69.2998 193.556 67.5142 191.77 67.5142 189.566 cv
67.5142 187.362 69.2998 185.575 71.5029 185.575 cv
cp
@
1 lw
69.3794 189.566 mo
73.6289 189.566 li
@
70.4419 191.405 mo
72.5664 187.726 li
@
70.4419 187.726 mo
72.5664 191.405 li
@
.5 lw
85.4409 191.915 mo
87.6465 191.915 89.4326 193.702 89.4326 195.906 cv
89.4326 198.109 87.6465 199.896 85.4409 199.896 cv
83.2378 199.896 81.4521 198.109 81.4521 195.906 cv
81.4521 193.702 83.2378 191.915 85.4409 191.915 cv
cp
@
1 lw
83.3174 195.906 mo
87.5669 195.906 li
@
84.3799 197.745 mo
86.5044 194.065 li
@
84.3799 194.065 mo
86.5044 197.745 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/PXPVGX+MyriadPro-Regular*1 uf/PXPVGX+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Chris) ()%%Title: (Answering-questions.eps)%%CreationDate: 11-10-17 5:25 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&H!fjZdO>$B!PSZ7-jW-D&e\hfE1Z6h/k&';M1?$3SGiA*5Pn[86dc94#fFC>4Emp".%O+WF`ksbeK'_>Zj3^:U\1n@rqC/,%QK5!=a\bdX75`VS`8c3(MgE]T-_i2TNYO@=P(T4/RaGY?LKBFn,3<?[YLJ"?I+MU$ZYoZBhWkp2c$$S*)Vo+.hnFcaQ$02=`Q*IP%)q>kV?+Hn`%%>_L:uu`Ekqj@PRX`l)^@kfG2!^EMpUf,a!&G6'b0'>$T[Bj3%)-*7h:8I(kHS-;-GWm\WZUoa./B>Jn$h/BK3J3^%5ciT2^Ys/C+69'9hj="b+&DqKi:)WEpP7bTTToCN49/WG?GB_32qkC3,jVbjmX/*J?gtW0s)hJ$k"UOn];g@)RalkX?rrWcN##Df%%6s6p=\T_YWAW1[NUHXMNV^CjUO2ZKXj1lakk6YKrr[n=F#cgdTCg7ETNU_i[i1')dZR1aF53qKS#hFY?YNP*)!oV"rCJME<P'@G%4qL>u3P\Lq7Le2V+TJD:GJ-Z>L)le-lE.,\%=rOGQd;V1)V&sf$H*XD[Cd,0N-nUPknnPnf!N#Rq'U"u>JbQ.#;Ej]1RP2kDW@M>%>%QXRT6Io,RQZ)O"8s>ea;DdTaaY_;0^=,%hI<,[4Va%FFsJMXHq?E0q?.FH<?$HD=YZWt1_-2F!$/F=eUA6*2,dL_:Au9iq7D\u%-,DfG`D9d[:Xd8.@ZcuY;H3S4VlGVM<L#bM<:Fc$(8+C@:].*U=A.8NQEF:=]M6kn3i7aV9_aB]RjQ]A9rs%ui@!2+(9poFLi4&e%pnV$13gC%9X]0B_hl]rJH)3jbTb(.I.6Ot-q@qiJcW)h8a%rdjA&;$CKk'*eV9a*Kpka-47/2W!k*Vh1igB3K^Yt"<'3h2UU+PD]%n.Wj%^TeKnKRHa7df-KeNXJ(V:8NPRI!uWIMIVN4MC&1rDpjbHkUGj42VL5ZcKC#8T`;53NXn@Z,s$[#eFXWL1&R$=E.!%f.9>ZE%3'R8YD`Bd=s7f//`tJ<g=u\_DUpEUkK]89jO$.M%5fbtan2[95;647ZMDpP33cYQj6;HL6rR.#-I*il1+4e9UEQZ5IiS/J(oI5e2%5Hu!#D]Bk<$%3USYmudH''GM(H&#jhp->UHdkI[7:2L7sV%cN0S1jZ-;S5rl.+W+I'Q47;T+O7F$9Qhu^!kQsqt)oI7j4e#8ZA-'%3Q2GETgJ`UqR*l)^(Z?EDRDK_j2n0H9&6$*D>M/ZD&VE(DU1)YZ98^(&]Z02D.A49b2MI\dWXlEZ7M,fpmXlERJg%uqS`A-s.T##%J+dgW0+ukn>%7N/s71I3h>U.K)$^%W(qad>r@8TG'Dj`e\$JH:gV<!f8A%or-2)9RY?[s^mGIQ.AGr:o*9Rerl+GI5r#>SDj&:!;%S5q(1JAHU^?`m?87_VhU.]%Lns+\9<n2,o3m[m$t\?o.s<VTi@XrZYA^Rn+idHPQRB*i[U6(_$l6i6ppr,8C1ODfFBfPctf98Z3n%8(bbK!,pfMFt3Q^'!?EuG??gFYSDH@n@QPPq#,Boat@=F)jGNYIMW("'?CJBA0-YXq!l@!\/Fn4Kn>#"6J(Xk-&/$!IikYJ@mMk!%f'!s`qR"C>&%id%gk:=PHq@9#&,t/p$f[&@:_"GA=K-slo/@459u6l)*M."@Qu0DZXd:;c^?og)50*]19q.;W=i@%oEt5gZ-o-g:%6;TA#4N`V18]ao0gltFOJ1tA**$qs7_,$JZ)5#R.gK<#@.NP0WT$<LXU9HjC<miaq#DR^0\`4,CgRq'Oq*Ss*OB9@\Yd#nS(<eiX%QcZM.TtV`.STq'-e-ME(b=\Adf]ITc1<eX)PW)K$Yh>g3U_4RE/oYLj^DVJmDE=\;k9CXpI`@\QI)baLD+;u9'IK>W-QWRN6pE]p%^/2(KNF?ii3(?/.g=<>$B9ErXOF@F/l^0+n-'\ha\B2;/(Q0$/mnkjno/DrUXBgg+'0o[^1HLI^at7^I8`(lSPL"U7+4N]#g^'#n%dC0-?b!!BI)iJ0%Ge$MSjX%t*XRs!^LQ.h`OQm",74/S-;CNAu8]mkcIA\bE8LMF00G[No:rlJug2f\2b_=)b=hpF5Ei68Q7r8\*%&@R4%o)\.X+fAR1+Cge5PfQA1\V,$cLf8%MLiRO+T0Sn[BGmY3j;`eA77fl:N**EcO^h?hl!K%Mi1qZAqY><Ic";oLdfP_)8-LuN%'X&3XPb/P:qR.u*Cn3qmf&BA!WAuPk'b#!AJSi?$]ObA'gVmkkEdG.#J&Q!*H!7&^^Ve2nc3:.f(f#,rcE.t.n@q\s@)lBEZ>HJU%(c$1Q8gSEj.)f%45j]HS(#a(cF/K_V3*oPJX>B0^aC:\XV/j:*SbgG#<9'?5N;u#hXm&KQg^ghmB*UH;+4oHe[!Bh]A6'AQZAH!P%YYf7QQHKKXJ\tB0HL3B,?.sbHVVM6q&Yu#^`HkWiJpnq?$lf5T5;p5,k$6ms5ofIH\La$LhEpPYn[::_g^4^oT&@4SI[emsR#^t`%@EXD'F6^SEE["#Y<oD@*`hRo<Y&RZN^gmeI4gAjDL';A=RKrE8A/m(.?ZYifNe#9=*0Vs#EP@g,Bl`J`&uEJ,%]+Em\\bjDb4%YW%-h*klC25O/%r`Cpo!aB+@J^;$WI,J9[Gp7NO@s+cDe1;/>'A>Sc$PtL^#BMsNEPe24,a8%[2-\]N?$Qc!^=RA%(Ao.$t2%rNth`_%j&'aD[u?h?;jO%C.2>oAiAp'_gN*a_-eL.+[rjC(NEiDYWPu-\s!GKT-Z80m8hEM-ZmTZ`H"/mK^25>@/Z4Bc)WFYR^bU:@d"nNk%^St;YA-V)BS39L:diC8U=uIM9/Q/dA_Hjo.),#)cjY6g.^0h4i/qMO'.t$K)Y>cb,gU%^PU@ZF"/Y0kA9L_H2W`t9\;eFoi'[Qbr%a6i6N/j8@:GYXLCFu4l5T3H]m0;6n47qC@JFtH0lVHq(%Nd*Eh"h5cD*cZOR[dEPQ[R29$l-#MEPP4Da%Cc&0[,VaH.a>k!KONZM%1,%/3(;p>/QJGt>G!rB<GS_K61M4miT+pg]+i@1!dD'P`kLALaO,?0?egqLaSVLKdEQBU&S%n?fKlB9:oZ\g=W,KgK<^]lmAL?M6%6and8m?Tm/n:W3!R%JjRcLd`RRr]I2bG/[#YKbH3e*Q8PDV+lI&/mQ<.l'nYH-r/.X`uc(0!9'EdCEYt#jonOk63']/;W*P_='mU%A2EqoI5*SDmEtW1W4m\!`#tdN%BlqFFa`+$j2:2@m^6/t2p:J?\0'^HJ\o:][TC\cn7:8g[f3/qm:BSNFY`S=kRUf8;gC3`l:pOW%H*7%0'P9W?Ha_qdn87T_#HTS?g9s.sYoqo4D36Nn*49$-_WHimm;7X<;]:Q6NYdelL8]f/.g8EnAK&ncVAt!<m<>irY\%-RgP(od%GRLtc.tW1_>'t&MmiDBcD:sqV%XXLbHk>J5ej58c[gRa"aR<cKA1B::9XH]<NS#cU(0(ZiOM+[k0R925U+168&JHP",K/6D9oJ!<%"f51k.F7c'+!9Y]gRmKrCY8ZY%d+g@^UOBdI"e]9gDC],fd`N;H$muX[hYt40l9@?#WVC7m%AR=2A]EuBahq;Bf]_,!XFLrjqp.d%,WkBpDQgV%ZT-H,^;/eIs6Z,"1UaggbQrV&&Nc9'XJQiEO.f8.H/Nua?`bB8M6l!"">(F+52\C7q89n;Kl7nj:7q6;Q=I@Oj)uTt%"ar3ikYPjnO]@c(LQ>o1n[9o6_W<hD%Q9'tZo\%rlkO?$R:_$';cL2-nl0+/ZQ_KJb)=+sM8<NoLLhseA>P/(Is.o$F"'cDXdcAD%/\pUPYh=>aY^_Lr+biNUKB(`544,^$Y$uZL:[d1N;Q@p4-M-WEP(dNUqs]%B43g6qJI8l[gsd5n=i\QCf/,T63dPDV\`Z$lfrh!*%dgG336>t+[/I]aYWT9L^`B5V;:T\;n1h;;\]@(UtdC"JF4VKW%SFg[=E@pGkFr9^3I):9aX)6Ad[UJgFX?YeRqq$40gGRlYM_m'<%GV$hO,I2,mOa<m30B$j@eSGi7JcfI4mT^A"L[H("apofd\?*+VY(&6#;s6TA:FETPSYi-g(rdKO.nKD:MK:X+QcI"SLg/hT8$&-+%M?(9;(9lnQ2pR3V.si<WP'UAibc"P%1FCC%V]0Ct^nME\[=rrk'_:/s'n7^r;2]FC3.0rIU3$rI##lAc/6O4)]e^hkchZ!,?aJY_%MA:C-R)M-sgE30/`E.ljG@BUebWAmcL3SYHDo]cq1ja"O9G8\d3?8'p@h;+=g*7fhLqJYd3$emd^j219(B0<iO^c,r[V\s-][jct%*\?$R30`V:8hCdu?=nO9S?6I$*\j(B4LFS1e)D%NQ,^o@Sm^iMj8L2;,>qetAZG@2[?@CbS-pX#pNLfh3)<MFdr.N//P$nOdklE\%"B(W3;^*mlXd]VVVc'bWf<b?5>pH^Wf/0p"V[JT[[;GI?2q&A!h<.Pf_6Q&&ePa^E'*/2aOsqC>N3R06nh'3/Kf(@#M@?Y[da;*M%p6sXKmBnsjZ4H`tCk:=mhJN/f2Yh:]D;RMp<t/A!jDC)b!-smf6ErfM.Lc@>q$86L6WR[,NYm3IETbpd?iQF5Pd4g<*>N'",nXVj%b8qC1N6YkNok$Xo.nHcDpWY^Rg9f)!G\mD/M8aM^[T/I%fieO@IoPXc4,`5:\c#0L47Y:4Ntlk@oB9D4lq!k:I"gsE[A=*]U%&sM%[U8+#%DK]uTs8"HOn]@>&'@A9Z9@LW[TZE#(-'g$TigWBV'-1ePhC1a\SKcf?Fp?"7/).]MRD%[T<k<*>ahD,V'F-hX;[(`;#?C$%'@L'uB[>e#8u5h+go=dd3W6#2rl2nV*`"a[laE;M&,ONHRln6_pBR816UWf<5D+-ohJ9J^Re<VYB0WuX^Zq2tSh8G1oe&AkAIDdg%S1VJ*CQ2r4ROqUu#5rlAUu,k:lIf*B/X!fUhPejP<RP'ZqUXlE%DL_hom^VTFrgF.Pr/K[)m>Ga,M>,+[4]*q[pEpujr:[&6`AJ<%lEj+RO_gN<D:?(5Tl/VbgSUVPB[m-c3j>YSZ3..FXnqQbmq->8@(i.["+4a.rHbr0UZg7cnB?OOl_)q4pTpE*(GX;4beb=VeQ2(F%$!?JU1EiF!>5#)Sq7GDVq!;Yjh.j'PVa=oC$s%S?<kD_>^Lmr9ltNY+m<qI*U/#dVqeibFFs[.bms6M]4`D3-L?e<dm;D=)%S\fa%Fo;-Kg3XbqnI)NsKlYcAc_0.46.XciC1Z`2IVW!!ae(h(NONX9?Ei:4Dmj(pLV`a&^f8q#g\ka_]l/CqR&Ds5N=Lu]f;ZL7ZNWB-%"\*=p=#o#))JR_%Uhp"!r$$e&-mjrE0=4IEbq>oJ[DlP_,S1>t(=)BN^YZS&3hte&[nRtkS79</^6.P%g%P[ZR#qXGSF&R+m2?TC%R;8;<?E:cN"X*UB<VrEU5n?L3Ot?qb=r.)i:s(1j^m-?`p1a?:8?VhjV0uP3PZBg[g>h3WV)>DiNGGeeC\jua1Y(eKZGP@<,/1*r%?)744SQ;f*&Vcr09fY7tr>`1.WnkL8ZT@:P+1>DHYO#I.hMYX(alsi"_=LZFn6KC\T"m^>M?sknjjmWT&"?^]4qF4Wic4h<6[#tC%G5+LPJB67og(DCqhG(@RCVSH(rpJ8\&$dfD*fnHh2%-porsYo%pnDC?X`r]grndb^,(<&d&>8\Gc8^90aG,Y4#_J`,W&AFNp\-3I%oUD?UPO3JH[D<f<M$C?>7tCoi)eSg9]DbZe7V#H@JlG"4MTTNp>OB36s(5)p7^c97p8_%Zc7qoq%fDrFl_>M$EY;Dj!c://rr)fL%DE_^tDg$F6*P+^[r!YPLK*fGj9Hki)Ht#412$`Va\(_sGp07"Q8:k4rH3NYcGWL9O"-P8S9s=]rYKK5,?dD[jSRc+q'psc&PWjbe%a]JIgo\65=Hb9/l^J7GFXhX/GG"65s.KR8@hH%7Zd7p5jX">G+;Jrmie,YbY<WsJrD;/VF)Qi]tUH;0]=$<TYqUO7?/K<O&jVsd[%duEd;#JJII<P.(oRWUg">%bgM'^PdCoPm?,BUuR[JqeV](#1qe])DZ??D+`V&+K)'\b0DHF=o:I)K/q&GW`H]U<gh&/0]oh]l0C3%KT\-UP]+hCjkjGiI0[07fDmX2"%"8"a+h&$h8)J$U6hM&:7\cFs/_<NQWA_Wb'd.ZXfMZK6odaZ;.*fdh/<*s;)K4/Yl@Vn1a6KV%=XJnokn6!H9%WYWDndLoTI_O<pG[I[J3X#udD)Edk]-7R8W))lo^3p/,0LiUDp!<D=[$c(dI5/6P0nCsLPK7Xg!<`EKqeo&11]Qh%qsf"YrX9Qi^XOBl9XXbAF;9ZG.f_-rQ],N0ql$cpM4L3S)^tIh:uk_;),3KC2>E#58'GWj)83Wsrh?0bg@X]\([0HRn@MjlB*Ihg%!W0]Y`(rS"pp8#^TMQVt:e)@.r)k#37lsg4Rk_pTYMmO/#'2pHEl<9S,h^&'-`dFPX)DA\$(6]+as=VXp'W3qJqr+RrruCQP!*W4%:I;bqLkuA@(oi4#rs=d4;Z3a#ij+o1D_R;u'nS&m'?&4N7G3HiYpE=bAZ;N1(5[X"p("hDJ1r/d]TH\dX+L?WDD66[p)<H_:_5qX%7>?g?4F<!Vm9#qK[`6/A&Mtl0D.j?R_F/ED''1N"oD]-6e3uOmZ%"\@C4>.cNJ'E,q0,/r=VnJXmuEH(g9nNT_mO1;hr!A0f'4bn%'Qb:ti"G]2T)mnpX8dC4QpLU9Xg_)Fe[flM/sL$m+#%1f`K1#UW$h+L@^4I1ri=c?XU/H,XSQ#+3T,%b]]W4s"^K(.;j:?Ws0'I<%$f'2BLhX<T^?W*[R,KpOs4MD*2TV;hEept$EEq)l-Y*d`a!]H0dI^4k#rrP1TuPug^,G:c#_1p:rbl9<e\=GW3`c1i;`#!QD:%UX%^]1X'm%:&jeQrt"(t<iH@U[CK+6O#^jhD(crti2Pp\qAr@Vu#bAqOErnb0_'(+Y-2dIUs6R_>Y$S,QprXQ)W7Qmq/Ts0G$O#QCl7%C86OVY=>Yo).ljLidZ,Jek,T\7eLtm&cM[#*fY;ms+o)#4-X.KO,kWVh.a>#L@O!cK10`YJ+(j-iPUUhpmqEdm8([WAUDdPX-3o/%ro<8cPgk1$K^X6%=p&PR=ua_TiL$gRn3\&X&h9fmP`gZb0'gcqC;88IgW)25rDJ\=oqFLJk#)#Xg-ks6X=I>]6;%W3A^EX]f5$A^%GLX@C!J>"9Xi;<1cA,?NQfY.\AKdO7U?mJbH8g0$XnV,ZW9s7LS1b9IB!bM(5b26AHdEJ$R!eJ07^_!#D-+?WkSrAC@5U?Bj5h/4%DS93R2#UDr)L@"Un>*#,ihoWp8AuN'pn,-6rL"q7%0]rRSuhp-m)chRW"ul_$cQlHYA+U:etBEm9iEq,5t0o!X$n`EH2t(;+JN5F%p=iYqd#WY&`Q3S0%@F22^CG,3M'L=HeKcd!&VB%hmk]8e`N:MIrun<W-CMRKMG5i'JQAMT*Zhb-QNoEJaT9HHT\k;t"[f!i/bcm-%<j,F*#(?@f+DB8TH8q?`6=HX7jGX@s)d1c2SEuUT6MfNQlHu[/^\cE!XjO>d2O]X)hbGZpih)u\lXNciW(51f*Br:sEPOjA.(ZSL%H_!')iB5.dXjbA$aJR[-oNXiBe_V+3-d)q^<,4?a<##&$KgEIj9pf/<@`UJ(DK5\\ZdAe1Tl9er..24mF)StbN=JH^qlb=TK)o:;%N33tI.<'K/[+FcT^ZlsmpL-P$d3Hkf=LCdk\FN`"XUgWn>&@;EDd9<c\I8`M6)8uFp+(c-PL&5_^"\15_GcIS^u\e4>H?A1V_X](%C%oYnbQ6#C`^]Ytq_\J/J;iqt:$ua:TIXEEO1J9B%TPmO=.@Im>.q+/k7phbPmdd)[fgi#FW<b->dp6FfRtT+ooAoDre<,822`,f%&a#bbMQ=]n>J\FU/o%e2RYs(-KP]DV#"PVQ1).*g&d@\/d!R%ZPIa3DN[!MD$^!OA[_/;6.DKG4-oLFKeEE"\[.Z+i'gcVdHX3SK%GDT:S(oAr,+_0I(!IT`[/GDf4;'8BPB:!%H5V)^V@CY_SA)BqAf0rrlC8$bYX,i/jqUT>%NF68:6=^(5,?rX!U^f3kEDNdqbg^<a%KSDLbNF3cSNRbLtd4k$2C>\Njfa80fV\Zj`)QgF(Ycoe3lZB_+#2[.]_&\o:.e_UjQf9$"JMk&_bQKK9i4@De$io2pli*s`rna[\%_+CYT\uL#_a]cC0ph3Z_/L4,+qT>>FTGC,<p3WQ;%oKOaHYrDiX.A1KZqf5l'OJ3)RU&`r/J,XEZs3Yt`L<*SI`4AN"6t&FR<BAa%]/l[5W;$j#kd0+D+(e(?e0=`SCs-<$YucI[=m]``6e;.X+1BJ8pK%R36nmc@E=[>GZB%/<@GZPalSn[kr+?_gPNoD&0JnYq+U$s9%3Z8qH:q@mOFbMsd,H;BOqmG/F"`ZY*"I.GP^eH&mK;5^u,!scoKLCXMU6s;UX-:^LSPY*?C^[]!FTn^2e/"bO'(F1$%XN9%JTpU!%!#NDZqO(NndsZ/DJsa7#bFf<q`SK[-AC8SN`'he^"]Y_c4]M%1SP7WeOGH?`<V%Gok^n+SEX=?e?p3eQppUM5CsU5nZI^XiC><%X%p&'/cqp'/QlL"K;+F.[&D"g0[h#N+\St[DUJ1dK);u@k?Xrp7:Pc_HUOT<i:,Z$)hqKK<rD>]+7#"gk"^EnW-r04QUV"q"R\qBI,%&W)cDS0G?/idf9Pl_1F<8tC&g7]RN-o9\D2HIqGq<L\-ff#W.<lAJ^.1uJ9B+Abu!XjmeG.FdT@RT;8g=$-%n5MCoS6s>Su10lM0%]g/FrbV:E8FaA[A4t>)eE&GHd%WJ\H`bPYsLd:4VWde"8#cOpT"TtqC>c0$G^o_X=]dFl?m3c3a>jhj;V[ete[VX*5)-%dp*K_($%d0\B,TF>^^h?$@Z;P=m\FAeej#kW->3#Gs4Amd*i#HbI3!eJk([TYeJk8h\g[73_rOQeZg-E].kRHSMd(#81k+,&feipug8lnKCV%9,Z]?U1t7P"#"j#lC\gDi2[[>fLpcsF@KUW0oj_5LnE/r^DbP.Fqn('6U;O7(kUgMbO.s#E`r@AILM+9d:q/>c8aA.Yb,k&q/pRL%7?Hc"<U>B'Me'(t/A]t)iNfu.DePt.c4IFQg=0I"WNDZAXHZF"Vc$`kI22c[EpMnhWqG<*qMRI<;n&q+4/I.BpM4^H@\[+QQgQf7%Vb1^a6N;uje\-sp8p9GC&s&kI^Xco:P@%oQrRl]k0CP<2C9W"%9-<&V@Oom3,%W_$';Tt,<_T+JH:mWCJ1H'0[SC0feK%"7oO%Ih%YP"0I8iqO'8i?LF[.dfY7cN7lk/M0[h)RLJ4u@VU`npQ/VUGI/].%qGIn?JDQ2@W)7Ub=O?7t;CX;?$<4B5Wh^4?3CFMHe_!G0b*%ErdsQ<9^@5mB6,bTTf#^Pg*L^@G$\7N(X+>q;)$RP\Q+3l1rhH[eh?CetHqjOP8KL/Wt[KGq"/QZ9;\VBDek0JZl[[Gl,59m.@R[%FSpCOh<AhV\$imJ46,#YmtHt#8DMath5T6jgl6Z)\fOLdHZHdbh<C@*R%%#TQgINmEP'u^;YkXWVc2t=;-gadHZtpj^QU.qo!)i*%F-W18M(dpCOsaRGPq#kE-(ds*q=rWSU#=PeMmPSGle:b@`ZfN:]<],Ws-gLi7.B6/Wm3Xg>?Z'@='b,NCSXn%`RhD::@EasT9OsA%lo$jdX-nau`c3^:S`\WnV"B#IinLH`4ItfmS_B<%]<-7+0?.pX3j$'ZXX.9Gm'Ki=;Z/Z4",sW0mb?T.?(Xd^QL]r>Y>2]^(HJ'\%Ccsn+FXgD8ntt4lo\uCkL!,tRRWk[?q^8B6[!1Ihd^_tg/cM$K\b,/D&smdjK+jl^lLR[AO6ol<OiF]_?KZ,*4'`moms/Ji/&*)d%L/.?28DHAZU\rD#lh#WPiTaCW4SlX_SX(A4.ZTYjg6Ra?b*lD0Oa(e^n#)NPRQoCq\*d"PQb*^a::J!0MZo_J+-P(6C;!+u72g4j%pi,?bYZ=Qo4Zg?)hHKO<o]1#\@)o<HPl/(IU3*_`B6YVFmV%&gq=.WE4?L5:P2!^A?LMKMS#"M(ggdF@dS36fp??ZLH1Uq,V;U%k%mFLU/=/R1)Z.nI)6N>UA_2gV@l1?Iih<E&Ga.KulqQab3:]8KtknNg6n6!HO;N#aJSQ;QLo:L0o:/A?_h1n>#kirk.+l/IaXQVhR%2YLUh-diUoZoZgrFY_3BGB!G@_bO,t9QN80QM`o@IKlsV/T,[d@sqLo=C@\KREI3WZR?idBV\R<Bf!$Wlnm2YI2pI@V^lqgcjLKu%8"&#i]O$.a[sLK:n?HiY::CktZjXRP6KN<GG5B]q4`I&QH(A-ngGj^iT\Jh;.(kjInjeUfT[V'!h.a@'Q"6GgSnFQ<h7MO#0<UL6%eZJ/4,LS%76H;.ed*l;CcEL5]#f.nNinRi>HlkCLL88n"nCkHK`RT,"V`P+(jSS8<`rjZNK5,4.g4)fhI@`'.b15A%][p)LJP%s=%hcVAd;_JH`pY+'ePm&%t&!>,lhIhVE19[UXDZ99B:NJ\,Aq.#A2rr4jH1/6:(Lu3t\)h\'Vu=$@rIap;pX;Lo.2"j;V6kg"F8boF%HZQFPoCVPNCc-^Kiq_(`q'C)VWh_d3FsJYAF1F((<+!;@5*S!SSusGYMX.b+Y,<&TNcp_,(V5SHT==RCcUIftdJN0JU%2h@W@#<N%Sm6e8rmQ3HVgP)nrV9K@=iKRgpJ6.tX)</H]mi)l0<-Pp>n;lW/O*@e4oG$FcOH4r*`&h\b/R[I?h)$9rU-K0T0'0%^\ocJI4kKO%TC[FK^HJdV,[r-*?;J2hNT]n(>hqS>,k-(kppm]:IsSj#NDG=_:q,rlh2=EJPrtZK?<.`_nb(NBGrgU5GeT;FhS*9ug2CnQP3X.3%j6I7"[;#%\r#sK]g3Yh1>-;#bb;BqrMqIUZRN+te/oG1`S)<.*51crHM21-ls#NOIZPZn,Hj3g=mOM(?gY?Il!Ap.tUd)KSm'4rA%!dF9S5b&kS-,$Kdh9KXP)m;i;nE.mOmUVl/ZTG'9D4I^^B4mniWo2-I'ug3h2g':M(G<Ei]e=Pu90W2r3`l-jinLG3g!NTD3n<E0%95:GAcZZdX:@EZ;FLiF?r&``jmG;'<Wb>ZDh&:Y35Pj<#GIlON,5=ar1j?JQUA''46Kkeb\2\DN$GEMuY>=M&>mNo7lZdWB]>++/%FKY0X3OmMj/b'j/3X'F7I"te<:92+"U,BY8Xnn'C=<tVOU-3PaLYfDo.CCduA)1L6c)R9<>D%#nraHO\18oo,G<0)Tn\.fD\^QO?%LjImno2f1Y(-#o!>.ttm\QB[):+&q$mG8/GIe]t"p>8&"%*,Hgn[k\8JE,ZHqq.'bn-t3bTjO3\?\nW%[Ktl4l(Q2VY$UGpTW@J)%:82pnNZ(4X45%r+.?5MA<X6gN0GfZ@!'Cc<H$SRK"Y6RZ$!Zb5DO0>"#=q>=hI_<iU%6mr&$Nj)CW.n+AEc@;a2nQ!K>Z)EOI]Q"%.&Ah/eNEqa!oA.)cf"+5C9GB.l&Y=l5>XKZ:bIj8NVV*]q4RMYnJ]i59e&sWI'MeMd9nfZaiB,!PC&7,90PK/)IFaBNf\Wfmn-nB%B[<<^F`V[fCAuZ%N*ajQ65gda+[EZJ*/pugo=')"K!C8gXFS<.r/!QL%mfVAZD@5kT=_=lA^cou0p/cqEckf)D_0-0iB:sTo$j%V%m02N5&qhg&kdaKugnL_E=R:ha=JL(tSk+7iD#>p/jept<eV*4I^tlmsAs@R]Abkl'*s`C>m:lKC&;.,Q\1=<ZIHVucrOF]J4#D(g%mI4ejTfKLt7J5^=BN-W_*qBD$W`Pgrm88]sjqq*=Oc7FeN8CHo:,Ob85X#gXr)h*$,`K]s%Q]sAB:22dXY*Atk3h7?6&QIRSd[@B%X,124>5I"uR^>?%WIW!GR>2?5GrGn3kD6rl^+*tYhc8j"IR<O00\6n/Y#_Vr5'*,EVs+GU/%Ob9(9d"nf6!a`jIB'E?rE'hYrucq%3d3.PdRNr:S_A&!74<HS`s4B]8(m]L*dA2N]p%ri_VA)L=A.BG1-2QeJ[_hpJ[.28kh/COltiZ\UR4O(N"0$mm5h)DTU$el1$A;S%(lWArH1O3"ru)87(61%0&gVNN5Zc\/KJ;Y`^X%0iOL?%qLRg_<PE#t&kJ:&hc0q%9;'oTDq<M4a9'):"9k1T-C,m-683C]uU\p,p%\/];DUbP*&++KB\<At#=3@4'W(ir<VYqa6B>E$pnS\+b6VrP@DXAU+s3jrHCEINS=^H"W$#R7E?*;eC[26S7p+TpKR<nMJ?i_sgX%a.DiYfJsqh;5UD)__^!'MVGXLT(r*5$1IQgDO>9$KUpr*n$$4'T<W5+Cn]e-0-R2AaMi3$67jKZ:e"$-0S$ZMbDC0nMX<DHgd_QA%.d<q,G4(rCj8%bX8^e#d48+cKXHH$C$Sf#Z..tXH^aH(c:KMdb`t0=V$j(>!S1dEqpfKdU-ibe:'3O\Kreps[N,N]@J)>Ht>H?r-%_'k@t7!bhNgBsY6)%K;GN:eVq]h`o36j4!E08(:CIL2$WqYB3%p8)tYmQLc%7Rk^3W?7GFIGGt,,pBS$.?N'l7E3M?ho4M%a5hk=%#d8SsFQpTci-l9$TND9JaU>r3ptG1(&JB4p'a"W7SDk)'f`TuXkEJ)XQirjKKFMjmjS)\A#=E6OK(-eSJQ2)dh+$Bf0o<+:3Z*O+%d7$Mml-on.-PmOQ^1\\'4Eni&Jb[3"!'>Z")CHg=EmkV7E154b2-FsgdYD^=g55_u4G5H6k$[k0IR;h0H]5i%^Eth\&pE39F6HSU%Wm_b'9+e=uc[]@4h)]KV3aY%2Of*<7EmeX.\of#p6OY@U9^.<bV)OM:kSuoB/q#Yr@Y05dO^V8QA'6'>o&JsXbEf!uQrDN]'.N,D%%2dXOAME!FF.JMX5mU9"5(UQE("\h.<^jpGX0AjF(k//8(*%83`h[<[EfnGJmD5$o8nKY?jU#^MUYBcLP%-aeYDJHdVWL.lb+h%1%0?E3og)3iX$3%Y/A'Ph+Z';1sI?8.'bEgnZ`3NOJ0T^EfQbo.Mn:In@/c,7GnbF%7G?5qb.@?`i\<h\_8[N%>M0;%r7.Z=u!,p(H%U@l7UX4?/\G`TlB(O`fr%(UtCN@E=\8k!\20'B+nrG+'C2?E8RO"\nn@Mbi2kp>'VCt;oa43tW6BA6=tJ"7nH'Ch&uSN8*6:%ItM%*D;1E2Mu'M1/O:P!T%()D<_J?nKGiBX1K<X7lpR24A;Z>OL6;%j,$oPC`FTkGi)THhKQusrSV;MpSFKe,X/VeJm/^_i?ZXgG2.i-%=O=icGWSiBJKV(>>(XXBmj$TWk8[imgiG?(1cAsq01ZnV=mX#)%<&/Lmi=gmpd9/^F<2NM=<eNI--&Jj6YJ$0qrk'g*M*Ek2Kd6?%#W#FeQsP^,NZZ^?e7,o9f_:D,QnFn$Mqr^4pKjsiiZm1aV%&'"+dXn5\RT1hD<TE%\0X7SlU'1Gd,(+G[Njbpn%<b9XXhB8;t`*X%?X!NgqX*U/3`&DX1,r`ocGBjF15)LIAMQ(XMBP>h]$Q[".]O%.CRl;X`P]tHQ'T-*d9T:,%pD+"<l"K4n*AOpb)bCSk6B%t8LYs@%?n[jUb'9k]HXF2A)c-0-9Wu,0-d?;eR_QUen(p_+LWU1P"ePM7h,gh!'R%Z(&XrQ9Wto,M``g'l`qlBcGU1;G`0:.##+RK+PjI%O%)q^O=M,DK-"#f$<7GnYU7MFGd5Qujq".79[a=IO+)[pge\4;&.fdqu<KmYHMq<&AHj,RS!`lbVh#$iK<RiK#t%(`-kTa>f(JhuVh%pH!^4?#U!R:q#:A3HW(TFO"^=a`HZt1[$%Qg#UK`B@+2p"XhTh$dPE'`+P9$(S!c]G'D.QLG$(XaaT[E%UF#XSJ['M-AO35K9"Vp%UN>Xh)j:.UbW9(]G2OEds%K*QT<UZPMtESmG"6E)hKVbJaHmO@^+"9WSh5uT&K3j]$[=]OB.pgq)W052s%]o*n2-YH1VD1Q3FjmI%.RXie\],H4=F09&&IWc(k$7]OAOc2_BV`6UF%1fCTD:Gj$l/ikE69.i8&n;l$R]`XdfN`8p@aH35W-P^&Bam!RmDLiB<sKdpPsPH%'9+rX5h"QCFYbf+c++L.]YGZA0@NCLH*Wq6ZAmU3)O]qMd8ggVZin;MXQtbHkt!`9S$K=;W88W&1$9<'n6's6c4uh+b:!&*HjhI1%WcNC#>9!dD2rZg7E+hQg^.G23V3nPN^9B&FUOE#sf35UjO1@VjUB?:Ni@mi?f.2DcZ5'Dn_`tE`.gq=&<Ue68Hft^('BA0D"Wq"]%HCnJ[f6<"T\ED!E>5>(nD>(FKHpA#mV7e)B!0mL)G\cS2c(DO#C(L4ZH$laPZNfR4aQ"5-'B;jsNZ;BVfO\hVP\%%Gph-I_e!O(7%9Sp$p&RNX_)"V)A)1.H=U.pM"BAb`+*ST`,hs@o?YmDG,O1gY^N/Z;8j-B`AEc,UMf75GlHnukJAGS$4]DGe?+e4oj(h[b8Zl@ri%q4&%jm+fo=:=B?C@<m/NUA&EKZk#pM<4N<JBR"+,hrjN*E?!1"UXA&8`98Cl?XsH*.Z?\aOQEbaI,p-,g.=7c;L.Q@At4&*rhuo#%RP>MDlbbN,>2t8fL0Q$B.0V'>Gt8tUN$tkIR)g<NOQ']d(7%,GMl2"J/@u+afe#W^!#68FmSt5S$1JA8:a@_E1X6d^=$AC:Z],]^%#lmO;:Q#BffS,7)N7sgD+t5,E,kot4>Ok)+'p2?0bg$Kd/keZF90Sl8I[AbSLkq"t`](bOpcb&l,3-=O5X&GAIV9c7)1-Qtpb]AJ%,;L=nK'(CT)hc2@)TkUA/3e'CLl>-"*t^;DVgZYI*5IOTMNYmEP1Ufa-(;$/a%#M:%q@/7%VLof\90A.mhc>jB[A0_iG=*,A8#:2%B:Tr$9H)VSEr8XP0)a3Y%(14dAGV[/l[iKPi2F<"nb+_amSH%T]3d3NYKk^=JXOBM2i*RV3r_RI6qRru<=aDI?ZL!fLU'>;N\%3o%+sYG.S4,U]h%):c/3\2?ga)'DNLpaE]aK/;q/B:":^rs+2e%R-N:Pq`9V.[T8*.X6Sd=Vn5B,%u3;7;=^AKqEHoR1.8$T<:kJN!5%-"$rQE5K8D>P_s%&*Mo0q(1i>,\>C-3`j$t-('3Lmtl-,1$ig_L=m5#ZqFj`hS5XG]cMl(aISD;gBlRO*.!;TgMo7"j$7,-A#,Z0%F6mTk_g\rd*r++qm5cpDk2,RNGX%9!4dPXmKe57ra2*G[m6BHq?8K]Z3pfG72s>Ns2u]?-,KG2bYl&`15ru!g)@(Z9J.:s/1H>o3%ZkLB4iOi7?c4k(C[K9,^j]OOL*WPeSn'eXk[om3Nc6HpjSVAIL20<"HN\KRP@:@h[;``!n(,Ad+B9A>QpbTgH<+p)k)6&Z]1WW+P%kHnB&UfQZ=e%r/>b=I>1VNRE8^0%=477KW(krt)rOW+39B[J."hUb77,iI&!EAncoM)q\ooFMtE-:UZs\@<;IL%CR>1JNQjHYhc'%*p4Xn8;6Z)QeA7Q9bk,GSI.<I?TDgMSEgTXkO(Qt$Ki:,R!C0O?[OE#Ig5a*N$rY9T,`sfjP1k4hML`>HgH2n#HD4L)%ReoT04#8%J;fIJ%jIX_L3`/H%iHF,EP\'&?HcqI/`?hK?,/#+Tbs?Q98MY@(J#\u6AUYJW!=(=3iBI,H'0sBrQ#/1q=f[=I-F_ok&NQ<h`301%Ir@Gf>a<%a8A)Hr4h*)gf+0K,>H,fHNV6";LVJ#YT]T.WEq`\8.8-.O-#+*VE3BgK^@=a;44t6fYqTUAX<d@I\+uNj1GO:=8-.IM%/O%te-+i"/At@o*Hu_K,*P#5*Vc/!b0@bOB96M8:@FnBT42l!CI65D@[6OS0Z'*B@4'/`BRAL7\3`Ei8<RY!HmUS8h+LC=!@@'Uk%AD#.,WYs\hV97cnR89`*+(%-S;L7k+G'a]kG$E>l45E&ls(-C8F<=lfZuK@DlguA$]dJRo^7Biq/!mFic<4GG#8ZgDfPPeajc+)T%H>6;teYE'%Xsq%8Y80I3Qs+A$bI6\h1#M0LL8aJc/U8bo@aL_DO]u_Z(+c+Y901[\8g-)PKhLgdE1O!`c)"d`7u7cD\ag!*3+>*d%n3.B+H_&haEaJL]H(LujeP1'o7cB(34e"DMZ5ncp,L-mFmct7n6uKrW^):3#k;tl"Hf%0XeK"tEaL_XC,<`tG9#k(LPM[GuSmU3H%cHGt9mMbKp\l"UHn[%I,NPg^A:$:UCfMT.]A^bqddWqGq1JKcu=%ptn?`)&Eo?*o!,4ff5ASg7pp(M)f\^9?]Xe&BJSQA`7:C%h"%S'K3V&#YQ1aenZ5V\+%4N3_]\Ep6gZ,;[E<o89k6c\7iW2P!pNh=b/fPt`'6cIE?0l+D'$S9mb=O\P#8[)q[\1n2bu,koF#dq@-T%c!M_[Q?aAmS'GgK4Ej.ePta3meAs_*-ci1V[k26\9fEj--I/J-D@4]fRrpXFU_k%(S'K3pMTe2PcDpu/><UGO3j/`31XDri=tLWG%"$^odSQ@G7gO#JTS'EO4bdfJaMekGX>WT?CR6I+c$Q4uZZ=]7o(F#&Y#2+*)\T@lHnP/HPDC%n\iW-RX(],%X@Y@DdMn/?FEApCt%`2Cu1Jm&ts^9>fiUd46TUAO3WXc%.C)L8ZkK1IRF\b!c66PpTt8>+JA',5i#T"T[n"t>cb#^*c7=S1YX'&DBK+!R=@/=sL4;?TRY%!'JfLEj$^ObNTUaX?D%T3)tRN2X>n7S=mk!0=i)IB?g=B46JV*iCrh4YIX7k0F&cPLVmG>(Qc`R/s.d9RGbpYPM&BK;\&#!!#V1`%\L#0OG@;\Q#NK1ciu:i(\EGP=Y#7"<RQI,<2U4Kohl)XJFe+uq)Y7(o>]gNhQ=mJ1H6+R3Fn?Fq(tr_6l<Kq+@ApjV5bHWa;=?oa%&_@bVVU%W<T77'%F<gPZ7RCZ'qJY@!S!A_ad:]bAm*I]`kGI;o2f''D3Lilep?epE][)?'>OTCM[EJai._'[i?-[=HeE&6*6X>H%%%5hU)o@\=ijr9HYR%/IOKXB`c*-`_m?9=@M4GT7kg6n6/8LlFHm?]7aH=n%.Cij-'^^]Yu`*2J_@Y&T8M]9K93rGt-fN>CCQA+L?%o4)9&W1Dn!md`g.TDGi$Pp,RB%59!Q>"cGN:d^ZJP,8h_\F1L(l`j.XJ=H+AG(Ut'b*cgWhR%\E)91Y6hH-Y6L.5f>Xt<Fb:)&IZ%.@t4\R^=kW5,Z^i<^T@k:HC!"4c*ZT`8b<gi'`;S=*W-d=rp:H=S`o'R1bYlVn1j4cEHlSj)-&!*4k*Hnp@FX\`#0V)CKaabp)ba%Pa]uoGpCrhoM'Tea\23:j)43\Gol?9Pa<*HU<0ZY\/TGFCO.sp2>W'>Yc!rM-C'uEG-UEQrn_Gc`7jM3o8$Z(8GL-WlJ/FQa<6-L%lH"@C6"96AO&pN%\E@,EG/fMRH(>NJmE?]X(0f`:SUu9pdI$_$$R]ho&^H(%9k1aT/&0nmUH?b$d?ipO#92Mo*S1qlIIf[*`aK()%87Ho5\pQ*-()r[]1mARfc>=B[`Rf+ERsHlV^m0,;_UN"WR%CoBhgKO[&edFG-8AYI$4dLs_!$cm?lmKFU`$/"Y\?e)%)ZOd`FTlq%0?)-@>nYR>]_=8lahE[QF'NqW5(-4An3"%KT$Znp&N7KX$G0b71$63FEP_]22WYgHSA^."g:o@_E?Xgh_<J.MI-hN2(Fn`rZp_M:%4CQBtoc04VC3-SCXZWe3ouGP*lG[Xb99.I8]rS:5I3`.q<Oojor@3$#$[_a#6#e:D<\3ZL%riQOAVVe-Ggcs?M_;R.@Ctqa+2%1'%,&p:OHO..FmX4\$,UGrE>\`Zne1V,(qco/ba4d7]Fs_&$kPk/:.^c?rVc)VkkM3,e8=\PS->&+F4+.FHk&/-P3d#%kFaL0gSe/MQ%?Z_XHq`J'Rao.]%pnjp2#;<Aq&ftG>+F&>%>I\b"Q%nJ5?-bOZLS2l+DoE<@Fm&b3YHE77>s,-:f).S2HZdL"I5=XDmsG]uPtrHE%I6'7Z*1%JQ4$=s^$6"2]YU0I&r5FgQ=,1DF]AAup4grt2p\f=NWl866N7MKRnjrL/3]Z5$#0ijRT*"&kgKrSdB\R'TShB3;`GDe"%G5k[+DLNuof+jM]&JG,.Un=k6d0tg2TZ5[mj-SDOEbn3LWuamI)loJ`fFX1@ZR,>]Zk-1!FYh3.BtUQJ!=<0%P:%a(8fP0*PO3u3%78Ib:EDF*SV_l\bbu#TD8^i<!66eYk/hI]3%S?osNt[Sr0*1sW[OF>VHXiW+.aoGB]Y7/LpLSY`EeP0.^WU&P0*>[fjP785S/PJK%fq2,"ddQ`8<dA(dO42.iI[=\dDBmB9f95fok?:Xu=a'6S/^NDf>0I!URkH\JCVe$gGA2bfO1@0.]IIcBenfKs.!WsE--WDFR$E^P%+rhRX(gQUe1IkL[_H^I25h<4?@96bY4+a`1CLtT/&<72&];&/-E8)VOSp5*25WOjk87qKahjG*<OmKRSS-++]a3Lq.A\:$tYoKRu%r0O7>]'hWa+foYqUnN3/;ksIUjh5:VVsBj's&?e5k0K0&Z*\MW1,ECLagh!B</kHV^u`eC%;9S=jhKh`CukOYi<Q@+&nC2X0p_EJ%Ca`S6fK-D8AWeU[YW77%*ShASLkTe2q5G9]9oMb-%[@-PZTi^NTR6\9EWCe6WY8nD#3Tq6Xc#o@"m@-F?Oq4&+0=?.9lm'N`Rpth%J;u&ba8m:'Z1:?(1cO\+54ShZJGpZO@jS;N8d`nkW*Ip&fU)/gFX,YZQh!.TbPJ+hjn"?Zbl1MSd5SAUi_hu*,;7:G:VN1dOd3lT%DSVb";Eh94h!?]U$bRR,As`(B]t\TF9DKQ)"U+*=pZM_/l#irS@%U[%AoT^ChWm+a9WjeS%5ltTIa4Xt':U?$D<lJN?Z8uc,KFPn%Hi72Kl+5D`d^,Y&p\G%`KmZ&R1%4f,R3?aSTAS<uj50)<MNXmOf.VA]L_.+cl<_4:R9VPXf8jNaq1WlArA*KJI_eAj^;"]oHi8P7%opb.L&<D2:Jd:AM6Zr<RrB-u,pf-hkme$tEETV<XZkGN0duSm?Ns)M%WdF\r'cgH=RDHRc_709#Glj9"]mdf#Y0S`aZ1%AWg,3I!%l8SBaHo&ih%tCciE%>JmB5k%]n:HP%UO0"frIP\q4Yfn_]%>8T6&"4]kIR3mid:WY\&!p1qXJu+';qb4Hi8PM=i@/K-GA$WF.L<+%+fL_arOmZr)m5_LWKZ6*kK)O!]%(`_S>utboa=53^QEBeHi4"km2@F!(AIY/Y7?V5+5[d1GW>0PRm-;Wqc:K%ZT5\eoa>(Mp>9^K%hS"BSQ9<E;TDi03i*6.lPEe%@Imt\IRsY*cf:1U.#U[7:0DJS_.IQ48A!9C/I=+s8VISHI2j=.67f(OV:2^u`f5I1[pfnGD\pOC1%Ot@Z_qH4\';r6hQOdG75IZn<=NGmtSdb'r]q?<9IO$DRkcfAEI=ld8V^=P#ChWqQCqH9qR]Gl:)Hi:t=F6.DFhrMoKeuaC]qiSit%V6P*5Jo:5h39=tXHi8?Q(c)8K[+L'+q?:eZ)N#t<Gd!`HH<b>%`kpn$XX:o)jja&$NTXA<HEWr.E"1Xg2pLbVnQrt<MMQoonrC<5%0A%tc<YD=Cf.T*,f%.pkh<Pl)X.P/12UT3e5t2En@:jM_?W\7Z\pOCG1[2X(0/1"]N-kMTQ,AD/cHu=^"Y0gi.H+09Ak5')jT7]E%H=;'=L[/1oFi"!u;S=`:G0)52009DW]Q^5)]&ZsGIGnGE=`glri`ch:&]&9h#XZrBGRBZY#.r\QLbL&)Q?Yq1@Op-.j,A:p0(;J'%]l$p9'k5?.h=Ku*I!&<"4k9t/T'CalBA8((dU(``Qa\"OIa,k*qoMs6Eflp)s/iIW>i*bmia8h2US[g"B-e2B09:RRo3\o#O6s-;%PL%/CV.lM`metpGb+6HEbKocLo6N?B4Lf[n9dZI(MlGd0HgT/DpK;7u]p&<#h=&?:'2./a\e(?HfA"ug[.(Vlr,qXTP;6(WM9VZH%mj$olGcT?]DQTMLQCi>]A'3)21UZqBgQj>;etuEW\ueN8oBd3*p[mOQgMLc/F9eG-9>.1oaX[i``\K,)J'+`"j5^6=,Y$5=V".7Z%\_I!@Qq+;AXa:C#2D6>jFL0RPrMgQl.N=)$2u<qQHB7"4cHh2'ZC5h%o(./.m,[SX90\9hSfFW?`_&`^Gf_Kf0?3J+(6#Z`:AjI!%pL*7IEdo<H/fs=-.le<@l*7ma5?dseA<Enajsp6YZ#8S.-lE[X00lq8G+JP1'\VXqhK6\:d@=V7efB*N[e:='Ya&RQ!9(;M>krR+%k@Qg1?S82!ghV)2XR'dkg$uoPqt8K2@8DA58X\;P<lJ=RW"kp7k4cqfQ(@eORBe\Q<S?0@:#KB8<%/h0<"aQTqf;N,l?X^^CfI_r%:/7kfp@Vofft4F&ja"%qQEo&5("Da]\0GGdhZeeFdJd%QY3.R9=YAIlQ\[FCA[Pd+Hj,IG\)HXfML6_J2I65G_)?"?$!OF.a^=>M%qYEkH3VdVB^&QsgfNpXsFTLnt&^[o7HEeMBM[t^8=6fnT*#9T$b;JT_7XX^1nSULOKEj"8qk*f&8Wo$3hE@=.>%K-\3>/7?GCO8^%X@Fd-41h%`$-TVJ-"nY=-7jSgHhrkV?PV;glgM@6p3DNrH0r[t9#pabTO/Ib=;#jCb^"qDHIIf)cFH?'NL/Pr:<?Sgm+\]KRCF\D%p:c^4*aaAqnFS2)Sgm<[eO%GZLA)l<(CWlL?H10&1\lBE9tFI=8Wou];@h7<]t1jOBK#0k1btP4-)"I%45X7<?*ADDc0O.V+obM7%:g\$/8cH;[0hT00:^Z+IUL)pKp@cHP1aP/\I;pOfVX:?]8p_Lj'AcVJ=%^7$A]b"L[o8:a"dE8,?7W+!nF2pO]i%U+T@mSoLPAN:%[#*sQgXtMh%*;OISt"ZVPBWW((Td"jjIJ_`^D)gMPaAf3+6ucV<PH#u_m-jXA,.G9>h#Q9QL73i/dNFi*nUP7>#!p!B1Uro\TR[_%rEq_AlYI04;]8W]:-Ac@lb6[pqj?tMSKUf:8MX\8Rg2>RUj/`**tTOY%*j,"^-;8[C"=3j,MPMdaU*!i-b4dA^?1c]XJsKNk32*b%!r>h[D"^0GOQ:;d@=EbRERUb#;*W7-;doWR^&$Y)MucNBaJdP`TH9_q?M_m?j@G.P`U%)nq(QB2quf:P",r^<,4?/S[I\133S1:P%l/2<J+Fc<@2g`N1Y<i\7e]nX:`i(D3=-GU(a5jO;^lC^;7Gb^Q(bi]HV^P*a9LsTmON($NCsKpq"NH[,2g2m"&8m,I\U?NU:=JK'%p5O"[B%OWV/2(t&,8ED`4MT'0CJ(R<ieE.GO>(FCH[$[J`FF8OYpgitpubY+rO?0.D'dfBjO@7bGiI=K&8p91Z>#b7T4bDk(=bd5%n$ASB<g)W9MGh#ffZ11"dU=m1'OYq=er3$t.O13,+L_;dGRUlka3,]NU`2f%[CR[Q4tiEK4J4%Yj(eXBl@/$tgc']Qrq[Gsb00A7%!GKo61h()rITu&-T&,30[jl)pIQb9cW/L!'?1&LR<t_1ejdfRHQoln=Ps%\Tf>,G*Q@[eraU.jN4n40n&cI9P16`UJ&4HKp:,:SV%/8g6^-g`5($sNF"@F)N,."<Yuj7c5R8`jLtZH:rJPTaWJ*6@B_ko.d^(VI(n[me4:T]iXG#)Ou!\[Z(*OQggFXtJT!<&hPoN,L-E%ALn1r`j[@ojl-KKhV4;sIm\R/VsSC4bc6_eZ5hW8nSPBVM3%*<lH66tm"?'6MI,-QRZ`WM%WO/W<@\16eENin]J,C:MOEp'l/8VP%#sDqmcsgm<8BeU1&Xlq;\U+Jejn5CC/p<R=3W6Kf<"%eCbt7ORRrCb_+td.u_Sdm,GDk'g+GnF*aJ"Q#O5@"\D\)0G,dK.5VieKi%gC^!jAX:-5at2"iMd\]$fal=M0?Frj0Lo@4ilfeSp@rB?1Y\:`f?h<Zn^t!rKR9L$d2p7u<:9(kd@K#bD-WBBbgkNoF+a[PrNgrD%,DN#";S7>#M0GeY;EW4dQoFOJG;h7$4o580fGMun^u@$/5bN@"(>H@>F7(^X(a6D4SBQ$'_ip+$pLdqK>.`d36J[-qS%*P]g-Uco%^imGGp=>Cir8,PjDjLHJj[2Al/rB0d8uk2"XRp9\Ka*EHR4gFQe^4<TIe0RU]>r+L\'%e2)5BQY?HZK@qWWj=LSbnaQH6>jemUkq%M).pE4IBWpKBDh5!]l)Im[Zl!,j]feMm]m&H7i'=kFS8(IbZ.'-=.K@*l73cmCJ?0@coNYN"'6>`$1N54Y6/371p,X1?WLf*%P&H%eXRgl>>7*fOF#kVaCT36+>dHn`+Y$[;X`%#_4utkk[eW#E,$Q4Fneqi(C;u,eEuiqJt\jKFm;6.C6,$<cku..-;MZR,d9B66Mijd%6OO'E:RSaXf.K+Wr'DjKIBa,*ir&$W6\7(T765ZT4nbWQ[R$-EXaHW`msC0p?kWSn65(L\J?_)'+?mkK9t2,j5Ai*cpjp^`=H6LX%2]%MaK=KZ:,ftmtU$URjYB[<0_-!XEd#>HU@%`[T`g3MGWaMjfVjmoJOV$d*LV!Y64$hG)/@q@M$'?\bP;!<*0#]0S;FH+5V0+EG%7)Q7.dXO<e<khfpSr?Apa5'GqF?'Y9-Z#f9YtW`%9pGaXjIAM]J#E[3/u?80jf<Ni>g$8'BbMRKG0m8`jJjTU(t3j@\$;$i9)9,j%GT'4M.(JUJ#_?)72H^[pJHQRa9k-Q.YXr@\WKX[q"DMZb<`pJ:l;/C?2\AAi"N)?[`+0d3fqsR5Njni?Xc\qt<FmH,=8u4FZB[gt%c-X&hQU$if?`h:J$L0upjhQ8#/X23r=B_[Dj2Y"J[J=rqIpL#o>%\Y3[D8K46ZJ5B=)&ktm_88e80a$>/6[DpckS[6c/$]s^%a$f%[EK8mlf8QPXA'?!FSSCLpJb3H>#E+ObJ%=N0ls@ef,$>Z^j>11\jtITG7<$CT2`9XfFb9\T=;!>?M6'YA1au;Wll\=qaie'aWcG>%S[G#HRhKG4(t67d+9cAI&(%c?94:p3gsPlGL3+iA<ljgj/-8T_g$#<#j3&MZSGDJ&^7^]bY_Dr=c`O\cd2;4Y'..(Fq]$a4&d/EI%7W9a"P?9[3)i84t@\bo)D1sQ>Yh5][Pcc8qWnZ0S<o0+NalR_jjHq9:@9)/TD(41j\sPT;n0Elk4>sMR_`c;A[Z\WSLAaiZ0rI7F%MNN]T/6KkC4<!+.o%8$'6oVqP/oE29m?jV#`g1hTNQpiJdZ1o&D6c5(V*sG^<aI"Z'(Fo<cS.P[<D(\*YFh!g?7VncHi:Pb?%&lV%M^Ri&(*@qqaE]E&_!Gh@8Fq?_jX%!N9lV>JcT^sHh2a[n"dAJAo.5J9cC0KkaDTa/S41=)POTCP-1N"-Z_l\3.`]DFehhcnV<)C9%RYJ#eRRJXMRYJ#-?c$g61jk"i+-*ZSi@A;e=Sh1SIO'qI[C=S_YC14n5Mc8Z907jdTrll:N55<9'/@O`iDjU8bJf6D_G[4O#Ec\4%9ZKXjKE@F/h%N+A"Jpem7"h(M0)(Y;>E"I.,0##[c+/`h;=a$3#2'599XQ1#ltUKr8!rng'e=]tYD^*VFSTe8]>@,:rg$k<9N[[a%^JH8+qL1W4f1uu,R0nqMXeSUr,fh\.PTbOBp,9V]],sSdMgBM@pgm30XF'\a!tt:):C2AV25;Bd_uNTU4Ln.IJ>Y$$Pn2LsJ9JLW%V`R<im#Tl3r0E[!(ts[M(93kHEpW(Si&D>S2Eb>32LVrb_"-7!hD)>%.Yd(EPiTa)/dD212?*;TP3W"GM@ojj*qA,\fF,F'k-Tf)%aFnd;-tKHHoWeq#C,:XHE`O1!)ib0@9+Q-2elaQ\b,8a-G;!n7KRW_PQb>A2723Z0`^W/qDg67+NWk&YZf;KJcEJms=n.4_B<ZM5%H5cZ[]Q&,,U_XjrH[$:3/98aJ^!H*aJObQe6X'h0dfF=V-IWa1^5"aWS*]1$G<<<QdFK&Lb19>,eeP]QTQn."VgnI7g%rqDT:OY;%@5ce#DNbU^(5o0O14I<L\RK!m,&HenGE:@Gr3BO#;m%D#3QPR_WCdPK&;b6aDM4l;A`_RKQukjRnS@SmZ$'^pac`;[e#Tl`>PDrX%RF='VpQsHmj\d7&38';tB]lNWAE1>0G<O0Q@kW2Qgq+Y9&kF21OBrl?-G*r/oruQ%5r)1(KKL'oh4(2H/e;te+Ufor`V`F]$,G:J%&g?TuZ&6'C01VB1\$`#e<!#?)f*2@fTF]K&&)0]Ss"4noih[(iSN@PefM#I`6[mcjojC3RG7Y(\i#bf!?n$XV8-'h!bhbmr'EQsb%2Na+IGJYg2_<0oM&h[S:=:rp4`BS#]0ji/J8=Hq1Y]:De.\MZ,_>MF$:_CKFS>tKh;$>H1n70'><"\3bPn8g<N/rhn10[1TAT;`j%5W?SUU^1"K'`m$S%TW"Z-j&HGLFW'h'L=!.NitTL&UY)$'S3[Tb39be=:r>N!e#[R-j&/cGPVHK<<P->lL,CFTa:3p?U[4l5JSY^%ZV#_E<WmY&=HH<4)b%Qf<UfYfAtoVC@mN9ZpB]cu1l;9X5L:dFN?Sp0Tp[BZ`'&^ZQQk@Nhp3[;N?Sp/#k@NnPc+NG_.8EGCF]IP%-gp:6bXN2+4!4TPK%VOR`qtr'?,Lmi,TDhbV6<ZK)b!"CV=;<p#o/"V@idg"IiVT:c=8BEb&:O>3/sc,hgWQ(QO?M]qE'P1IP#Di%ck'a\D6-`okO/,GI6?t`"-B($[1?'J*5/CoW`=o62$k1VR=8.fY=Uj#VmhmI3V@O"-a1IT>RYY'-WT8,>D[f)>qAtf:S7,VM>*:%%gDKJ!nVF!piiYm'.HRu+HjCck?HQKan8s(;":sJ(0J5*]d#B&kDgU<-2%T63I`)'55s1Ccr@-3n:*nrA'V8RO,a=jHH/IHtCKis3%jWJEnQ7+0W42[DLm[ei&(k*e"3qarum)kokOiSU=Ir]h\MH]%'[SngIBkk;hHjI1+\*V()jQpu,<oT';!/[&l5XX=SY=neDd"am:%@R=/8K"Ut*;5UQR;kEkPf%f+b[di'3_K.7B_6(a_2!V4Fb*,1@?i%mK]aC,[Q4.\m#ohY_ZD4mq\'"#ne.]sG/*s7g%l+URWIV-f%#Q*mpltNH;c"<,!efbOFWfT&lhM,TB\XA3)0Y?Rg9QM(`4jRccJt>=)O#"u[h)028V+^RDhgMbo?]$q3H$Za$maGMnQYi65<PVM2%B*A5;=74F5;Q``=e2$9?p[bTUC`"+.0-Ar2hOgX^naq`o>e;>\=)#h&IosHr:odj>;Wi+d=R'a7o,k3W[M%]op`;Ng/?Ha$dZ`Eq%an5UCOfMJX,r0)n8h$lA2jBZW++nc`ftj.q?9gNHkL@JY#6PdQ2i'M'([1K)(a03-_Nj9h[6grPgBgrjDGC]?)/6QYgAuc6fWlBO%SIQpq&f:<7F9Bl494F,QgKUQ6DK=B\,<%QG"7J2[Q4%DiO\tQG?Mt<o@cs\oVk<FAX4]#CTR*,Rs8C="5$V+2Q)dUjMPb])AKTY#%l-@IDp1!ptHG+p1AWp(GhsT9PZn/#fT?llhd"2)p9me"GkOI>!krdll$PBn@P^"uHh=a,PcH]!,0$r;G0ZX&.JX@Y""_ua'2,Igb%%\PVmd]F<Y?h>U;04WF+07%>$a,+Z-?G'un^$$3_,;&J=4iq%RCNR$;^e\%g+Zm8j7d+^kI.e"RHArpqTm*8IM%LVp'Mk;d5`?2!%La/gf_Y=sn[!YukPOFZ0<_7@5_6cCt[OC>U<1&t+H1.!$(UO2dB7q=ZiXmtg"@eHtQ,L`3$FjLl#!9te`iDRcW/*%$</diAQ/oZZ%]5?Bhgag$#8C+>p`uf*,iD6B>+]u<[J=Z#/D:M8Ia3,4^i+uno#U[#M<n5(XqC*I7@1FqR-1gU_[KZO(,!@LGWgh@Bo?M%N#\"/q%2R_Oakn9`+ZAmXL_KTJ&DuISK"?(th`[S?W0FJXlI)pW'@\UQHKbD(l,e%7ulVNBFC+MFpX5ZR0^b86A@"nP.98AAhJH4QTf((HQ%'C<t0Foca;#0=NN*:@3N=W]e+>AWn?=nu/)d1^_A?Mo8&fe9PtPiT=@olE0>Y=I+MT"CYJShcACCT1=\&Q.Z'\5ZK:lRPDM)B't2%*Q_b\.BC3AOH0pYNVhU[Gd`PSViO$MPaD'\'=toM=3A__TldNN>+C&*MBE(aeNq&'K*<3t8Qt%M_4i'%ka\9QZfFq^-L+*il,``H%_F4(2O)O>D`:NbPFU]A56["Ot4&C*5BO@D3g@J?c0r$k_bi@XcLZ(dd9cId6'4W-H`S]HX?9cP\[cLLO^;b]Vf6??KFls=Faq@pm%TIe.WcLBXi&h-_&Z7C(@&Uj_;=>)tRNtS^^Z3J[t&r<c1YT"A.FYNQ6n*ip_@"Cah\Y/AXMhPk]*KPV@51\"9[LVpBdb:,/efd,d%6WlM"fK'FN+fq5KCn4*ZXL7(uleH\NfK-s*$"`KtA*^?^,U'609P@$nB^8b^LIYN0e(?_J4J`V?c8;t),das8NNE;'/>T[0NNIgM%$YSj#A*ZPB@BH)7Cn4+1CM+Pi-P?r*m7_$Ui)mj!44DhC7#Qc)G,DNeLu](Xm7_$UnD/^Q=:u"GFi8NFYdH9HXlH`?k$dXNA*\Yu%$#/d#A*]eS1u$*3GU*l5DDGL#mr'-jW,A/Apff_5Y.F-$85D3Mg:4'D(#kY!jIja4G,g[I\fNq[DpLJED_HZdDc2X7R106/IfVQq%B$uTb/S=L^\\3spU2X)(I>T&%oNGWd!QGbQr4sl8r:V@U&1N+9S[KWm)@ITc1;\[A_=)7?i(1-qLu%O&-4*c!-cNfD[o53Q`1D0'%/+s(>OeD%hb762\4d@]0P#<+?Dr@/ACB[pK#'0.$eetJq6XcfJPIbE(/)9h:/2P\#G*F.MQpG\7+X-<tn57*,GI1LnU(s66j?b1b%'$ejR\_ecU$,%&72:h$jBh$GMp#!mcihp*Ch.[f!L*5bQQ5#H#Y1'bJf,@c"jo%VkL<]9YY9hR;e#t]2MhUK9[?olcrif>2.^X*8%ZAu6^Yl'u]ebOC?YRW3a/OFdrBDV;B-CQCiPfu(N?"E0cVst>!,lOc)G=*W,UAo8%re5BOfMOn5lhf`r2T`-E)W;[%s87#160hU,%q(mh0[/qorW8r`KWsclU#1$B$5'QW63k4&+%mG#]eaSnP=ODAFO*tas)H]Z)\4>CUd`NKTcJ"4&n%M\i`IIXO&>r410mC&sJHsHO%j(^)3O(oh>N"@R1:XQP0k`rusgE[1[m^IjnDC!BfGTJe]L!Ge?]("e8?^0rkmh=E=XCL6*KtDo72!f/[i2WaI6sjtL<Os%90T\R-%&?X)kp!*H:UqIhD[H]ls[o8M`#O?45Wgq3ip[Uj.-+_olANmtp'G7=o4+Lb4"b3hp:=8F0AskSXpck71]O>JN6Sn;\m)>W#n"+\A%+,s;X*Ee;2$i@5Wh5[k5h0T%"rpP<8rAOGR\,+M&BXVk_gtt&t;Z3_'X%1Vq4">/?ns%T+;uKasLrHc#H8g&_p?""dWhjq(IWHp\%;r-3DSOd.l@BT6K/:$g0N28`XnEAss'2&d804X8,]2EH63``2npH)-41?:+eqq(\e9;S2o<Mc/-IDdoe2E+qMl-@Dep7^0o2"oL=%1R7[;geG?Vpe*+8Wn^sDPIlYO'Fp#,f5#dNk/`(=T.0p[9D\8+*G2L@!VkE]=CS*f7ruN*K;=Et_5J0"a-)GEAo+;drYS;AAPD`Z%j"?V]X"a>uc8/=c^'YNdIqC1Z=(-utFD@**X"^66fr7YPKk[/N49Ll5X"YRI\,NrJVq+YQ3RjM,Y)L:HDilKk&8Dh+H!3WS6;:q-%ECrY;6;:XLPb4\WDh2l!n0m]Q5fY`Yb^b@46/r_:+?U;c9b1'<StW7=MkuVA<utg__(B7I`IiQ7C>60)Q8uumG$(U+%r.Y^4H)=f%^_Q)BnOBV96u7cFpmme^Lms=L_ufBc`HJ9:\*;lKb0kJ"M9S4VQo$f-LJ1IOES&N5e_<WuVMND^4=78TM9+\bE/HG/g;*ZKkcrm3%q4to3VnBUOOl@K*Z?)tnf.rBJ0P_bF/K-hrFY#*sMs'3jr9-.'d[KCBP@\N_8U>2$e)Fo5hgCS-XM)6<Z%J@;-t6jsL+>)Q%cIs/%s.O-LgER3fUmi.Q6(BkTB6bu?UtA)H;0FgZ.P>PbX+oi3UC$Nu[FI#]S"&0fg>thb[[18iN^i$A\On/c2^-`7[&g<b]=YD$eO1Y@%fQn((CW-O0C=cL*gOotp/u?rZU:82$%O3AjK.oYcT6eg5d>OLtd$ke)0:pTOak;?uJCl<GjK-P@bD)1ccFUs#-(fRFq]tnCGTZYt%M2++WEq;KN$@C@#f1D<NY?Yh"PI49i$6HeD.n9V#JX)oO&l09meUDQb!'DG<OEF'`H+LX2TO=hqdh\8n&u@3H!Dr>H#JUVdI?&A(%UZWM>g!o4A:P4[U9dTuoi^p7_0>e>M"ZDKb2%cP`kO!?g)X+GpE&NgKiWh4l@6#O"Se)*QLJ`)'g0nN>figMY2fKVeBjdTXW(PMO%PoSQZ48Uq7M0(KUG6dY]H8uV1[Ya5p9KMRi6s,=;YHYP!'Z8"FQqhZS16K[b-R5Oe+t@EE-7Qa_A51,g:hatTiI,n`$?&8'\(Rf@%[sM5!eB9K!obL`rg)6qmq,X$Y;?Dh4c,Xcr<+:Y\AQPb+Z#"$paiS-81cA2E;HR83BP_?!,D='M(_d479u8AP(ll'E+>i4u,0Y]E%_Vh$2nMRTb`[YquK^R:0MDQJRZ*g4Cm2k"i5d*%Q2D84\o"J^QL6o!(^"D2nXNg6t2<S7[Nbd3XGf^k^O*P$;2T&2=,&uLUegsa@%qFfCq[.M(E9jEJH^LW<cTjG4%=ahph`I5YX1bGReY#^J!?'hV>-/TSIXiBeqZ7f;V8$5n!B:iJ4(B/&+jX;2pcpPZ4pA2ut'^4Mf%EW=]WNtCRS#6R+7bX6QZN"tR@rL_?U)?@6"bKo9N9jDt#`8a[7=mlk^=@%;jWIHa.8(GB?h2!&Is!@H$T6W4B.n3Lc2#*eRl-X8l%60^r$AFp-QluTV^m?\`0rC4D!mJ\,3`M1!)U[.kVF>Z\V5""/6BEFihStS&)9&am;1I1^TOeN$S\bd1jS,r[4&W$MgKn%","8Lme%'`BPNM]PA1Stp$/lX*'@S=G`6>Vmhk16Q+FdI2l<Wu4L[FM"VgQYEIgd;l%A^ZnZA]NL*h7&5c55e;K\Em`^!!q=8:NtabNK#"-m%703HG?1BHZ](:G[-_fg.7`rP0#^ofd6A):HAgCAW4j/KoLYK^QUl5LfZN*gB)8fEb1)q<LWBqK>REm:mWfSu9eP/qRA2Hl/Aecnm%8h_qM1GeisOsfoJKtOE7)+>];#c1."e[1:'PO[1N->.)#?9TSQZ;/P!.8S<c)4@#3l:IF:]$SZ[Y-WF7;^#_`P(Ab:";K\9O`tq*%UDaaK:M-ip\W!\QH2sO/gXFE+#'(a,oSfflUg@BNjR]6@lK-81JN45`aJMG\b8CX=1GXhWl2_6BhQY'(W(ccZSl]r7A4W-$C)Ea?%bE38C3Fh1\g6aKcZs#)GdgT,b!3qV04_(Ma`>lZdMMqso6ID3"BksT1dBu*U\gl*/9c592:IhV8;42/g<cqTCafHDn_;<ZiN_DTG%BKF*Or6SV:7P],C)B#Ge![26aR\o3]6K-:hXO4l-AF,2<b:"\f1@odZPi3S&Yt/8W7-j)fERpY_jXA"`aMi7%:"d<+TO@OLaQW4.%+WNoT3"`8pNR0kTjT0?]3mk_\-7L_OEt"O`8LNsV^u@,M-V7iH'h&<4=?V@)X=0;HaS8Jd<eE-,$Cric.R=(6RA]*gjU$MRTIO5Z%eR[@+eUU4cL%_1VZs]:OAQ6NS5di\i9St<4[(OT`TtIJlJ301E"J^E7bldAJ;Nt8I(ig6#-6GDh!\erGPitdk.P4Pk^.]t)7i5"C%Bn0R91c^O0l1!2u0:ET=+:WFF&NSqs"b_H+YZgib&J0gHAUqC+23$U"""5EaQ;V$6YC_;O.EcCpaarf/1(;m,Cf#(.UclU@n/Al0%b5`0s?sQU/!L[BW9KI?N!hr=*aY6g-"rW[YB419Id7A?d5`06$Si-f&63%$8@S!S,:=l$,'JTY5OHb=CJiTQ:11<gE2_o[7TTI5S%67C%#)*f943X@q?DB<IoajWF1_]\l=LLtY!P)ZVB=Rpc-@5DSc'Mfj9E`?_N+P@$B+Fm-SUQF[X/H]u;lT,b43D-<+!]*-B6)tnM%/d!$60toIR!\[(e=j^p[\kYj+5e4mF%HTKE3X/Cl*<9doUlWI4)pBUBa]&9#.MG\a"Tfs4`jANJVJHD;acKW4S4l<`crC9Xb;0Kl%Bg'g,MFsik:[nN2.BfdG1_P'7!)g6P;]l_T;'f%03Mqm'#a6HtMKCm-_Gr'VY.ULWfeX)cW="g3e<M$6"Tk2$;CVo,6r80/"=f;/%1/;bf$s!P^AFO2k^oPVN[6P`e,sV_S`"u+*U+uqsOWp/_QmG3kGuCH3i1tu11*OO:OXF)`V?5QmZo%qRP>(Wd&-8m<^e(iW6lqa8%'uZc-j,ukT-ioGX;723J8`3&&OX)8=%>lH2bUVX2OD^jq"gfK*Sr,r26NpV)RKfMuNH>M.MkV,sRV(\q24.e)T_*']%9a:,+O_HY%L0ta\XI?%TB^4+<!Kj9Y`<]c5K^mS49W)U/\^:[sW]=T<-<bMVBHIu5(0/Of4WmYQ,\8*u%'&5"1ec!&+I8fcRW))hV\2>H:kn<.%>sk?7J..T?%I;+91RU"[5oMIV@:YNnOU"3$YOO5%8n&or9Ts-8!(A*s8(CIIkAmB/>[F7<+HQ)H=TPi9V/.0:.+O?nmj9Oe9rJY(%!-;t\1=1]OVNN]5+fqVo@+)#tK_BG>(Y-/bAJpdg4f*a<P#9YZq8T6bbQORVZiucW%>iX<]r*&*5_BEo[OR([=]SO##4tOa!7@SS%)b8JA/kJ41KVU^c!RNY3Sf5&a#E_DNcX9[^JDrrMP>N+V?1tHs"[&$#Gm*+A?NnU!=;c32UE7B0WiB'\7]%U`jBY3P"DNGf;c2<n%(GbJF*"cn=AROn7]po5:c9s)]%*TD$n1i!XPLe1tN>+Yp1?ek?kq]@FS?>HU<L?We#1/hP3]3iiM;$'CH)+MX%Oa[lKStnBG]iR0%&-2e8*btuN)TWmC:]#[_##TU6!`0jgK0CPJ-hS<<,:<!dWZmO>9X#Y%8;LOo$F%PV>*'jljlrSbTG@`sP<.:<;l^bY!0[b)*X#fE%j$:5IW&?'!KTQ@nJS]qOdW'hlAEHFT@.-W).0C/+)p%[@*kXes:_g?7Yq74eM);)-<J@V+`#8\53<R?%8M+=!!X2+0n8pKbQIk=k%_2qP(1ijt-)e?fbUiPO,I$Fu+*10GC7'II+6+A;/"%@rb#)_tnj</aW:c#J\4D>0D.im:GMBp(+TJU'e:if7I2Q(C0`0;E^0lfOg%b"ue^?oaA[5X&%(%I3%K,%Yg<T/78HjB]kM77a2p_bamb"Hhnr)5tM>4.<HMMXnt_6TAV6+`Of=1%7oe%`J7cJJ83s6=6#LFR3BZ%;'ugqJ=T4C&3S?Vn>\gS%HNdG'Up@f]q,>Z,SSE,Dh;7\b<Rm$BH'U'm'+^0DOYC8@RY8DBEtFF[2:el`>-`-bQhf9XN!@N&<Y2K%K6fT+Vn"q]YHV3%>!=rgmYFjFeNeH0jpZ@/BQK^#5_<]<h-iGr_/ebriM;\2bWP+lX=N9]K(_JtQFmUV'sIiDO6X.n832_E:l1J?%.@8ASHpDtO:b8;aB7d;&C6D2E"ld]n$73TaL2RRX46W<d1TA%s^,8#2BR?Ds8<JqP?&fW\l.c9#1/Wm=oX'oUr'E144D@I+Y2h]^%9;,CRL)qF6S2g8C6&IqBRAbm\;Q7R,+V1Mb0h^"L_'/l3W(eZAJOI@5aSqjD.44Y^`.U$6QP5l$'S5;%hP7r"?DI$3)8/PoR$&iZ%KcLsr)c.bgbH'tb,#&aV6$Ik+P7Rsb00MN6#@Z1@aEY^Jphij(JIj=k!ZWF`%j./u7u^1N8C1Is`bZ_@4>eAKMP1ji>E08PcCB><%KOX0A:q-Y1/Q]<tA3gQ1=[SOSMZE/YGnp)a(ko\=YWrchS\gAu4:@,/OABu`?-"ji@g?"Uk#XWR.^DeL&OS%`bd95K;ZRbPZH.h5%5gaU!/`QjGYTsVmBAik*NSAqL!!Pi"P#qo*%Fk4XDD;i,8-SrZh&TBjku?=J(%en9)&i)t<h`M)l%l;U;N@%L0br']Zr\cVU,$/Z%+FE0,jp=rq.`>J+kLC'L!(&*LNh?`U)FmIiUYu=90gHnWo/r"t82Mqhl(!')aCK%G`<K9[afse[Fqi#Xa&oL)K#Sh'LqH.3?9:Vd%R:S^D7`u3oBYY<\W4+@5BL(S*H9Cm&MOce,6C\3LTf_9c0KTUr(`[N2*Z.dP>:RiQ,mEKuE$G,XM`\OVhiZs15J_W#I5?Ca`5a-m%c&_WlJh4]t%EFS?q+_bHc,^7;N1?"M=`9q8WjPl-F71!*PbSA5+RM5fP>/@9+2;-_qSp'8M=*@e>/4SsT3:19`EB8q$6kU/`FbA)%Hn.NLs"NsU9].7('(`qk9025^>9BufJU%`4l\%oWgfRI8;=kU.8j.(=$rIO^&+Pn(KZ!]S+=;Z$.LGV_jF`-XD%@8bfS9V[HLqF_%)>A,>FW)jWIN8D'0dWEI8X-aUP)cRY?4q4ci0)o6-I-anO8_DHINfJQl;<lt69,-@,XSc9#@9`ME`dGj3b"=pNuM1;Vb[UmRPuZ/%*jN8(r).cMgdm@$Rs8J6%'VPXaS89o^'br!7>p\+_';*TYnPKg#It$!(oQtFT3^H4$$X?)=3S%7?J$h_%shZD<D4qW?\n%aIPEHp%`alE]MYiA.G-[!#gfmm7I=;))RmBsld`'t%ae;e:"UqEMj>@6u[EW^I,T,*O#1O4"0]!Lg@C-td^X;,\LYYFhYd4u]rGKsh&I]<%%$8AV5SpMEId#Fn)Q$P9@::\(8o"M>f=iK[$\'5ag>VhM^`D<HUNK`;'N>C[Irp'p61/X'/^KY*!DPJjHDDZt/j-+kL7W>`irnD=-%[+50g,;g+qBK"q0H1dO]Cd&K<(dO//a,&\98bCDR%_*1#1]p)=N'?U=DSRSe+#^=7mMUG3f\,^2I5FgB6m),#RPbFh1dn*LG.KKV%7O9/$L8b^S0oij]:_&X!MoF[QOq4$Dm[u).Il8&D&/5Ki<T/u6ckq:mB/)m?@m\)a,PamB0sr!,msCZ8mY`7l-MpF3OMGCK5Q0Bs%\C&6=)fC\gK$$H:@O'eRnd/1e-G1[]ZJ0CiS5'W,[fn&XPL8&dS_1Q)Wu-`Ea]R:7A&IgHX`:cdYgd?n*/WFOptfNG0!6rZl?32g%N)%b^b&6$(b^@B5Cug#_:WZd0LUgnY,h=`"H7q!+'5OioF,eN]Cs,-^Q5_,QQeQtH)0NnOUB<\6I2@>mCjm"`&:PLh#HF/BVpYIr%q2Dj(1Qpu]C8W5Z^0>q>qW'`XF\-;ef)Z)BP\.ip8;/IO*Hq_pg,</@[I]A2k/MBFSh+ss[jB69Yrc.eKK5eh+8q?eAAOf+`>hN5%Gg`,0RkHi5,L8A3CK0kpZNVqZ4QeP-'RYHoB6;Y:!T"CO=KgNV%!56[K&X';3gWW7j)gX*31l57/]\PJcXl.Z4"(LdcXl//GfHOA%j-/0i*[,!aEOsQc#PoV,\aYXpo[pX\XqU":+eT-]T$+iuA*,oJ.c__tF5+>S$7F1V^-H%rX/'BUDG(Da'D7=E0Tr[j35/$IhrVbB%8q2d\S7"-B_QBXS,E@*WkT]k5_i#:!-N<8<e2$&+$gBA'+/9*DNu%`Z[R_B:)r[DdDb&milPZGt)_Dmsi0u#+1'FlY@[3%:rNmZ_%#Dn*b[bO#p$79<!U#D9!rto#A'd<R]ck9%QWD9q%&ABNi3Yii1,M'+:(@A51D)P5S[W(:*]iBaUgdgG`;R,/@*JGB4i6Q'ea(r:6%pg_(PI'>]Pm67T<#3B>t=?'tfA@UP?*oo6km"G#/gH6uMC69RL^j*r:E.E)N6uk-09/%@Gl)&j5[>K.JDo$btZ8"9Og$'XfGq!:E%6>N[eM<o>:/)?VT`'*,fk[35)rTrA(9tq/)'KgHTb3Xdjd"bBKjhRBNJVnSO%sW,60qh-4N3U#".V#^BQaMl^=UotKOM]X?YV._t%"koMX.c:o\@Lai!P/Z)0p6UWTfGnUPLfm2=!%t9F"nR@u=fcXsGfLau?ajfeUoJTLO)B*RCn?$obm*Q1cE_MO2K9M6]I%8/\$0c]%csj>g-WD6t020>a#`r=,JC4Q!:B4t\@X]hQ<ghiGoa41/"fbZPoMhhmb852QnT!D5&5'=/'.k*Z=&>/K99-DEaG;F5+0Ub28P@3(%9W%G;M,JN"&QM[8qMugm5r\go-0X/s1=Dg\8M[T)<[!ldM(iO5MQNd$A0'REf,F*$74C_"&5-$G*AhoF@Ao58CoVbJi?G,@38GL!%(',,=\-<c^5A:Ei`)#+a(ctF>&e)bf/*Yn?:XTkCG&bpZQAeUI4'i4bp([Xk+r]G;X7uh_MPMWUQFL9KfO8RT5.sbG@C)LI"'$AI%^7lX]7?&q,"+=O>NH+D=$7h"]M:`3TYd/Sk/mk.QFb2HKW'a&?*[_WffSPPc+4@Z2?3&'Vpj('``/$j$QinP_QpO7t>*tkfK<YJH%Q5H\uRLt%3',B1[cn,TeDSq6c'q%SA[n5`0<tGajOriV\LX)Y"FaE76Hle`L,_k=iSHl'UWUnaK2(*RqYF'H6G-\5X*C\Itm4j<s%liaYo_G8)YLh]i?8V;PpTG'CWHa"/T/B?[Y4<I0C@ih4$7I>QSLu?Mn_IDgZ%uH)K0Do5cY`(Y'JeBA;0j)3';N:$U*1*Z;"2/OU%0uc?8+XN!(RWSWcp)+h\D95(T=Fup(e@b0,$p*EbQo#L:@jE33-tG+lTt99dVCH/a73T5oWYEqDH,W?PMQIZu>nFlX<tsG_gDnSP%d.*+h#RTcI_?L<c(Afce_FUR[$5+lX"kG4AdM>kn"513_Pc<GS&.5I@8=U'T=i@?d;e`5R8Q`;s:Kh.c'd\YD=j:R%8YN4/Qa-@#%a=ItJN7d@bJt!=qD"^`FbpJf\m$i@$aMhmQUe5)Fj#N)_G@i:@5p)OD`NBcj5q']9+3;&?;=W8qB8ObjN\sLT`Q2Iq/u_k[*29hR%ENuRa3&lbQNGf=u:Inag'),()m)J$s'=h4VLYP8<`P)X[jX"oO:F@W3W`s9ngL@lG%'uL,2GOTh'mkoQMo++TZ+-#4``FkJ9OYTI%Nh;K;N2rP$#a;FdE_rCmMR@2CS*>e@2J9PZA'MM5iJRU&EQh#mlfq:Z_%glI_/oraXD`[tLiC="nR3eMZ,r'1BI6q<Tj!E0`DJP+%\B7ZrU),A6(r\==_3,J,CoK<HdPrSL*a?E>a?<#EZf-=pENCMmJdFG,$nH#u3ECp5&_h-(rUeaq6N\V'Z23`d!"FO@&\CCNQf,c-%d-[4:a*NQ'$%/-$l\_#WnmOn,5T&`leufNK1h="K-,>I=/o0J]-WMcDG))_S<A#e&g'ZsJD-11?@Le<)`0o&?&`_J1c=-AeX&pg!%Z1BQ2oYh;mW]6h.p;t7:VkV/E/?CKtdGg%j=KWG:E!7,n*[t4B'oJ",(?)q?\"E)u"R(X>e;)_65Q#>+\e+js_e/.kTn*pe"8'K?%>A+D#5J4s;Tobrd`^p8-7lcO9,54"]@Fdl?%nIra+D^@Ck[G>;\R6#\#b-^-6u3XRX?JY(T0iHb0iTMd')Up\;#>00lXHJLoInY#%N*'&C[phT!^Ms-n3gPZh#E<Rd-XBW7.Ui^u5LC/ngPTP'inD19=J4(kXreUqK\dqb/-e%?"hPajpa5?Zfi#X=-eHCNlk8VVX*oL<%*T,/7-Fq=pbsUs*a097*]CbjfNf1Cn5uHX+SWfS.Xk8U:Yt<Wk5sgu%AQ5QEITMM$^Rp)l'7>S'BjrGAfSQs_VLF4t8*m$mJstoA%Q7:Dj3]X]@1SL#"i6A^&p/%^SZ0;+9.55:,)O:1.WC:Q$dLVHY's4kkFOBAPOeWb_$DU@M/o-5YV-&KGJ657$@e8^S!Fh4%Ct0UA%%80,E.%QFmTo!MIE/L;]k;]k9QXaAEJeZ+0:pNoZ@["rZRYb<2<VGYe15?Z&.`EGS'2d/ZXDec.`7Uk@a?Yn*qeTRcFc/E>\:aD^%M.m`5dt%d_B?6kb;;?gaG,P=uP2Y%.U-;NgbRmW0\W/O1%gboGm\gPl?U9Mu_nh7&<Qr9&g8'T41J+9$[[J"T^LE`QPc+psLjGkH%)3lSLAX0i7WG<-Ylp-ZL5=[8D:]/7>$ne"HLEZ10feA;h`B@S7Z=W2sB44+bnW(($_iS8I_OcAukA'qZTkBsU5Ht(ll\noLD%Eb,%;7W?a<U9dT`$BM_0lc^bok<S:XihcHGp5D[65qZtOWNgp+Gg]\3N,Q?Zn=W(L#M+0H1g)l_2rKQhVe3ebq,6g='\HdOgj>o&]53:%C$u'5P/HXV!Yc2eE,_*ck)c%/Jf$&i:/VnF)3U@Vg%.U@c3F+i'#U-iAD]CU^(?)\M9?RNN&!`PPU+7*-g*[W(ipPu9I#@-S"(H"%1#j[^7Kd2uCtD$#F&=)a<&,g+9M&]^%41">$cTId.p,56A#B\G,nr.QRKu\uRbd=7nUr3YfsTb0/8">b[>:`>]CpELC0sF=*G.&B%HPB\'&gA)![6EnbCe+i;+iL\@b!CD'@Os]:N(PWaN&C?F>QWPh5GS+ZfYpn6Hf,U[@;[PI;YtLXiKW>g;60WW`F8TEV/`M?Y#%ho%1=Lr5;WMl'(G$bsEBJV['"Nre/*NGCN7F2T1FAO[=NG>IB"ChIBP*'4ljhso8hnQ7jsAE65EJ,Z,W#/C^-8nXnjOjmYp(7j0SEkX%@k#\46t*`c`"`PdX9Us2\sIEh/)/H2Y/=?ai\HNU%p4dhENr-L4`!Xc*ii_7V:[.+WsMpdfDT8m.38R&+\N]4$4JOR.E3r_87@$H%CcDP8O\j1[%.:`<.Ak7>Sjb]*&HeL9?a5Z<#<7:c`'/ST(SioCAJn`1@O^[Q]^`8j:TR,NO%FiLlmq\^P5N6fIWQVC__dcKKje/[%ej'qHRFHV=0Q$FI<!Hj<^K<fphI<uP>Z/Ej7V[;FN_!Bo;,B5!=kWF5-WtFP@gIlY<pU8]as3I6&bl>jEZ$mb4=?[kR5uXEnTFEt%.J\m[;W2,sF2]3D"3FoO'908AneYXa]I3#B$kU:L7':!Rb+M+B%iM=(DcNaTXI-LNQ]G6V5=621IWEJ.ET/?HgS3D[T3Q>'(OU7$%-XZYj`N0,pT:CQm_C(-23f-H=1uq4sD!bmFN^9/]b&u0"8p5MWP*D>-k(6?]Ur4Zc%'pRt=BcD)dBinU2C8l4+tR2:.g@CJ29\N@%oN(<S[/cU?+suL'!X*aRlopC:qbo*]%&++EOlj=gO<Z(T'*5?s!WlhrB&+h2:sD/Q@T7O^"rDuNF=uEE@[&*PkX7j)S0p#unpr&7%Z,S_O>0TClL_Dqfg?M(%7PTOe'Pe96J-hi)r%tNAGNa9L`kn"k3SV\7$W`FI'^,TmH8Pn8.AVi"3\ncUEQZSEQrc^7ONA>]LG3g*%#16@KHpJTM9cSlqnl<R_b5Uti0G%q7%Wc=&^JYlHRjXX+>C<+nFr^-(7Fo?Oo;$/)A$(0"pOr*TEqcYn(V.,(!Zk=,K#P`dV80B>%=UKm0PH6&u&]-%[qP>Y88mJUk(Aa+*Y1T7%B%U,GEZgQ=dCJV*3u#2F^a2ul/pHCHWGpsN:ab5Ec7DGKbQZSZaZRLp2\i0Jg(UKP%_G.0B#u^t%Fqq34'=8qs3ME/rd>9$:+C?RS3J9tg>%OW3][2nGT2nAh<l#/*0tT;@Ti=c"%8\b_V=^RH'';Lm-omO*7A.Sfg[tS>%9QUVg&j_B5bP4J?AebRRWd"a=JL[7"(7An<66[7dP0Tc[Uo2n<\Q8-[#Z&!3f&`D&90UErdmsjH`&)hq*o`O18lATbC^:b=b^gX?%VG*+$F)hq"lgbV/OJ>N^,4n]q*[W3T7Hbr'gamP5.Ye@0ecX'ZP0i:F!(6rlG1dE>VArD^(RB)\.;eV]EVc/P`G.Sm82U_4i<cA0%?d=o3"C6HW/2f"_?NCpUb9lB`,s2p?S2"99GR@c$'t0Vh*D+m=7WRfGCbb0BgjeTm`g*]^@)_aKTgKD<fekcc8tr+UKp",a=Fh_u%8Kgh@-*]PN-"J[o>bie5'P;21mNQF9*g"<Q:N;co.Yk0q7\Z*lpEE?mplHiOcl$sc[4/"q/ZDH9Pu)3o0'1;K,LJsJ4W0(l#XDoG%\n$Rg-]rUB_)@*Elk4Q".9JTuD'@Sh:Keha(Al[UJ"^doPQ]\#6r^7,nX*5*15;uOn;3ah"eqJ%4W0r)$QpjD@R'8GXD;Md+edhN%c(]c."]&=uBEUro\/q;.Uh%Cl71^oQ2g4k^Ph9Qb=e6Ot&]6l4d$)BQ@O;"cII\`$8i&u\1(.,VCk4,k_C,%V@^RL66H02e_%8dB%:.u6m467A):pI@7LI2?/[RsYl@;[lFYl\j[0a(W1G!?*[G.JoW1nlO%g\X.EJ];*up.8ER*`epH;O1pq2^)WRA8-g(/qPW4=HBd[%`6pF"$O&&(d1+3'"C?6u9Ic.#Zi;QNA2GY:1j&1g;q,HS@X0"<6kMXtZ@X>e)=;bN2/-1Z!jGlT;qWV0/5TnZ/P2tJ$0+Up@b<#P%R\7e/+kKma'h::#li^<X)_N!8d>6bPE0?$9fMHj__2(\8c6jI>"$9I9@`O1>,ZQ8Q3/m>7/\,>>nM(J4hD^.C1F4CqC^YMJH&4!+%TM(s_`V#KL'nd90RQu[=TmHte^:G=tPA4W$X-")?mdl/b#;!e&)DKEtL%sXJ^^";(:XZ[2N\JBV;mSb:k3)8=JI`^bpma"JLG'N7%Lkrt1kPP*-Z0sNj]ELK0R^!`sCBgg.,80S^iQ"M<pCMe,gSSS5D/eF_oHj$j-5$B]53Y8D&j@j+_58Oa:+0ibbNR;6'pMR?6tI6/%Ua7H<UQ[hTPgNp,WJOE4*,85r&q[uP1<_&!bTnAKR_DS_&.J:[ZV@fX`GD:`(,bj.Z,4dbEh>#fCge=8))%_QEqX/:'3hPE*o+ZR%;=W,Z-OXqFUbuTWQC9t&'O_WD+;7*T%B1OaAI26t<,Dq2cZ9S[=H&ekQpbDt!]5)#o*`nn=qGC;36[m0#EsR8`dnkX$$$0E06Wr4%UeVU!i2V$b&&ID]]b?"<)0A-.;@G^-KTtOF_3QI(&$pabAI2CIC5uHXesQq0nPr@7P'/tc4C':uWZjaCQ'uq5*2-i%(r@%#M,es8%Llu>XXiNV/Cd7Q>eWdA5j=67Db*?KRc0OnQ/fJe[:AIbIaGr:D7gU!K,l?d7\Q)6S'Imr4ES0<2c_9Jf_('iK*_]4jcm+6A`<h3p%I^0"qaJUQ*d3q\\P+5b_Pru;ZkZIKZdJ&j1O+%1j#\PPO8-4dj2Q<R27FHr?<@jFNWa^WQKrSU8ku!<O#Uq2LH,p##9U1B01LKeu%97n"UjGINoLX_:T(h>if,KCR?P6*p;D%FcdaN"Ubb+p7bqSO>\CPl*!-0t,`QIrqUq5F!0JAjiLjM+9"U1*lYqXM-]AU!N4=up5=%KmBL5HnaEI*'UVs1PnZLktd7jJ3]W6Q\qXYE;8Lo"6U(Sp;;H6(`bR@Fbc._#7E8M"(usk8+@J?3]h<)%"mefg21^cO2Z!X_n7[K%CG<dZ6t=V<4`eU!:d(.EZ$(g+crbFTJ;0A*MZ[T\G+b!$V/bn)!0,B4UV$md2J*4Jn=kb<-+ql>UbfgpP:f!``QhUs!>UCN&.'h4%o^ifq0Qg?BYXp;SV;FjBEQBp];B`qqC-P2&L."iA?_$aL-`T-S^FuPF`8Ik]MGpCeMBu^L[)b0AV&W43`^7^dd:ucAi`M!QJM9Xt%(9s&gCs%<s!ff`&<>6Dl?-GaRZ-mPj'HB419i5jXK3i#DE=HGh/#nW,H(KQ(0!SgtLL$s@7Hn7%/`q[7laXLF;.L\j6Xb"+?,u_,%ml?l=IF,4`&3,UZR]0[meo?WHLcAL_R'o`-@>$Tb'QGgi)>>f=N#`\Y>uHKM-4_RmqTaO;_*kcf]Q*gHK\4d'P[=_IH=qhJ.71UK%CP,8V&^hU1PitP#1hS/L0\I=33)YE3*h5DE6M^laG6/5o%Y94"1b?<L?C$D%XVu>D$5/?ggY3IH#rG*WUS\/4UE+/4nq)s:N.qm(%`KOu&IQ+?c8Mip'N)i&`+uW"$_29K]LKqS#53s8>5p@BU[@g)O%LEc2E`cfj:epGJK57%"4UrdW9M*<FVDj6uOQ5?A+mh3h9#sTB%64V<k'es>Ea2J6;`?Rmi(5YO46VjZQ,Ta4akc>db(Zdmp1-%)j%##l`6XJf*(,<'h"m.n'7r6&%9IqG9p@qBQ(BPrDQWS7R*4+hF%AVGdc5#i,)LEO_gs&9nR:2B<+^7iroG^]4o$!U0Z1a4]C#e!iaU0+frg2cW&Fe!"(Zk]jMr4EX=:@Co>P[$KWMkoFlH^b;bfs!o*%&Bk/^H9j6:klnoYP%Q%m\_`rLGTm93F#6c+N04*9ED1PGTH&em:0R69QOPE2@5&K&pQNc)=L6A>6Q&uV8VmYIkX97F)kiE]p*=Ru%D0_4]F$_B9BM4L'Uq<!B$<//`O$NDF=GZdD[YI2e(bnu/,u#o]81)"5S5)dM7O%SKn\E4i1bk#s6$Z<ELOb+%a2+0n'l>'hfp&A!%!g;i,iE]Di$qBG:jCllAFH5/SVG[n?NAYR9iuE'q,:=g^U)08@<dJb,2]Q"43]#Sf8Qi#]&^WMIb#Nu3_:gqA2jha_&.Qim-Kt_(%^_>-upA6#hYfn`c/#]_mK$,G&5c11\FIX<.8')8L=4i`Z2Q0([GVHO"Z4HBV;A7%k9AEV)9S[m]lY\a,-Co>/Bfdk!-*Jld37U:C%OXd2<M[cUi!/]MnoH"0t+D]_BQGMkRU^K2e/^/l=OPFF$?3g%eJk[q>R"QX@o$o?+CV`pj=H(-FCJ87D-p2&'L1F<B5uUa&bFg;S%El0Y:E6/Q9_MD35_h(_9/1CCM_[6p*jM)$aOJ6t4Gc]jG/plT"m@@-D+'=%B32FZ1:p["b$Z`tICamFi;:3G'=P3_1kt%hVL']+U%kFc7VVEoduDG#Pe7[$lS2ES[L.:"KFGYL_^Wg&B/5aj&G!h)sVRpZc?U'*JCf'uRg&H5X$!X1nbH?/$oBg[dVVBe;:?Ra]j%5nGG%(L&m01m)+6-C[J^6S,>L@PlXmh0g2WFs[)]_8oA-5QV^*7#rL2!Z%C@a'n$Z]+"eW>f^!j0GBY1@\Q`rTnG%nR)aA6N&:j6F@$e5%R0F6oY>*V42!MD.OYS)ZbC3llQX[_7On_*R(2JpR(m8F*qs)ug)<iHd$)u+(0l8M9MkrAG!Gi$IqCZ9?W!d6PQ+HVCa,8.\9dQ"6%=C2ZuZrh*=Y)J1?oZeI=MRQ(CL#ac8dG/]c:`a*;^rZ$gk$g"8^e\O;\`jAQ7N0O7'"[_!oAN@YCRH216m1]&WE7],m,Kc[a"prd%p&:@1p;k_`@P0Ptm5&df__>B@A?hoX_+.Ce`EkemR07]'"O#YinTDtPG)0490YW8?64%!8)k[B3:r:hL^;<S=C+bjnmQH@!InJX.%`f9;HPJfYFfOBTJ`K"]>^uO(CKFi&>5@iJBnWm[]`(Rb^MMk.Di[m[g?6nH<O<@`U">2V+J0?3&b"^'-P*BHDrZ-P(HbP%:&u=0e%-YD/^LA3!S=!P<9Y;"06UaobCig56I<rfW5?%EBji0BclT-h4fN#.=PAC?t:MSp[t.jo]"j=AdicA!9V5i\l=-N3#J;S$Z?_.e+f%'[)c#3[^0?;l(Y%@\b@_#rNu/[^`9o9(/9>-!V<(=>&Z"+^M?Z@)F$L`%/O-$VOWZSaTfq=\1j1jsGhfV@Kgt(oDMR)A7eh8fX9:%`in-S,c,8^PEM0E.kA!R9\7Fn0T7<B%Vd7!e$YL0*+i.dDV[_kj0O6.))@Pm`.CbL<kN@-&0QpS]*kp3OLWr-@mt\VdM:r<&&4,P%kO(-G0d(gOq]F6$lgELk93K8S(eQ,\0dPMXh%*A?FfsntmBsl]VJW)PmF(@3Dg(O\*BA"Z:A`L!:4E#+LVF27&,ttPcej0Lm[r@l%00f6jbJ4&Sh-^(MC_(ABB3`j"cL2k06W^kJkE$F%dc99$mea'8QlYu=s'h=!?[h"(AM:bR[J%T]ESD5_[fR$Vj"ot?;4D.;PQ<Ls%N+'g7mW*RQg57\JonW(DnHO1:fbot%eMBS?lEgBUi/6kUU5n+S(-P;Nd2!a'\_Q?!s7!0*$.-=!)n[fl%0?@ZcBWPn[%i?!'CB<`%Gr>K+qc'BZn1"gj^WVTkUq>5]oRq=cnf1XP5&?Ken)Nrd5.pdWGdTabDtB!kMnei3NFqh,QkuM2b*c+9N>ZZI?_>GB0g$=A39[sp%@lB/$)`A;ZhrT;!BsA:LcEP:a>e/,u?U#TKPQj1c;W9Fr277#P('=%*7rpF+[+Z/k<DTu"O]O0EKU0+^$Cf2'Jh'`::,+m3SI#ft%="=eYA^[>S\b/!)n*IsXfD+mlQhE/;p:d`_0%>Xkp3LY`@9jcJ=C[8P-0qIIKZYrTKt_(2ZJ*fDmFTieR(ROo9?h9l<N>WD;K$p3%E8TQJh;p^Pn9-!'97/6-a`ih$HusWXI[57>ICiW-Ic)\5gOQrECai'C+'_E.Gop=]SE@PqF1U)q4u@X:Of^+:="1KXjj"RhrUW-t%7(QEEO=Cj7[L0,QnpG4f/+R&QYqQ4O<C1k/GCX3-G00GWam"!,LL>A65mSF%8k-rT/&omfcbiPBf?2DubJTBG7:nWCpQ_k7;2Brr%#"NMb\L],^hX?M`flX+A#0c-@pNkFX.oL7Z0g,N-$',AD.M#D<d=YJfoeN+Wm)'c\&T,LrO#%R?pGpkcZ)1G()lK!Il<khIbeZb3%np:j)Nme>^D)'96b%#m#L9-(kba`8W2[ih7(-\lYfMo5Z5")d1G+l;c!B^)i]K%4V0s1mK6YO\;/dtY;6oNn7'-3E$O!m882c1um%.E'>*mLpPCkKP^oI<g&Mo;E[^RljQgi20h`qmL"29HC>^bH4=l*(0N)E1VGJ]NBTH/5eZN(->mGo?Gf/#QD\Eq7^=^&PXlf?4c-T%(@`/TF_0eXYLs^m0S3t8>i,qC!b8qUGN9^kB;F=k6>+M^Fe83omOYPQ&)G60Gf3p_Zfb^I8q$-TZ^4aN#\ns@gj.E7>cjN0NCi#L%3O@IE$_T7,Oh\;g>*6HTL@Y=hSpX#?>()J\;Eer`3oA$M]mY.c?'^%3N31DNW/pTd$g'I.IB9]EgZXs\^(niK^(L7jgI2jVRr[^C%mlHnuD]&@RA(n62>>St:DoU-;7-rc6ZlEgpI=uPkTj>$UO6%t?d5sULkV4#S=iAFB^TD(.#!9Po#b]B/BVj^U"05PtdJCI1-.ijt%Yj4cRZ]'IA[CE(gYfM7FcYRBl^&EEaWfCF0G(_^)cZ;JfjdhY?@QEJ%eJ!At]uCF9n[E_I513Gr[l[m\V\7<cC\;1?h7)&]E\;fh%>8W742)pLkNE$I3_u;Z@jPD*/(,VFCgl(S51"4%YU:aKkpjR&L,=[I96J?b]&VIt_5#hQ(0JGK55eHm@?[^^Gcf(T/MA_5Z\9T[K%K6kltIIjM?%8iYG2C6-uc[?-J((Vs:T'28@r&."9-5@I%]a]V8376h9[9W)/KcTG^PR4ruQZD!R!qYOc^l*:TNK19g>0c>%rB'R)%FmDmH4.]q51ZkO&s5E"-r/.Ujj0NuZfcT+1IJJ;H1(I\G0>UISTkPoR%b+<e3c_TPh_Bjg,L9jY%I\`3(rP"_6]?E:aMBIOe4a'T%="5s!9Bqk`gq25mH/'IiaL>[@W`Z-E1M0ClA`7dl*o;e)hnG,!l-mh#\;LQ2rpTTHZ&^2307oh1&LtPC*@eDBmTmFf0c)Ub,h+mc%`E%1Qg*TdHri>ooNd)eO0Z(<6qsShf!a_uFB6grD)7>iojt.tCP7bYI>3/.fkSD>&Q7,"G<[cH1748=H@_/+SLHp7`:4LDP7f]9(%U*JB^l#LFPVGaAA^["d8#4gUfdJ`A^H:GJHH'0Y>T!q=oGOfuu3=k49N2CHKnRFY4!%I'lYdV7B#+Fa%]h@]E_tHu5_4.M?kTk#Q%_TVAj62E\3(P+.VcZ4nV;p&,0"lRLK=_sXX_qde-:&;<eH*d8bUBT[AGt>jIRqL\DD"Ut9oVG]`/Z+c/b_kIu.AT&WH1Yop2*F0i%.%`4%SaYP-Z9GpMIlROha^DL2gWSKf=R5pVmIoim3p?K;C@3[[[=$$BRb>DpTOQf!i2\&q2u$b-+2#@j7sMcb.AdDr>Y:)B[O#DL%JX.@q2e)XJa4Fu$q!Q2e$7j_!Vc]NE(X1cmPr$-<T3Z#/QC9YO"e3KOX&qr$B!NUf)D,]&477-7Q,KPCR&:`K@T/1NE@hp)H`smQ%/S1_!CWLo.)<mNS^CSMX<2=uq)S=PIghUXO^K*)`>3UF2]uWp]GbHdSQe.L!-Si"q12=R8hK3L%m5Q1n(=B'FJSPeFDhpk7"EBGa%\e\L(i*gpd4.WRXV39=pD3'qV:m,"5?/&HY\0h(3epLG`qWj!'@[_66rk#A!8T<th&8j@oDnTt3@l3(Hm-Z%fAVRHLh*)]srH'2l%OabhQiY0q<?Zl>#'&0-X^Zq)#JQNWg<duGt\5/OFh.!T%8VLp2f\.*M<G[NTfBA@NN%.fA[s2I^Tj#YD3(8PdeH3:dW'[oE(k>Cb%`pC1tMAX"7?3Ta[o!:iP0e^ZiL/<b-rUK9K=eo6O?Wt*\b#Rib?4a>-Y3JM/nNg*C)Kdc6HdJYd-ZI#;,-.*grc1MpF\#I0[Q7k@%:%e@)7Lgli:qaAOL^,@rof!YUND##kL$R\VV$tm=*YUOJ)6+JVajMV*okQ*1Ej%iblAogX2!-)jQRU=LM]D21RS5R#QO(ijPc4*b%_raT<Wa@Ybm3P3obL1D=.B<C`7UJ\`rO[T#=Db*%Pqtgte>IUD<eD\pp$^m&Vp+NDj)6A/oksh74&U=gZ$>cbSU,jr21>kfWL[nF%QcJH&)fnuS(=cWWfGTcS<"$O4b(O<Q#=NQ?fCeaQ&dp.g^]"GH/olqsh;"p!qu"'WJ=5t-DqX,KLH7<,b\L+SqGDL#Pc&h%7hqm`%2,:bWG$V<'0I"rJlYg3ek8$*Zs8&'Gkuc,g8]MaO=JQn2N]"P-d&0d^>5CMK=A,KSN\tRs&_m,tfB[@$^F!<+q%b8oNS;m[IK-r<%@5g"]HgM^/"-DFu)O)bT$c-VcJCoA_l-Q0(5VdS?@(gq\A9k*2e\Ck2TgF@_o$L)!lEMp!5D-PtlUpoK6L%UTZJ1nub\q>a::$%f%7W"!_;RYjdoKFVTWa?r$r6hA:h8VgZ"k^$4YK>P2h2CtBUs@J!iTsBQ14.$^)GfUsLTZ!pn_,Y,\KL"/G$Nr$U`[#)NdZc&m*LgI%ES.lh!`D)i9n7&lrk[EqK)p%W`H@<m*D07g_'gb/WScB_7.3s@H?Y$D9;SW,pnXiFNK;ukCQkjL@f(`dp)kmYH]'V8N4X8g(pEfE%JumH4KDh1K;N%5kPAf%p96`n)/+j8,N_*:jbtr(;iQ(Wb!j@pD:iBF\GbEQ@HHWgDmLLUH\(DNkLXR#j;/;]A-nAa<N-^,1Xf3]c%[0CE-*^kTWMtn2^H;TU95tPp,F0f'V\sOef@Mk;%05@aO):bJ4VLbhjN,(0"jqS'![<$:L.nQ,9F3>2QV5YrPPQkgYV(/m?=6LhY%[Fi2<eQ8i*[rj!_QX&$L2uUIPMmcXG5jCeO21/p;CUOaX1]\5J=q'\#l:%h;;_%LfMg>[*:?k9;Z+2(lj\mhtD;dMDCM.K-lk_MB%RNGpoZ)8kCFug&dAC,0K_,*J`NG.dEL:"L&l&6H9UhrJUMMAK`_XgecUh1m.g+!Q2LSE=aL9qg<BLd;^Tcpi;[tV^e)UdcoAt(?_%rnAq9a&,3=m54PNTSCsFleOqUOLE5R5G`RBT#3630n$YLMu0F'e05I]d^8>BI\c(fr7$Z3fM-n]dq4('(s#6rlA*>L6V:95-?/te%C/(gSkWS?b@T2S\0Tq^R[+QsDOg'gS;a4XU0-[Z8o.;(O]1K8AF%PC-^P1=iS.=>1OCHZNHRV#)AsuCm#jP)8emQjYbg\rr5D@>2%!oC:#RAn/-$0h/+a$cR(b"Sp]_k*B_RG(LI/J)KjIYBXc!bA1Z#B!)k:V1O$*Uad.s!^+=/"Abk)i@GY\80ctqR!fgf`tXM!&p6!%YEK4D*$0>V;P[JTMq9.AWcuJkZHkn#C?It`(O:Pu3-TrgQ0RRJBU"TNeRAp38!U)sgIS+f3+^o-n)KD[S8&!"K,W!3$E,[(8.Vt?%+Z1,./,R!Z2En*,DoTR@L*Q6rqsYTXK3ht22/(#Xb/9HOQ1A=9>:@f0p65mJfNd/MbCXge%JLXkfoV?QXrASrV-W[1%TjI*_(fX`%j#Ei?o?J@\$RY]&q>:WrBrh[Uq8)-dOrplc&'BNQJWfS;Ms[<&%HGh;H-Cp(h^Oblq(4-.m*d_pHt"2[\P);<fUjXuI%2edcH1M.%pH2Zr5%m1gp=Z1rqj;Z]HpSJ%6:!mtX%jA)n"='\`i:h'T-]q4H'tG=7qQpjR5^/iMO3"'6i`Dr7S0U00uEi]?KM6Ef9EMaIiB7=%-AplZX,/$?/+s%,)E&1!2RL68JK"969FdkD?i`PbY2ENe;e@@cMd$IWK.[(ML5'Dg,,E4U7Y79[oT7F4J$fAc7<]L/?rB#$*)'6<%c.OgSP(gE[ed:KsR4"*\*6/d<@jjQ$80p%D?re`9"6SrKSi*^WbP@ef2NlgHd_J?=Z+C0g&\6RT>*=k)RZhTo&c:tT"\ggd6&mk_%S;e!CKQGL=1&G-RCh.oDKZAG@RIFVH<=hra@;\LrR1bVlA?VRZ)C[pae,)^_Zch;[I,eq`K'3Ktlmcu6RhgIF$/[SU+OM.'K/!U)%g6+PK0sR0S,$\5+=]qtUT#f'oD<;M5Cmnr_=OGWnJ<cZSC(!E9o1'rP4.116-nU2G`A/E\04pg"U#n6+n>%CbWpDM:-<8`?B0T6.%j1bNFPsrsd5JCtPKO]!F3(RMD`kc'%.`_]?LN%W'iPC6>f=j\b4R)dO?Mk#R9%%bNHRbuU@""agfKuMuKt^eYCNTR0lkYt>5fQ-t%Dq!h6LEZ7O?+u$nYm%D:MBP7SHsmbZ#-XtL`%!ZN7ZnTs(&KR$D.+1;_n\9'Rg)8Lb2Tbo/(3[GW;%Z9k=ARRcE@552"19W4MZRt%93Vli&S-6tUG2Z_GHk9)j$hGBCVN7J.i./H%E^pOitnOh(G*QZg6"#t*acqh-li&A*I$O,JBum4,.4iJN#d%946kM00S#q7f+.p[%A!\9S5U90YkLW)rP/qe4Ve!O&3dq;V8)u]H]4+W'>fWN*).0e]Nl@A!Rp=!C4`]P?lhGC.;,UrFR](ALEGtsu,]9m[8\mQUp]r!4%B]k3J1;TNN)d"QdR`3>O')5R3p*nh0Q"?^f=!6\gi1Y[kb;L%@pFcB[ILYWH8%:?AZ(JMl_0-!&#4Wbh@2u?kH-a>baQ,LpYC#i3%7Arbia0(<1CBC+SjpRIBXJYi<d[YEW>ZPseq?qg9TcADU9TKB:Y[K%566rA3#8Nk"6CK3!bn8B+>s[I+;4?V+bUY-%`UHf')F%NC%-W(e/(MgZ*&Xhb?eoCgIbGD*\+Cdk)30$8DWka0jm_gce[^"%Je"$5b.uM*o23?9\!60I,Md3Rag2A]$9E8SWf#N)b!gr)7g"3q>%BGluJfO:GQi\0C+@P-/#Ku+s8MmYEn\<F<OB7.Q2\1G?W[9m!W`P0D6`5Utu2*ZYRPGEGS"!Wl'=A'=fJj_%Ga8mpTU7E;pG"7e&%-nfG3'Pkp9`/%<W*oC0j.G"3a1J1f1Qm,Rq@\#pqb!D2rF:N2OUt>c`aJMFA@adFP&lKC\/?p+be7=,MTi.(CBpk-=Ge_eTDi$W@%dSGfiS>4&^qOpHrl;Z^Y7gp(Z/oe1`-k)h?2RuC[@]TVmlA81#>jk[)ZeuYsP[3.l(\MO+UgS@KTLP8/-D<mB,Y4l]pao1fPlpXX%e>-ncI4qs:,I:CeZWO!Bep&GW9fS!?jLrX>.Zh<;fqq]!%LTGU\nVBa/TT*0^`mC[KhZAgSs\G(K/=c<7,np4"<u,TCU)#-Z-$%%%2%#chIEb-AdNUR7a%Vc\U\,Hq(ZpfXY0%_<X=J[,A%t3Y"7h>L4rNsQ:p*?;ZGjJ&<hEXeI8&o>XKbLL!Q0R.0jkJ=`3=7?Bjq=3%>"F)T_o7\))6LR(,!Tc]S0iC2ChJ>"&`A^&n;2jX8Wn[JbX*LsAa)r&Ojhi+&Sk)%*ZC1^RBJ)`+Gi]"8IMacBh1/UoTNU75c(1\%^;`PQN?aBR0S1HK5mJ@\Hj_uK>V)jH&1k.&FO4Jbnj!FYhKD,5<0O'P\>+O%5bOt;"$+JN._0E&&>W`:?a)iV+?joj)u/D<"7^[7%X90W4W?;4p=D?Njng`V8GT3nY0l'-Ca\nrY=Ka82OPFq/V&YIF#Xun0h'FE+E(%:-8]njYk%?,5bepHFA%]AID38jHrgl`BS8VF6%Yu4RG%ahep25rLDg794X0F)TRNLRF(L01Dk.i?-X"YjAdiXR@eQ-CjpFYK/>-7GrE+qVEA67XfOGSPd+A5HqCNtSO->[s7F+d#j*%a?l=lP*gu+I:4%b4`OmKSb9->NQsh-16%;X9F9"Gl69M5_&N]"QnX:qB;UqeiQ6pR=V76m($^#l:HD]'i=Mn;f:;KWkt6mPMaHN7%lW;Ra=,_,G22[.C7?)>CMeZ.bgmZ6\)Wfs>5uFE4M-#4%m'phjLJ0R_lQ%$]'T3"1MNc\2!K'g8@cmjm8i=c5L.5.\b!L1s29O22%*`J#<1XgLS:TgqI9Z!!W<IhX'r0bLD%^P&3!kZoQST8`/6tF1C#&9IhPZ&)KeL<EQ$LNYf.CXJX:Edm&@8[]3S:p,qMNY:^!Xjol%Ys(ri@6`jo1$'ij3m=>>0`2R1cB)IZ-Q^3#]Y^^(Ap!)K*]q1b^aik^*O@]qMB['VYD?bK.HA%`d[;X-KH^3bJ-5i\To;@I0u/HU%M/XHM5n#K"F[-^OP,17+B>kLr4iIVUd"&X[#r>Rr5[:\(+TWJMJubG;-q]"+ijc&K"UeaI:O'];i6[ku0=[ZiRku6?.>)5`H4Q?r%Kdm4A_1c/cECIBF0lCo*5Z!Ld+L(A;/AZo=5)*2&]O*SJi"#L7!HoGPqk=+7*8(R2JAna2\S+6u0>pS\!>]19+:[i3"XOonYS_Lf%U]I?LFe2gu(D`cDJV:gJ<'3/aY`g*c9@R>D"_.>,1gfsonC@jjpbe2D4ZJ%SaIq308+8#qSjc5**J^&MfRb,&R\0W`J-Hd!eKHcR%h\)(Q)Yd+A:5Bd4.!f/b",i^)YYbaN^I"mK"VP'I*;W]-1AiaIWutZ7NWWOj(__i?,^:lo'?MoITUGIJ+Mk8OOCXU.1C*e!,J[FF%ngR<O87)aXfK$[<KGDQh4Fr@VHs1+,pIsgX1_ajfAKW4dS20gNqM)p)[egos1IY>qR7>"/SZ=SciX7)FYF))Z$B1&o;um0gUqbPk%86</6M-MNr5i8+^MI#M4.\jdU26hh2aFG+Z#\'^m\EG0GPZAJ&_2S!9!s;A*(rWR+?8;dZ$QRX:KFg3M3>7(=I"(Y/+;o<b$(F+K%WpCuE)s)s@BHlLG757*o5Un+$ff/FiVb`tc,:McSo]!B"SCA-k/PR:UBY>ac5o<Gc1toMnJHcL;Sa0ae3I"$!Mk,9$Pt/VKOm7`S%g:CE-6*Eqe$e:'uVSQ;PQ"J*YP8XeB^8)W@_LSF";V"TH$flUc"rhttPPtVXr+*%B+@rFV"S0f(6L5VQe@eC.<]o8m,:P0833j27%<%e[rZR65Lel$&tOA$HKZHErJCh/<rYb7,L_V_*/fFjMb0+I8s"edcUN_Kf@#14)Nfssp\&;iXFW*r"@]0]sTNOoX#TuA&^Cum.6%)bjT!7#lNGCYCSHHcRT.-QHR6X<s@!`YlT))kmN@XicP`QD\BW"[l0Y8#/9u`gOiDY=L<M,aW`e'2Fpqq$"qj'-6$]Fk'du2&?m7%OCrj+<K(Mk>nk5."jREo@&[h&>%#%J0TI_^8DtGN&6,6p]^+Pp4.07BN%TfSnr1T>Io9X0EKFgLR(O0*+^\U8)7!@=5*p-?&^TW5%bIf'k^#K[X#\Vd?p;^?UL;hG?a!&a4&2p$icZ"&^9b#3#icO^@;mrBRqNPh:S/d>tpp+!QKSsL<.anUi+aM,M-(Q7KYUSAO1Ycku%*:$;XDA<^u?t(+i2S@q2j2NPpi-!1-7]\t+,C.>0Q*Jh`7"6(/Z3uRZ,Fe%/eWr"jqcHWhkYh/[T'mc`)@KuT,Me,^(&RDrpT\b9%T!FD3S]23sAKU5l>i[@(YYaOk;rY'a`6'P!(a!>,Z_PIVIN$IFC-:'/VO1BF@2LedjFp,%32gqtr35u]/8UJpN)9`ogf!9C,E:n$%;UXM_)t3q+l.KLh]2"L/#]\s/,*+9GMEL7*&3WSF@8;sj1U6*GUmH[np#`k]6-$"e`>!E]$`22(l1pl9*$D`9HH("(a5Y[T]7m%e%if3W*4>:&#3EMPF_k,!SAg1lJ&6r(I>k/P!WGtci<g4MHAC7>J%JqUDNKb?)=jR^_F"U'.Mg-K@FAMGHV5<l"DqnO*V_r*M;]d2H%a3"<4XZ:0o5u3K\*T'PrRd^qq'<?uA(`FPh60uLID`4F7=l1M/=V(3].0WiXIo?][SlDnk'P'A&OHC6qC'>#21@1B$MD<7@<_aE/%*jTtS-rV0rLBS8cDpI'Ns%@XY\oSFFnrQlI%8n6V1$iI#H-!R4])_YJ<bXcs*jTO*TCNP_[_n[`IE8EgK%,RW9pA?JOEG%`Q2Vd#%$=ffuRZZ->7T9G'7]^)#9VQ'.?"oU!5E7<+iEMUYA6lT/?:[Odff7HBA)a5-@oAGV*\,aAV'<0O!mRTO,^!EB&%T):@ELs?=0<J=%Btn:^NCf3i+;\`X:+ifJK>utA;(7A<jQ)4N)NU)Z\9,_A-V(O4j)GG!]Fk$>SM@*]W*ffl]!u-+Y0g%&&IdV+R#qTc:mddUVh/><%22SA^7E`8<XJ.a^.'';,(J+*)RV?4L<ETBA80p&Wj--^#8N\K)3VS<[7)k2mi*^hP!]X;FT<oqu8I9?ZIZnK3fkIpbd\L8nFAA#4%[bm=A,ag+Fk?u`'FN[Jc;j8U:ZG0A8$'nS,7MIDI9l:iQpF/amS2N5t$Bh"q5mg]D-UC@4lNmc<3b+%OL8QPZ'I8O'O:L"*aTM^6%e>,uNW/+EU*Q")`n8c5u]_KQh69;^q`fq\/#gAQ-B:!A,fO.7kW^m;a>]QFU&^mIZiDh9!"1q+s_/SsPKe%+:<oM2\Hmf+\]2.iB%d'H@L<'X63ntq![oI0t9=J$3>nX<%'\SA./"fi6!W<Q=M1=`%>$#jG0RfEpe8dTIJZGr]OAPZK.ZCs*/ZD9OLEMfa?YadkU>7RM`%WOO9YU<+rR%EXk2,_g6$=b\A,$Ee*I)C;OX>?Oh9JAY/p)(b;Z)%;7mQ.Nef=Eog9n.jU&HC!!H7`G6UNJT`qg)(*jCQ9)mbj)L-%]W(CmfQ1\GatSlIc#\L0NZrGqWGjD6:5!"&QOOTt,f2:7(XptM]uX2W">4H?MfM6I\4O5_%sH)]E^Z1`*&Pa=Oeemp"[/Q>EV/RZ%Psj2u,$\hmk*(9!+2I68kqgdcI]Y%r$)ImWAV7PD`-LbnR$1-rMO[:]2F<`S;n6=g.5I0JDB*)U1U<NH16kMC2H$DmOX:kFMP`36%fPDh-L"Ig:;B[qjp/Qpn7WDfZ2N<?@6>ThoF@^3`"'Z?]YSi4)I6hRGgj=[Q^*(_L?:15/rDMnKl,js/?Clepb2VO93F+4CSucQR%8i`QO0:J+ModB=uS4irb]K7KT?T$b`B(V;A-7q#/gMd=>p=3P\45"9W0cU30.iW:cZIX-O3K(;BbMeZARSJ68Ho.C=@IhfRBeHBC%l-/C=OgjHqg+D0MSqohlRP%Tl&<"<.Qq=/fArj%M+)?aupAX<NYt1?BeFWDAAO3n@>+Vjl9u4^/PW"3q-rZq?6S?ZQNB(:m=OVk+%I&t=+b[V$a=]RO(`+pn>M^QJHZcYQV?K:I`!%`^XSg#M_/#dR"Pn?B&`f@sK!1X@C]M0Ngg(_[b;@IV<8<Cu\P9Y?M(RGTu'6J56%)3c3Ua;eI>.UnctZdg7Sku`p:/^/dtT1YKXEMO5%CLT^=dhMpg.5Jl,_Uoc@9SrsI6MMW;LRoD+T"lC:O:o`Snb*8e@O33@N+=d5%",:?@1)a)7J/])r`->pa&tO]#)q#YID1)0oW)(h[QPKUV:g2o$Q*=I6V):[t-#&?MaT>n8Zt@8?gS(pm`]5H=PVr2%eU16<N.))_%0bcEe:aD\^;OH4)Ztaas$PAJr(?XaG;:3'^b-qFJNJ2&5,;cYB-rR'T0(q\%*HUIr80)3@,JcN@*[='Tj=qHtKHc+1.Hi?]R$0>5%,)&&76\$C)N2/^Zfm#'FMN^"(:TfL`%Xurl&-f1%DoKH>H1Mf(OW-g^^.AU:XiMh5+cO"ZLCiTqA/OQoZV26+65;NBObJS*n<V?;%guRmSR_HjQG2iE$=*E]49t4(,8VJ\B:JL(FO=b3>:U7is;q$puFdo_$`+i5%.nXMX8BO\c@8Y6^a>k,`O@_?i4N]EVkmBK?8QZ'0%r'XeajduB6GNe+N_JGUU'F;$Bc;>_nVIbthL'^n\r!#]%;VrV]5f/d\!edS\JL[fND)Np^bo'!4*jt9E0`3><V((GG9iNW_N'oKA%#8U74>'`[gEUeVSK=EV[jcj6X0Hhmhc8K@A$8I\2j9p9Zns8C"SRe)'Ugti=JtpFK`9\IDCdZ$)9iHsdY14qR%suGt94O0AM`T7B%\1eFd2$sq0<8rMO:m'=B.\/&X9f/rOBP8fp`!$7Z6<mF9P9a_)"g%!!OOmmga/kD[@SUERa%qU/L/4IS/>37sJ]j)HK.148Prd#p%;WLb&1BD5G1C4`!<dPG9TjZ'`:3t&LJeT@cd4D*(P7iUaKaV$lohDa/r#IZj/=NCbQjHLYA2#3h/.@5hJ#\7c7a@650KO/2a^p]M%I*P^^`%R,7!2_TZ>hQ=&9/,!I$5uG9*XWfZ!NY;f;qn=O@1q1\irfk\U9d^/oLW]%1<F>52s;A3E'mDs9msm8@C6_fmTK)'E]im8%7b0KpL=Sja';=R1,D<eGYa/RV6G0*c<E)n^i8Gt73@*[Q>WoU%ip&h3SnpR^^*H_C9P%:A4Vu`?Mll1%U/^[P>fm;7*hJS[g1Cjk%FKWJ,?;mU(.p6I[-5)\n4j<P\^7LfW:;J67aA(ZWKhsC9aWc"4dZR%R\kIT/IMuSR_nlL[O4'Z%Cgm`<d;5L!PZ@N^1YKl"CKDiE%fpJk6Ya/:g=Hr/?bdcRI/IE<n,)B'YSQJO1=&4o*D2!6bZ^n2?;4O:k<O.qo24HH`1T8tT""p6YPnku<c)MC(W**MZ/kfkUf$`V4%X0`;W?WQf_-+1k;FIYp52N"jLOjQo-Kug>8kn[@I/WWU]R>&a6M.Gs,H7'?I/Fh+%,ibeT"X5bU/t,ffVHKY0q,km/2e?l\afJZ2%02+i]RDNL-,G(82`>?X,<_^`9Ts98>cg8)@H'Us4P@\/3OC#qE$opbQQZ;:(mO@F/m''U@.7E<qhC`q)Fp3,V'$8pFBVg@O!f*"/%6q6uZ1AT$Y1L1W]>M>S-05>\<D7NZ;A26dG@%f0=VYs(jDTP&)[Tr8'WsH+<WA/+Tmf=+",V9ho_M,@17UAX/`CXkh/Z39MN(qmk%L1-p?Q;_]ZWQM'u4Huc=EA/CZBt9U)Y+V)=$U"[$SB+p+*[Z5UdIjAla_hQK:0&X\Du5dK`-m#`;?S\&=O]#*Qojo5aGaYD_N7D[%[)J%-IM?\)@2SU\'"?M3n&^Ju[MPr@86[k6=OIts</e&F[MY,8'U5uDNan$TjYlOH:O-;q\.JMKj<I]IjI:QBp76r4@NL+OX(YI+%;\D!Vb#+8!Tl?5kZhhU;mM!SbEKlZ=O2NFoOmqEd3gf]M,XarE1:`@20ss'"O@lQE<"=NNJl*!fc6m/N@Td*U,F!R$$gH/f(@asl%I7k0ECh+l\W>1=;'-=tHV!c:@LKm[^KI2t(5j1%AZu]aJ;ahd%F\i5_9\#L=@b69Hb!Q4H7!82gn69;>:7^bT.g.1%/%T?^;neDr%q,!Q(`i61opJG?&#2'Zki64#d77hu4?j4_T_#sosFh8XI=TfphmT;bCkMA2j!>TlNh*M>jQbk)Pq"P2ckXmO4D*Ms7:.5sZYmG$?%WGDY%H\G11W[j?/*2/UeCd6]@VV6Kd::4\C%=-UeqB;?,%"fF:P%!]^$_GeQ6HD1SX+Peje$_<a.T@PtFu--i>\Q)gqU+!E:Dm#o%-)I7EQp%A.XB=C1XJ9e%0^2;f6ji3e!gkDq.qCF^_$Ugg(B+=e:dcRBjl_T'1]is7Wo3affV!5`84I:h'%uJb($?jDF:8auFG^/-%g<dFpPUD.kCoS66+F'iROc]1YRZXN[AT+)ERtB/'EUL=0`keMu'lLf==QmcMA9CiA'W*4Z-j(>[C:70gP*0#8o[$@_K!LfE/V0q9%\;7T;G#Gc]U&Ud'GsdumV&L*\<4Y@N+E^997NP!(@ZNF)=4JUM3E9@*6*4(kU0OCoRW>pd=]D]$Lm8[faU,G=prUVqQM?;P6"&M>%+41kqlAq-ALps"J+lsn$StSXB;CYMG9^=/3at9KTC(i2^V:rlY3l])reKuUD%r6"O#BfGBPP1YEVintF-9MMo8B29%@keB4S7!X*%0e#>%Yt0_r8DAcSfLurJ-0\#[Z1B4e-B!Hn:8DFTq!8,Ub^T\+,>b]5,[U*ND(.a`3nXkX+?J0oduu(=fsIk`Eft:+:F@/MnfB&(%nJLUYi$;>_,^0tNfabRQ`'h%t,7cMk9dq*@46WOt,5I"rE8WO7:h>$O9V3G)MJ]:"2iF>bD9n(rN.N627Ok]L<'qrI0nfcXqnaPc%P:L+*V:]^kjc'gBdlrB*45.OlUJc\Qf7;C<]Yh0l_>YS:*OaGn6^?)%H]iR)<=bm)!UXP58-jAq^$UIn[_qGiqh9D^>3(\IlY%mE%"X<8GS]Ps$0@[??RJ`hV`(.&LA*9B8[;!#nbsB'PHCN,EX\2eAF-,dAK2$L06u72h4?.V=C`J;0,U6.?\/:K#TVe!a`$.ocb&mTh%p,W4jPGc$/e'n-C:>>C`VcMKJLUdi:/j528_6Q^pN?oce:[ZZ;F8*PW990i<ap'sI`O+n!C!%ok%Nemb`9'm:pt0^dA0lqH>.7/V%O1gP"qPNSV2$mpVqJ!!RR$$^T7fVtfaS"S?@gAfkl_ij13-+u)<A$,=IOk].O).$]>@Xcq1WA)2%?)P_OBjecmDJX--Nbr_mDi6h%i9;J6Z/bTZj9;h+$:6CB>F7f51Wim"G%9,EDU.8a@9A\kM".>nIS%RV>;BOo*CJCCD,ofZ,F[gpdP/%6e6\qZBY1b^X7F&.%-"!T%.(e<j/LHHGG1GeidTElIg`%K%bhDl%*h>l7m9[\RO9VL4`Ao[rfk;rAA8*sU%PA"#'f,s?hn:Qos79fOq$-m?cSC/!Gh@R.Z4&0:%SmoEPo+>,%q:iAfjgY9`mcX&QIeQY,m[#$nnE"#,DOYKaUM\argW7h3A#o"cfVmN1gI-BiG/NGhdWqAUOI211$p/gNhSf8k)Ct!!%]`iR>nuX]tf<3`sR:#?8?&j<mbW.N+1RD3(Z_HR*MS4/p=1`=!<Fb^GYP.668%s!*K]7:>&h@Tq[%'.gNn7om'0GnJA4IGXW<;OW%RUbHl^?>AXNrT+DSUD+9W/1FQpm1AQo=a-.[G:"NXrI+lkpp3Y)=;^b>YgPo&a4Cu+;5j:mjrMu[@-PH9/St=RiPKQfY07mLY*A0%[W3^FMK6BV9(:eF.Ff&BaHE$R,CYF&A&*Q%Zg-hKSSK-)d7trh/n\<3qGaCJSqTN<j^t1@*(,#R3fT_o/lnR?MPMWF@cps@]XeXB%IQCg):Sr@$.f?LJI/AN>PofO;F<Y5\E@p0E\Kc+[:ot]q-?E:@:#.CQ]kJJ*l0iZ9Lo`=g0BZGH**05L7/)5PgQ@cHk8ILcdB@k6%\9sbO6mWZleTB/QSEm1&=s5K"QWkYT9.:R@mRk;1.6"/l*e;P38#5I9#K]m*j(?F)Ps!pXLY&a#j1?u3ZQ@XbW<mu6@BXoTkOlPE%p9DQ;7>%q05CFbUJ,(Sd,o`&uVA:]MKoLfrUQqS%C8WY57X\hWp4<+9Sr_M:Cl;YQ%1:FNek5gK16SgaA,Q&k9`.$EHMJ.cWVEI!%i+`^CGGWQg6+mBL4N`$_XYrB1Ljb5[bLnH<W+E7E!m3Th>ENrMMWl#J7!_P<>'ZJbP9)a-SZh/NmaQ"$Ipo\2Cf.?gm':-,\!CcF%9^A(GqO#Xsk>=GLj7a!(b4oX*;XR^CIXl\jI\aV[I`O"$5'IcG/OI2!Cc?/Oe@`?>;2,.5ksS`4AE@:gi2B@QZgW4RCS;Il\#,N6%JBjsGKWC@CaV*^QAuYBU4Q"kJ2r5f`NGfo&/j:'/k]1n;H4E.NQj+Wn84/GYeFsr-GZ%P:LT^"=b%#l`L9-@s()oB)pYT<Bl85V5%`95h$[bd@qZYcuh^KUg7qhD7s</F`"?T-"3*K^r8S>^'F*LGNCQ8,t@.+F9Yh(&./&t(]!89F+a^b&(D1!D'ol559-b?6mEUQu45%F-L\qOuK;#ScI*3LW#,$8')t:")"n1V**X?*I-LL[]gReaMV4e`Om>f(2*7k#qb/69T*"N<=C(1]QSOn/21\\VjH9WW(J?(>+m1,%M0,>fb.V%qhd[R^8*hNWoaJlO;/.?@]DkX0'G8gtqlIt<2NL)fM:P4m2-nLj9GjVN6J58ET1J'E,]?F$4TV-&T+WeYSg92X:Re3+%2tD?7+5V7/Aa&**CqCp!<k!NeM$^Fr+)@q]TD;T=qc57tqaTpFD\#jD"f!-6L[/5T+)=Q9->tnmA`0]CIVJ,2#$7M=fYZ>B_4J5:%&e!?Rh?1bKU;bsC*O!Hf<>ISQ^\ccNGhsjhk8s`sf:I%Q`uM@ol6!.CX*3L^=Km[#dKe+ThAV]caF0T+[]./5j9SQr^I,(-'([n"%d7AOQAV&s[.s#,5qU^)5/$mbSmpBqIS$h*jG,\hA4Hchsn&6@8FYlMQ%P4p+hcl,eHs#D`G/EF"DldAtfG;s[T-Hd#M:bR]]%<8C%>`@kARA3%fNNFLso'tZZ)i"71K2KI92VJn`rq>AapDblu_N'1lO]t=/JV1tCA\[2rrT\JD`Gsu>`d+K>D3$m1,3O6l96(b^M3M(E%@O<!D-TV?HQHN^Q!VJ#OL#h'di)b^do'R()S+QQ[@si(RW2BPGq67HhqOU8&Sn3gu=BB;;LC\=oA$uT%cf=hPIsa'GjnBe;9^&S(%TkQ>^%b,`83c[')h_C?u@r]G[NiR_?.+>YaHt:/2U\6iE=DY'_hnmcLCPhlQeh:n%a'tU[m4k5\.lL\`h=(*I`([MOn@H,b[pnI.%Y@Cr94>XLCAJ)T--+Gd*Z&^bC0#F6p&^"Ip%[H9lpFb<oie_Bm*o.&g(3!6KVn]eHas!^[5/JkS`SedGS,]PnRBfi3[UW'hLj<3"%c=%;@/Se=-T#`iECjA%Q!A?]c='hif>@1e');UlU52pd+D[OG'0;+2TOGgfBkQmt@?1&-j<!mdELL&'I5e/n0oE97S4sXBKHBK[R%H/8eR0OMs"eoD\Opo("?*`_G1&>Y[0_V00kpuk\jU7DgCneKg!b(Y;m(=;t[%b%6;mrGmnR+c$(?Z_=jMY2/UF]AD2AA+lqW4UuI%G_rP'++>EJa7pT@#/`ZN8B\1QBAing^".q`2bO;&5q02cjj"Rhh;_2jq;?S\)7F?mn=3ABnh(t:m)/.5pj2qM^&6]E[G9ZmB"r5T%BE"G)rp:rf=D<'Zj)6sI<H6@nr7-l-G$Y.DMuW_2bC:Pori;Z?o>MOGo(=YcoC?8JYKsu[ibuU2jVRq7J,ekZ^\R"&r;3\T^&..4%J+]RTIeT%5J,%j'J+N?rhu$oQj0N+j^iY^6V*BEB5PXBm?iTEQ#=&4XO$7sdO0AQ'DgqGk*W!\Do?VmUfAjWp]%/Y9hnT0]h16lM%mpEHpcW%89YrLM(ir$p]\j#)`c;/\fitJ#bJ&69oTC?+Q';"OhK]cOrp_<c#PJ-MVr95U+PZ<3]j8"3$ce8S/5PfR\jS#5=jhJ?G%iqI<q(gTda0u_)Y:EOeMkfjf8MO>?t-**>0j>t>sWC0eY9_n<H1%PNm#H9MMed%7mCL3'a%rP=U[kVI>UWi1?&uRjU,3=+g;lP#=%/G\o:5.pd[Vg-/2090\VqD2B_=Rl0prU(R#qp>q&JkJSAMllkT\P-o>Q"RNBZU]KJh8J(*IP"@fE8UO7GqGVt>`4sKp1p(hY)Nba%pU\qj8:cp'O&\(fWU6$oXE!9;'Z18faT&Ilce.O9E8'I)W4+K7.1rV9LNEEQ=j8Y'T4_?b[q6<R]H/7=gq[s`1qO`=aXO[!Sk5'W%?H-*I4;1BelMgbkQ#p9]A>Uh[4@1D+MLDL^C)_"A-H\?.(<($`ANAH']3i>E;L_q7btH$$l]lGZ5@ZSL,?jq&HL:_s/\P"!?_K#&%]jb`oNDFo4aGfI4$]i93N#AZ<o<19?Yqf7@jn0H>/U\\Z2E]<MOh@8p=Xp!l9E)T=5>OqU@[36cYts3(4"\+KgA9MJE9G*9DWu<'%E\1Vss*77U=5L/Z_=h"d[GfDfD&SoF>PsEDF2jO?bIsP$d$o[*"e^-$7S6$TN^=CccD4!;04QDp:8DpF]":1640Og4G$_FLh9Oc-%f`RtCnTCpNqY<qCcKiFA>&j4"@jV*N+2@^>7t99CnMahTo'\gC_\_5.j^5b!m'H`kq6.O-kANQaouA`"H2"AsIf@*sGkq:'YO-^E%r;68UQX>14`G\8!s2E0"s6Vb[\&e=N&-)"&^\PpB^AC.3^JgE~>%AI9_PrivateDataEnd